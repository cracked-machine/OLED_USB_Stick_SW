
F072_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e1c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000290c  08004edc  08004edc  00014edc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080077e8  080077e8  00020088  2**0
                  CONTENTS
  4 .ARM          00000000  080077e8  080077e8  00020088  2**0
                  CONTENTS
  5 .preinit_array 00000000  080077e8  080077e8  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080077e8  080077e8  000177e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080077ec  080077ec  000177ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  080077f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000548  20000088  08007878  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005d0  08007878  000205d0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cd4e  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000020e1  00000000  00000000  0002cdfe  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ab8  00000000  00000000  0002eee0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000988  00000000  00000000  0002f998  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000168e1  00000000  00000000  00030320  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ac01  00000000  00000000  00046c01  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00079d71  00000000  00000000  00051802  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000cb573  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000284c  00000000  00000000  000cb5f0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000088 	.word	0x20000088
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004ec4 	.word	0x08004ec4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000008c 	.word	0x2000008c
 8000104:	08004ec4 	.word	0x08004ec4

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_i2f>:
 8000220:	b570      	push	{r4, r5, r6, lr}
 8000222:	2800      	cmp	r0, #0
 8000224:	d03d      	beq.n	80002a2 <__aeabi_i2f+0x82>
 8000226:	17c3      	asrs	r3, r0, #31
 8000228:	18c5      	adds	r5, r0, r3
 800022a:	405d      	eors	r5, r3
 800022c:	0fc4      	lsrs	r4, r0, #31
 800022e:	0028      	movs	r0, r5
 8000230:	f000 fbfc 	bl	8000a2c <__clzsi2>
 8000234:	229e      	movs	r2, #158	; 0x9e
 8000236:	1a12      	subs	r2, r2, r0
 8000238:	2a96      	cmp	r2, #150	; 0x96
 800023a:	dc07      	bgt.n	800024c <__aeabi_i2f+0x2c>
 800023c:	b2d2      	uxtb	r2, r2
 800023e:	2808      	cmp	r0, #8
 8000240:	dd33      	ble.n	80002aa <__aeabi_i2f+0x8a>
 8000242:	3808      	subs	r0, #8
 8000244:	4085      	lsls	r5, r0
 8000246:	0268      	lsls	r0, r5, #9
 8000248:	0a40      	lsrs	r0, r0, #9
 800024a:	e023      	b.n	8000294 <__aeabi_i2f+0x74>
 800024c:	2a99      	cmp	r2, #153	; 0x99
 800024e:	dd0b      	ble.n	8000268 <__aeabi_i2f+0x48>
 8000250:	2305      	movs	r3, #5
 8000252:	0029      	movs	r1, r5
 8000254:	1a1b      	subs	r3, r3, r0
 8000256:	40d9      	lsrs	r1, r3
 8000258:	0003      	movs	r3, r0
 800025a:	331b      	adds	r3, #27
 800025c:	409d      	lsls	r5, r3
 800025e:	002b      	movs	r3, r5
 8000260:	1e5d      	subs	r5, r3, #1
 8000262:	41ab      	sbcs	r3, r5
 8000264:	4319      	orrs	r1, r3
 8000266:	000d      	movs	r5, r1
 8000268:	2805      	cmp	r0, #5
 800026a:	dd01      	ble.n	8000270 <__aeabi_i2f+0x50>
 800026c:	1f43      	subs	r3, r0, #5
 800026e:	409d      	lsls	r5, r3
 8000270:	002b      	movs	r3, r5
 8000272:	490f      	ldr	r1, [pc, #60]	; (80002b0 <__aeabi_i2f+0x90>)
 8000274:	400b      	ands	r3, r1
 8000276:	076e      	lsls	r6, r5, #29
 8000278:	d009      	beq.n	800028e <__aeabi_i2f+0x6e>
 800027a:	260f      	movs	r6, #15
 800027c:	4035      	ands	r5, r6
 800027e:	2d04      	cmp	r5, #4
 8000280:	d005      	beq.n	800028e <__aeabi_i2f+0x6e>
 8000282:	3304      	adds	r3, #4
 8000284:	015d      	lsls	r5, r3, #5
 8000286:	d502      	bpl.n	800028e <__aeabi_i2f+0x6e>
 8000288:	229f      	movs	r2, #159	; 0x9f
 800028a:	400b      	ands	r3, r1
 800028c:	1a12      	subs	r2, r2, r0
 800028e:	019b      	lsls	r3, r3, #6
 8000290:	0a58      	lsrs	r0, r3, #9
 8000292:	b2d2      	uxtb	r2, r2
 8000294:	0240      	lsls	r0, r0, #9
 8000296:	05d2      	lsls	r2, r2, #23
 8000298:	0a40      	lsrs	r0, r0, #9
 800029a:	07e4      	lsls	r4, r4, #31
 800029c:	4310      	orrs	r0, r2
 800029e:	4320      	orrs	r0, r4
 80002a0:	bd70      	pop	{r4, r5, r6, pc}
 80002a2:	2400      	movs	r4, #0
 80002a4:	2200      	movs	r2, #0
 80002a6:	2000      	movs	r0, #0
 80002a8:	e7f4      	b.n	8000294 <__aeabi_i2f+0x74>
 80002aa:	0268      	lsls	r0, r5, #9
 80002ac:	0a40      	lsrs	r0, r0, #9
 80002ae:	e7f1      	b.n	8000294 <__aeabi_i2f+0x74>
 80002b0:	fbffffff 	.word	0xfbffffff

080002b4 <__aeabi_ddiv>:
 80002b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002b6:	4657      	mov	r7, sl
 80002b8:	46de      	mov	lr, fp
 80002ba:	464e      	mov	r6, r9
 80002bc:	4645      	mov	r5, r8
 80002be:	b5e0      	push	{r5, r6, r7, lr}
 80002c0:	4683      	mov	fp, r0
 80002c2:	0007      	movs	r7, r0
 80002c4:	030e      	lsls	r6, r1, #12
 80002c6:	0048      	lsls	r0, r1, #1
 80002c8:	b085      	sub	sp, #20
 80002ca:	4692      	mov	sl, r2
 80002cc:	001c      	movs	r4, r3
 80002ce:	0b36      	lsrs	r6, r6, #12
 80002d0:	0d40      	lsrs	r0, r0, #21
 80002d2:	0fcd      	lsrs	r5, r1, #31
 80002d4:	2800      	cmp	r0, #0
 80002d6:	d100      	bne.n	80002da <__aeabi_ddiv+0x26>
 80002d8:	e09d      	b.n	8000416 <__aeabi_ddiv+0x162>
 80002da:	4b95      	ldr	r3, [pc, #596]	; (8000530 <__aeabi_ddiv+0x27c>)
 80002dc:	4298      	cmp	r0, r3
 80002de:	d039      	beq.n	8000354 <__aeabi_ddiv+0xa0>
 80002e0:	2380      	movs	r3, #128	; 0x80
 80002e2:	00f6      	lsls	r6, r6, #3
 80002e4:	041b      	lsls	r3, r3, #16
 80002e6:	431e      	orrs	r6, r3
 80002e8:	4a92      	ldr	r2, [pc, #584]	; (8000534 <__aeabi_ddiv+0x280>)
 80002ea:	0f7b      	lsrs	r3, r7, #29
 80002ec:	4333      	orrs	r3, r6
 80002ee:	4699      	mov	r9, r3
 80002f0:	4694      	mov	ip, r2
 80002f2:	0003      	movs	r3, r0
 80002f4:	4463      	add	r3, ip
 80002f6:	9300      	str	r3, [sp, #0]
 80002f8:	2300      	movs	r3, #0
 80002fa:	2600      	movs	r6, #0
 80002fc:	00ff      	lsls	r7, r7, #3
 80002fe:	9302      	str	r3, [sp, #8]
 8000300:	0323      	lsls	r3, r4, #12
 8000302:	0b1b      	lsrs	r3, r3, #12
 8000304:	4698      	mov	r8, r3
 8000306:	0063      	lsls	r3, r4, #1
 8000308:	0fe4      	lsrs	r4, r4, #31
 800030a:	4652      	mov	r2, sl
 800030c:	0d5b      	lsrs	r3, r3, #21
 800030e:	9401      	str	r4, [sp, #4]
 8000310:	d100      	bne.n	8000314 <__aeabi_ddiv+0x60>
 8000312:	e0b3      	b.n	800047c <__aeabi_ddiv+0x1c8>
 8000314:	4986      	ldr	r1, [pc, #536]	; (8000530 <__aeabi_ddiv+0x27c>)
 8000316:	428b      	cmp	r3, r1
 8000318:	d100      	bne.n	800031c <__aeabi_ddiv+0x68>
 800031a:	e09e      	b.n	800045a <__aeabi_ddiv+0x1a6>
 800031c:	4642      	mov	r2, r8
 800031e:	00d1      	lsls	r1, r2, #3
 8000320:	2280      	movs	r2, #128	; 0x80
 8000322:	0412      	lsls	r2, r2, #16
 8000324:	430a      	orrs	r2, r1
 8000326:	4651      	mov	r1, sl
 8000328:	0f49      	lsrs	r1, r1, #29
 800032a:	4311      	orrs	r1, r2
 800032c:	468b      	mov	fp, r1
 800032e:	4981      	ldr	r1, [pc, #516]	; (8000534 <__aeabi_ddiv+0x280>)
 8000330:	4652      	mov	r2, sl
 8000332:	468c      	mov	ip, r1
 8000334:	9900      	ldr	r1, [sp, #0]
 8000336:	4463      	add	r3, ip
 8000338:	1acb      	subs	r3, r1, r3
 800033a:	2100      	movs	r1, #0
 800033c:	00d2      	lsls	r2, r2, #3
 800033e:	9300      	str	r3, [sp, #0]
 8000340:	002b      	movs	r3, r5
 8000342:	4063      	eors	r3, r4
 8000344:	469a      	mov	sl, r3
 8000346:	2e0f      	cmp	r6, #15
 8000348:	d900      	bls.n	800034c <__aeabi_ddiv+0x98>
 800034a:	e105      	b.n	8000558 <__aeabi_ddiv+0x2a4>
 800034c:	4b7a      	ldr	r3, [pc, #488]	; (8000538 <__aeabi_ddiv+0x284>)
 800034e:	00b6      	lsls	r6, r6, #2
 8000350:	599b      	ldr	r3, [r3, r6]
 8000352:	469f      	mov	pc, r3
 8000354:	465b      	mov	r3, fp
 8000356:	4333      	orrs	r3, r6
 8000358:	4699      	mov	r9, r3
 800035a:	d000      	beq.n	800035e <__aeabi_ddiv+0xaa>
 800035c:	e0b8      	b.n	80004d0 <__aeabi_ddiv+0x21c>
 800035e:	2302      	movs	r3, #2
 8000360:	2608      	movs	r6, #8
 8000362:	2700      	movs	r7, #0
 8000364:	9000      	str	r0, [sp, #0]
 8000366:	9302      	str	r3, [sp, #8]
 8000368:	e7ca      	b.n	8000300 <__aeabi_ddiv+0x4c>
 800036a:	46cb      	mov	fp, r9
 800036c:	003a      	movs	r2, r7
 800036e:	9902      	ldr	r1, [sp, #8]
 8000370:	9501      	str	r5, [sp, #4]
 8000372:	9b01      	ldr	r3, [sp, #4]
 8000374:	469a      	mov	sl, r3
 8000376:	2902      	cmp	r1, #2
 8000378:	d027      	beq.n	80003ca <__aeabi_ddiv+0x116>
 800037a:	2903      	cmp	r1, #3
 800037c:	d100      	bne.n	8000380 <__aeabi_ddiv+0xcc>
 800037e:	e280      	b.n	8000882 <__aeabi_ddiv+0x5ce>
 8000380:	2901      	cmp	r1, #1
 8000382:	d044      	beq.n	800040e <__aeabi_ddiv+0x15a>
 8000384:	496d      	ldr	r1, [pc, #436]	; (800053c <__aeabi_ddiv+0x288>)
 8000386:	9b00      	ldr	r3, [sp, #0]
 8000388:	468c      	mov	ip, r1
 800038a:	4463      	add	r3, ip
 800038c:	001c      	movs	r4, r3
 800038e:	2c00      	cmp	r4, #0
 8000390:	dd38      	ble.n	8000404 <__aeabi_ddiv+0x150>
 8000392:	0753      	lsls	r3, r2, #29
 8000394:	d000      	beq.n	8000398 <__aeabi_ddiv+0xe4>
 8000396:	e213      	b.n	80007c0 <__aeabi_ddiv+0x50c>
 8000398:	08d2      	lsrs	r2, r2, #3
 800039a:	465b      	mov	r3, fp
 800039c:	01db      	lsls	r3, r3, #7
 800039e:	d509      	bpl.n	80003b4 <__aeabi_ddiv+0x100>
 80003a0:	4659      	mov	r1, fp
 80003a2:	4b67      	ldr	r3, [pc, #412]	; (8000540 <__aeabi_ddiv+0x28c>)
 80003a4:	4019      	ands	r1, r3
 80003a6:	468b      	mov	fp, r1
 80003a8:	2180      	movs	r1, #128	; 0x80
 80003aa:	00c9      	lsls	r1, r1, #3
 80003ac:	468c      	mov	ip, r1
 80003ae:	9b00      	ldr	r3, [sp, #0]
 80003b0:	4463      	add	r3, ip
 80003b2:	001c      	movs	r4, r3
 80003b4:	4b63      	ldr	r3, [pc, #396]	; (8000544 <__aeabi_ddiv+0x290>)
 80003b6:	429c      	cmp	r4, r3
 80003b8:	dc07      	bgt.n	80003ca <__aeabi_ddiv+0x116>
 80003ba:	465b      	mov	r3, fp
 80003bc:	0564      	lsls	r4, r4, #21
 80003be:	075f      	lsls	r7, r3, #29
 80003c0:	025b      	lsls	r3, r3, #9
 80003c2:	4317      	orrs	r7, r2
 80003c4:	0b1b      	lsrs	r3, r3, #12
 80003c6:	0d62      	lsrs	r2, r4, #21
 80003c8:	e002      	b.n	80003d0 <__aeabi_ddiv+0x11c>
 80003ca:	2300      	movs	r3, #0
 80003cc:	2700      	movs	r7, #0
 80003ce:	4a58      	ldr	r2, [pc, #352]	; (8000530 <__aeabi_ddiv+0x27c>)
 80003d0:	2100      	movs	r1, #0
 80003d2:	031b      	lsls	r3, r3, #12
 80003d4:	0b1c      	lsrs	r4, r3, #12
 80003d6:	0d0b      	lsrs	r3, r1, #20
 80003d8:	051b      	lsls	r3, r3, #20
 80003da:	4323      	orrs	r3, r4
 80003dc:	0514      	lsls	r4, r2, #20
 80003de:	4a5a      	ldr	r2, [pc, #360]	; (8000548 <__aeabi_ddiv+0x294>)
 80003e0:	0038      	movs	r0, r7
 80003e2:	4013      	ands	r3, r2
 80003e4:	431c      	orrs	r4, r3
 80003e6:	4653      	mov	r3, sl
 80003e8:	0064      	lsls	r4, r4, #1
 80003ea:	07db      	lsls	r3, r3, #31
 80003ec:	0864      	lsrs	r4, r4, #1
 80003ee:	431c      	orrs	r4, r3
 80003f0:	0021      	movs	r1, r4
 80003f2:	b005      	add	sp, #20
 80003f4:	bc3c      	pop	{r2, r3, r4, r5}
 80003f6:	4690      	mov	r8, r2
 80003f8:	4699      	mov	r9, r3
 80003fa:	46a2      	mov	sl, r4
 80003fc:	46ab      	mov	fp, r5
 80003fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000400:	2201      	movs	r2, #1
 8000402:	4252      	negs	r2, r2
 8000404:	2301      	movs	r3, #1
 8000406:	1b1b      	subs	r3, r3, r4
 8000408:	2b38      	cmp	r3, #56	; 0x38
 800040a:	dc00      	bgt.n	800040e <__aeabi_ddiv+0x15a>
 800040c:	e1ad      	b.n	800076a <__aeabi_ddiv+0x4b6>
 800040e:	2200      	movs	r2, #0
 8000410:	2300      	movs	r3, #0
 8000412:	2700      	movs	r7, #0
 8000414:	e7dc      	b.n	80003d0 <__aeabi_ddiv+0x11c>
 8000416:	465b      	mov	r3, fp
 8000418:	4333      	orrs	r3, r6
 800041a:	4699      	mov	r9, r3
 800041c:	d05e      	beq.n	80004dc <__aeabi_ddiv+0x228>
 800041e:	2e00      	cmp	r6, #0
 8000420:	d100      	bne.n	8000424 <__aeabi_ddiv+0x170>
 8000422:	e18a      	b.n	800073a <__aeabi_ddiv+0x486>
 8000424:	0030      	movs	r0, r6
 8000426:	f000 fb01 	bl	8000a2c <__clzsi2>
 800042a:	0003      	movs	r3, r0
 800042c:	3b0b      	subs	r3, #11
 800042e:	2b1c      	cmp	r3, #28
 8000430:	dd00      	ble.n	8000434 <__aeabi_ddiv+0x180>
 8000432:	e17b      	b.n	800072c <__aeabi_ddiv+0x478>
 8000434:	221d      	movs	r2, #29
 8000436:	1ad3      	subs	r3, r2, r3
 8000438:	465a      	mov	r2, fp
 800043a:	0001      	movs	r1, r0
 800043c:	40da      	lsrs	r2, r3
 800043e:	3908      	subs	r1, #8
 8000440:	408e      	lsls	r6, r1
 8000442:	0013      	movs	r3, r2
 8000444:	465f      	mov	r7, fp
 8000446:	4333      	orrs	r3, r6
 8000448:	4699      	mov	r9, r3
 800044a:	408f      	lsls	r7, r1
 800044c:	4b3f      	ldr	r3, [pc, #252]	; (800054c <__aeabi_ddiv+0x298>)
 800044e:	2600      	movs	r6, #0
 8000450:	1a1b      	subs	r3, r3, r0
 8000452:	9300      	str	r3, [sp, #0]
 8000454:	2300      	movs	r3, #0
 8000456:	9302      	str	r3, [sp, #8]
 8000458:	e752      	b.n	8000300 <__aeabi_ddiv+0x4c>
 800045a:	4641      	mov	r1, r8
 800045c:	4653      	mov	r3, sl
 800045e:	430b      	orrs	r3, r1
 8000460:	493b      	ldr	r1, [pc, #236]	; (8000550 <__aeabi_ddiv+0x29c>)
 8000462:	469b      	mov	fp, r3
 8000464:	468c      	mov	ip, r1
 8000466:	9b00      	ldr	r3, [sp, #0]
 8000468:	4463      	add	r3, ip
 800046a:	9300      	str	r3, [sp, #0]
 800046c:	465b      	mov	r3, fp
 800046e:	2b00      	cmp	r3, #0
 8000470:	d13b      	bne.n	80004ea <__aeabi_ddiv+0x236>
 8000472:	2302      	movs	r3, #2
 8000474:	2200      	movs	r2, #0
 8000476:	431e      	orrs	r6, r3
 8000478:	2102      	movs	r1, #2
 800047a:	e761      	b.n	8000340 <__aeabi_ddiv+0x8c>
 800047c:	4643      	mov	r3, r8
 800047e:	4313      	orrs	r3, r2
 8000480:	469b      	mov	fp, r3
 8000482:	d037      	beq.n	80004f4 <__aeabi_ddiv+0x240>
 8000484:	4643      	mov	r3, r8
 8000486:	2b00      	cmp	r3, #0
 8000488:	d100      	bne.n	800048c <__aeabi_ddiv+0x1d8>
 800048a:	e162      	b.n	8000752 <__aeabi_ddiv+0x49e>
 800048c:	4640      	mov	r0, r8
 800048e:	f000 facd 	bl	8000a2c <__clzsi2>
 8000492:	0003      	movs	r3, r0
 8000494:	3b0b      	subs	r3, #11
 8000496:	2b1c      	cmp	r3, #28
 8000498:	dd00      	ble.n	800049c <__aeabi_ddiv+0x1e8>
 800049a:	e153      	b.n	8000744 <__aeabi_ddiv+0x490>
 800049c:	0002      	movs	r2, r0
 800049e:	4641      	mov	r1, r8
 80004a0:	3a08      	subs	r2, #8
 80004a2:	4091      	lsls	r1, r2
 80004a4:	4688      	mov	r8, r1
 80004a6:	211d      	movs	r1, #29
 80004a8:	1acb      	subs	r3, r1, r3
 80004aa:	4651      	mov	r1, sl
 80004ac:	40d9      	lsrs	r1, r3
 80004ae:	000b      	movs	r3, r1
 80004b0:	4641      	mov	r1, r8
 80004b2:	430b      	orrs	r3, r1
 80004b4:	469b      	mov	fp, r3
 80004b6:	4653      	mov	r3, sl
 80004b8:	4093      	lsls	r3, r2
 80004ba:	001a      	movs	r2, r3
 80004bc:	9b00      	ldr	r3, [sp, #0]
 80004be:	4925      	ldr	r1, [pc, #148]	; (8000554 <__aeabi_ddiv+0x2a0>)
 80004c0:	469c      	mov	ip, r3
 80004c2:	4460      	add	r0, ip
 80004c4:	0003      	movs	r3, r0
 80004c6:	468c      	mov	ip, r1
 80004c8:	4463      	add	r3, ip
 80004ca:	9300      	str	r3, [sp, #0]
 80004cc:	2100      	movs	r1, #0
 80004ce:	e737      	b.n	8000340 <__aeabi_ddiv+0x8c>
 80004d0:	2303      	movs	r3, #3
 80004d2:	46b1      	mov	r9, r6
 80004d4:	9000      	str	r0, [sp, #0]
 80004d6:	260c      	movs	r6, #12
 80004d8:	9302      	str	r3, [sp, #8]
 80004da:	e711      	b.n	8000300 <__aeabi_ddiv+0x4c>
 80004dc:	2300      	movs	r3, #0
 80004de:	9300      	str	r3, [sp, #0]
 80004e0:	3301      	adds	r3, #1
 80004e2:	2604      	movs	r6, #4
 80004e4:	2700      	movs	r7, #0
 80004e6:	9302      	str	r3, [sp, #8]
 80004e8:	e70a      	b.n	8000300 <__aeabi_ddiv+0x4c>
 80004ea:	2303      	movs	r3, #3
 80004ec:	46c3      	mov	fp, r8
 80004ee:	431e      	orrs	r6, r3
 80004f0:	2103      	movs	r1, #3
 80004f2:	e725      	b.n	8000340 <__aeabi_ddiv+0x8c>
 80004f4:	3301      	adds	r3, #1
 80004f6:	431e      	orrs	r6, r3
 80004f8:	2200      	movs	r2, #0
 80004fa:	2101      	movs	r1, #1
 80004fc:	e720      	b.n	8000340 <__aeabi_ddiv+0x8c>
 80004fe:	2300      	movs	r3, #0
 8000500:	469a      	mov	sl, r3
 8000502:	2380      	movs	r3, #128	; 0x80
 8000504:	2700      	movs	r7, #0
 8000506:	031b      	lsls	r3, r3, #12
 8000508:	4a09      	ldr	r2, [pc, #36]	; (8000530 <__aeabi_ddiv+0x27c>)
 800050a:	e761      	b.n	80003d0 <__aeabi_ddiv+0x11c>
 800050c:	2380      	movs	r3, #128	; 0x80
 800050e:	4649      	mov	r1, r9
 8000510:	031b      	lsls	r3, r3, #12
 8000512:	4219      	tst	r1, r3
 8000514:	d100      	bne.n	8000518 <__aeabi_ddiv+0x264>
 8000516:	e0e2      	b.n	80006de <__aeabi_ddiv+0x42a>
 8000518:	4659      	mov	r1, fp
 800051a:	4219      	tst	r1, r3
 800051c:	d000      	beq.n	8000520 <__aeabi_ddiv+0x26c>
 800051e:	e0de      	b.n	80006de <__aeabi_ddiv+0x42a>
 8000520:	430b      	orrs	r3, r1
 8000522:	031b      	lsls	r3, r3, #12
 8000524:	0017      	movs	r7, r2
 8000526:	0b1b      	lsrs	r3, r3, #12
 8000528:	46a2      	mov	sl, r4
 800052a:	4a01      	ldr	r2, [pc, #4]	; (8000530 <__aeabi_ddiv+0x27c>)
 800052c:	e750      	b.n	80003d0 <__aeabi_ddiv+0x11c>
 800052e:	46c0      	nop			; (mov r8, r8)
 8000530:	000007ff 	.word	0x000007ff
 8000534:	fffffc01 	.word	0xfffffc01
 8000538:	08004f48 	.word	0x08004f48
 800053c:	000003ff 	.word	0x000003ff
 8000540:	feffffff 	.word	0xfeffffff
 8000544:	000007fe 	.word	0x000007fe
 8000548:	800fffff 	.word	0x800fffff
 800054c:	fffffc0d 	.word	0xfffffc0d
 8000550:	fffff801 	.word	0xfffff801
 8000554:	000003f3 	.word	0x000003f3
 8000558:	45d9      	cmp	r9, fp
 800055a:	d900      	bls.n	800055e <__aeabi_ddiv+0x2aa>
 800055c:	e0cb      	b.n	80006f6 <__aeabi_ddiv+0x442>
 800055e:	d100      	bne.n	8000562 <__aeabi_ddiv+0x2ae>
 8000560:	e0c6      	b.n	80006f0 <__aeabi_ddiv+0x43c>
 8000562:	003c      	movs	r4, r7
 8000564:	4648      	mov	r0, r9
 8000566:	2700      	movs	r7, #0
 8000568:	9b00      	ldr	r3, [sp, #0]
 800056a:	3b01      	subs	r3, #1
 800056c:	9300      	str	r3, [sp, #0]
 800056e:	465b      	mov	r3, fp
 8000570:	0e16      	lsrs	r6, r2, #24
 8000572:	021b      	lsls	r3, r3, #8
 8000574:	431e      	orrs	r6, r3
 8000576:	0213      	lsls	r3, r2, #8
 8000578:	4698      	mov	r8, r3
 800057a:	0433      	lsls	r3, r6, #16
 800057c:	0c1b      	lsrs	r3, r3, #16
 800057e:	4699      	mov	r9, r3
 8000580:	0c31      	lsrs	r1, r6, #16
 8000582:	9101      	str	r1, [sp, #4]
 8000584:	f7ff fe46 	bl	8000214 <__aeabi_uidivmod>
 8000588:	464a      	mov	r2, r9
 800058a:	4342      	muls	r2, r0
 800058c:	040b      	lsls	r3, r1, #16
 800058e:	0c21      	lsrs	r1, r4, #16
 8000590:	0005      	movs	r5, r0
 8000592:	4319      	orrs	r1, r3
 8000594:	428a      	cmp	r2, r1
 8000596:	d907      	bls.n	80005a8 <__aeabi_ddiv+0x2f4>
 8000598:	1989      	adds	r1, r1, r6
 800059a:	3d01      	subs	r5, #1
 800059c:	428e      	cmp	r6, r1
 800059e:	d803      	bhi.n	80005a8 <__aeabi_ddiv+0x2f4>
 80005a0:	428a      	cmp	r2, r1
 80005a2:	d901      	bls.n	80005a8 <__aeabi_ddiv+0x2f4>
 80005a4:	1e85      	subs	r5, r0, #2
 80005a6:	1989      	adds	r1, r1, r6
 80005a8:	1a88      	subs	r0, r1, r2
 80005aa:	9901      	ldr	r1, [sp, #4]
 80005ac:	f7ff fe32 	bl	8000214 <__aeabi_uidivmod>
 80005b0:	0409      	lsls	r1, r1, #16
 80005b2:	468c      	mov	ip, r1
 80005b4:	464a      	mov	r2, r9
 80005b6:	0421      	lsls	r1, r4, #16
 80005b8:	4664      	mov	r4, ip
 80005ba:	4342      	muls	r2, r0
 80005bc:	0c09      	lsrs	r1, r1, #16
 80005be:	0003      	movs	r3, r0
 80005c0:	4321      	orrs	r1, r4
 80005c2:	428a      	cmp	r2, r1
 80005c4:	d904      	bls.n	80005d0 <__aeabi_ddiv+0x31c>
 80005c6:	1989      	adds	r1, r1, r6
 80005c8:	3b01      	subs	r3, #1
 80005ca:	428e      	cmp	r6, r1
 80005cc:	d800      	bhi.n	80005d0 <__aeabi_ddiv+0x31c>
 80005ce:	e0f1      	b.n	80007b4 <__aeabi_ddiv+0x500>
 80005d0:	042d      	lsls	r5, r5, #16
 80005d2:	431d      	orrs	r5, r3
 80005d4:	46ab      	mov	fp, r5
 80005d6:	4643      	mov	r3, r8
 80005d8:	1a89      	subs	r1, r1, r2
 80005da:	4642      	mov	r2, r8
 80005dc:	0c28      	lsrs	r0, r5, #16
 80005de:	0412      	lsls	r2, r2, #16
 80005e0:	0c1d      	lsrs	r5, r3, #16
 80005e2:	465b      	mov	r3, fp
 80005e4:	0c14      	lsrs	r4, r2, #16
 80005e6:	0022      	movs	r2, r4
 80005e8:	041b      	lsls	r3, r3, #16
 80005ea:	0c1b      	lsrs	r3, r3, #16
 80005ec:	435a      	muls	r2, r3
 80005ee:	9403      	str	r4, [sp, #12]
 80005f0:	436b      	muls	r3, r5
 80005f2:	4344      	muls	r4, r0
 80005f4:	9502      	str	r5, [sp, #8]
 80005f6:	4368      	muls	r0, r5
 80005f8:	191b      	adds	r3, r3, r4
 80005fa:	0c15      	lsrs	r5, r2, #16
 80005fc:	18eb      	adds	r3, r5, r3
 80005fe:	429c      	cmp	r4, r3
 8000600:	d903      	bls.n	800060a <__aeabi_ddiv+0x356>
 8000602:	2480      	movs	r4, #128	; 0x80
 8000604:	0264      	lsls	r4, r4, #9
 8000606:	46a4      	mov	ip, r4
 8000608:	4460      	add	r0, ip
 800060a:	0c1c      	lsrs	r4, r3, #16
 800060c:	0415      	lsls	r5, r2, #16
 800060e:	041b      	lsls	r3, r3, #16
 8000610:	0c2d      	lsrs	r5, r5, #16
 8000612:	1820      	adds	r0, r4, r0
 8000614:	195d      	adds	r5, r3, r5
 8000616:	4281      	cmp	r1, r0
 8000618:	d377      	bcc.n	800070a <__aeabi_ddiv+0x456>
 800061a:	d073      	beq.n	8000704 <__aeabi_ddiv+0x450>
 800061c:	1a0c      	subs	r4, r1, r0
 800061e:	4aa2      	ldr	r2, [pc, #648]	; (80008a8 <__aeabi_ddiv+0x5f4>)
 8000620:	1b7d      	subs	r5, r7, r5
 8000622:	42af      	cmp	r7, r5
 8000624:	41bf      	sbcs	r7, r7
 8000626:	4694      	mov	ip, r2
 8000628:	9b00      	ldr	r3, [sp, #0]
 800062a:	427f      	negs	r7, r7
 800062c:	4463      	add	r3, ip
 800062e:	1be0      	subs	r0, r4, r7
 8000630:	001c      	movs	r4, r3
 8000632:	4286      	cmp	r6, r0
 8000634:	d100      	bne.n	8000638 <__aeabi_ddiv+0x384>
 8000636:	e0db      	b.n	80007f0 <__aeabi_ddiv+0x53c>
 8000638:	9901      	ldr	r1, [sp, #4]
 800063a:	f7ff fdeb 	bl	8000214 <__aeabi_uidivmod>
 800063e:	464a      	mov	r2, r9
 8000640:	4342      	muls	r2, r0
 8000642:	040b      	lsls	r3, r1, #16
 8000644:	0c29      	lsrs	r1, r5, #16
 8000646:	0007      	movs	r7, r0
 8000648:	4319      	orrs	r1, r3
 800064a:	428a      	cmp	r2, r1
 800064c:	d907      	bls.n	800065e <__aeabi_ddiv+0x3aa>
 800064e:	1989      	adds	r1, r1, r6
 8000650:	3f01      	subs	r7, #1
 8000652:	428e      	cmp	r6, r1
 8000654:	d803      	bhi.n	800065e <__aeabi_ddiv+0x3aa>
 8000656:	428a      	cmp	r2, r1
 8000658:	d901      	bls.n	800065e <__aeabi_ddiv+0x3aa>
 800065a:	1e87      	subs	r7, r0, #2
 800065c:	1989      	adds	r1, r1, r6
 800065e:	1a88      	subs	r0, r1, r2
 8000660:	9901      	ldr	r1, [sp, #4]
 8000662:	f7ff fdd7 	bl	8000214 <__aeabi_uidivmod>
 8000666:	0409      	lsls	r1, r1, #16
 8000668:	464a      	mov	r2, r9
 800066a:	4689      	mov	r9, r1
 800066c:	0429      	lsls	r1, r5, #16
 800066e:	464d      	mov	r5, r9
 8000670:	4342      	muls	r2, r0
 8000672:	0c09      	lsrs	r1, r1, #16
 8000674:	0003      	movs	r3, r0
 8000676:	4329      	orrs	r1, r5
 8000678:	428a      	cmp	r2, r1
 800067a:	d907      	bls.n	800068c <__aeabi_ddiv+0x3d8>
 800067c:	1989      	adds	r1, r1, r6
 800067e:	3b01      	subs	r3, #1
 8000680:	428e      	cmp	r6, r1
 8000682:	d803      	bhi.n	800068c <__aeabi_ddiv+0x3d8>
 8000684:	428a      	cmp	r2, r1
 8000686:	d901      	bls.n	800068c <__aeabi_ddiv+0x3d8>
 8000688:	1e83      	subs	r3, r0, #2
 800068a:	1989      	adds	r1, r1, r6
 800068c:	043f      	lsls	r7, r7, #16
 800068e:	1a89      	subs	r1, r1, r2
 8000690:	003a      	movs	r2, r7
 8000692:	9f03      	ldr	r7, [sp, #12]
 8000694:	431a      	orrs	r2, r3
 8000696:	0038      	movs	r0, r7
 8000698:	0413      	lsls	r3, r2, #16
 800069a:	0c1b      	lsrs	r3, r3, #16
 800069c:	4358      	muls	r0, r3
 800069e:	4681      	mov	r9, r0
 80006a0:	9802      	ldr	r0, [sp, #8]
 80006a2:	0c15      	lsrs	r5, r2, #16
 80006a4:	436f      	muls	r7, r5
 80006a6:	4343      	muls	r3, r0
 80006a8:	4345      	muls	r5, r0
 80006aa:	4648      	mov	r0, r9
 80006ac:	0c00      	lsrs	r0, r0, #16
 80006ae:	4684      	mov	ip, r0
 80006b0:	19db      	adds	r3, r3, r7
 80006b2:	4463      	add	r3, ip
 80006b4:	429f      	cmp	r7, r3
 80006b6:	d903      	bls.n	80006c0 <__aeabi_ddiv+0x40c>
 80006b8:	2080      	movs	r0, #128	; 0x80
 80006ba:	0240      	lsls	r0, r0, #9
 80006bc:	4684      	mov	ip, r0
 80006be:	4465      	add	r5, ip
 80006c0:	4648      	mov	r0, r9
 80006c2:	0c1f      	lsrs	r7, r3, #16
 80006c4:	0400      	lsls	r0, r0, #16
 80006c6:	041b      	lsls	r3, r3, #16
 80006c8:	0c00      	lsrs	r0, r0, #16
 80006ca:	197d      	adds	r5, r7, r5
 80006cc:	1818      	adds	r0, r3, r0
 80006ce:	42a9      	cmp	r1, r5
 80006d0:	d200      	bcs.n	80006d4 <__aeabi_ddiv+0x420>
 80006d2:	e084      	b.n	80007de <__aeabi_ddiv+0x52a>
 80006d4:	d100      	bne.n	80006d8 <__aeabi_ddiv+0x424>
 80006d6:	e07f      	b.n	80007d8 <__aeabi_ddiv+0x524>
 80006d8:	2301      	movs	r3, #1
 80006da:	431a      	orrs	r2, r3
 80006dc:	e657      	b.n	800038e <__aeabi_ddiv+0xda>
 80006de:	2380      	movs	r3, #128	; 0x80
 80006e0:	464a      	mov	r2, r9
 80006e2:	031b      	lsls	r3, r3, #12
 80006e4:	4313      	orrs	r3, r2
 80006e6:	031b      	lsls	r3, r3, #12
 80006e8:	0b1b      	lsrs	r3, r3, #12
 80006ea:	46aa      	mov	sl, r5
 80006ec:	4a6f      	ldr	r2, [pc, #444]	; (80008ac <__aeabi_ddiv+0x5f8>)
 80006ee:	e66f      	b.n	80003d0 <__aeabi_ddiv+0x11c>
 80006f0:	42ba      	cmp	r2, r7
 80006f2:	d900      	bls.n	80006f6 <__aeabi_ddiv+0x442>
 80006f4:	e735      	b.n	8000562 <__aeabi_ddiv+0x2ae>
 80006f6:	464b      	mov	r3, r9
 80006f8:	07dc      	lsls	r4, r3, #31
 80006fa:	0858      	lsrs	r0, r3, #1
 80006fc:	087b      	lsrs	r3, r7, #1
 80006fe:	431c      	orrs	r4, r3
 8000700:	07ff      	lsls	r7, r7, #31
 8000702:	e734      	b.n	800056e <__aeabi_ddiv+0x2ba>
 8000704:	2400      	movs	r4, #0
 8000706:	42af      	cmp	r7, r5
 8000708:	d289      	bcs.n	800061e <__aeabi_ddiv+0x36a>
 800070a:	4447      	add	r7, r8
 800070c:	4547      	cmp	r7, r8
 800070e:	41a4      	sbcs	r4, r4
 8000710:	465b      	mov	r3, fp
 8000712:	4264      	negs	r4, r4
 8000714:	19a4      	adds	r4, r4, r6
 8000716:	1864      	adds	r4, r4, r1
 8000718:	3b01      	subs	r3, #1
 800071a:	42a6      	cmp	r6, r4
 800071c:	d21e      	bcs.n	800075c <__aeabi_ddiv+0x4a8>
 800071e:	42a0      	cmp	r0, r4
 8000720:	d86d      	bhi.n	80007fe <__aeabi_ddiv+0x54a>
 8000722:	d100      	bne.n	8000726 <__aeabi_ddiv+0x472>
 8000724:	e0b6      	b.n	8000894 <__aeabi_ddiv+0x5e0>
 8000726:	1a24      	subs	r4, r4, r0
 8000728:	469b      	mov	fp, r3
 800072a:	e778      	b.n	800061e <__aeabi_ddiv+0x36a>
 800072c:	0003      	movs	r3, r0
 800072e:	465a      	mov	r2, fp
 8000730:	3b28      	subs	r3, #40	; 0x28
 8000732:	409a      	lsls	r2, r3
 8000734:	2700      	movs	r7, #0
 8000736:	4691      	mov	r9, r2
 8000738:	e688      	b.n	800044c <__aeabi_ddiv+0x198>
 800073a:	4658      	mov	r0, fp
 800073c:	f000 f976 	bl	8000a2c <__clzsi2>
 8000740:	3020      	adds	r0, #32
 8000742:	e672      	b.n	800042a <__aeabi_ddiv+0x176>
 8000744:	0003      	movs	r3, r0
 8000746:	4652      	mov	r2, sl
 8000748:	3b28      	subs	r3, #40	; 0x28
 800074a:	409a      	lsls	r2, r3
 800074c:	4693      	mov	fp, r2
 800074e:	2200      	movs	r2, #0
 8000750:	e6b4      	b.n	80004bc <__aeabi_ddiv+0x208>
 8000752:	4650      	mov	r0, sl
 8000754:	f000 f96a 	bl	8000a2c <__clzsi2>
 8000758:	3020      	adds	r0, #32
 800075a:	e69a      	b.n	8000492 <__aeabi_ddiv+0x1de>
 800075c:	42a6      	cmp	r6, r4
 800075e:	d1e2      	bne.n	8000726 <__aeabi_ddiv+0x472>
 8000760:	45b8      	cmp	r8, r7
 8000762:	d9dc      	bls.n	800071e <__aeabi_ddiv+0x46a>
 8000764:	1a34      	subs	r4, r6, r0
 8000766:	469b      	mov	fp, r3
 8000768:	e759      	b.n	800061e <__aeabi_ddiv+0x36a>
 800076a:	2b1f      	cmp	r3, #31
 800076c:	dc65      	bgt.n	800083a <__aeabi_ddiv+0x586>
 800076e:	4c50      	ldr	r4, [pc, #320]	; (80008b0 <__aeabi_ddiv+0x5fc>)
 8000770:	9900      	ldr	r1, [sp, #0]
 8000772:	46a4      	mov	ip, r4
 8000774:	465c      	mov	r4, fp
 8000776:	4461      	add	r1, ip
 8000778:	0008      	movs	r0, r1
 800077a:	408c      	lsls	r4, r1
 800077c:	0011      	movs	r1, r2
 800077e:	4082      	lsls	r2, r0
 8000780:	40d9      	lsrs	r1, r3
 8000782:	1e50      	subs	r0, r2, #1
 8000784:	4182      	sbcs	r2, r0
 8000786:	430c      	orrs	r4, r1
 8000788:	4314      	orrs	r4, r2
 800078a:	465a      	mov	r2, fp
 800078c:	40da      	lsrs	r2, r3
 800078e:	0013      	movs	r3, r2
 8000790:	0762      	lsls	r2, r4, #29
 8000792:	d009      	beq.n	80007a8 <__aeabi_ddiv+0x4f4>
 8000794:	220f      	movs	r2, #15
 8000796:	4022      	ands	r2, r4
 8000798:	2a04      	cmp	r2, #4
 800079a:	d005      	beq.n	80007a8 <__aeabi_ddiv+0x4f4>
 800079c:	0022      	movs	r2, r4
 800079e:	1d14      	adds	r4, r2, #4
 80007a0:	4294      	cmp	r4, r2
 80007a2:	4189      	sbcs	r1, r1
 80007a4:	4249      	negs	r1, r1
 80007a6:	185b      	adds	r3, r3, r1
 80007a8:	021a      	lsls	r2, r3, #8
 80007aa:	d562      	bpl.n	8000872 <__aeabi_ddiv+0x5be>
 80007ac:	2201      	movs	r2, #1
 80007ae:	2300      	movs	r3, #0
 80007b0:	2700      	movs	r7, #0
 80007b2:	e60d      	b.n	80003d0 <__aeabi_ddiv+0x11c>
 80007b4:	428a      	cmp	r2, r1
 80007b6:	d800      	bhi.n	80007ba <__aeabi_ddiv+0x506>
 80007b8:	e70a      	b.n	80005d0 <__aeabi_ddiv+0x31c>
 80007ba:	1e83      	subs	r3, r0, #2
 80007bc:	1989      	adds	r1, r1, r6
 80007be:	e707      	b.n	80005d0 <__aeabi_ddiv+0x31c>
 80007c0:	230f      	movs	r3, #15
 80007c2:	4013      	ands	r3, r2
 80007c4:	2b04      	cmp	r3, #4
 80007c6:	d100      	bne.n	80007ca <__aeabi_ddiv+0x516>
 80007c8:	e5e6      	b.n	8000398 <__aeabi_ddiv+0xe4>
 80007ca:	1d17      	adds	r7, r2, #4
 80007cc:	4297      	cmp	r7, r2
 80007ce:	4192      	sbcs	r2, r2
 80007d0:	4253      	negs	r3, r2
 80007d2:	449b      	add	fp, r3
 80007d4:	08fa      	lsrs	r2, r7, #3
 80007d6:	e5e0      	b.n	800039a <__aeabi_ddiv+0xe6>
 80007d8:	2800      	cmp	r0, #0
 80007da:	d100      	bne.n	80007de <__aeabi_ddiv+0x52a>
 80007dc:	e5d7      	b.n	800038e <__aeabi_ddiv+0xda>
 80007de:	1871      	adds	r1, r6, r1
 80007e0:	1e53      	subs	r3, r2, #1
 80007e2:	42b1      	cmp	r1, r6
 80007e4:	d327      	bcc.n	8000836 <__aeabi_ddiv+0x582>
 80007e6:	42a9      	cmp	r1, r5
 80007e8:	d315      	bcc.n	8000816 <__aeabi_ddiv+0x562>
 80007ea:	d058      	beq.n	800089e <__aeabi_ddiv+0x5ea>
 80007ec:	001a      	movs	r2, r3
 80007ee:	e773      	b.n	80006d8 <__aeabi_ddiv+0x424>
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	dc00      	bgt.n	80007f6 <__aeabi_ddiv+0x542>
 80007f4:	e604      	b.n	8000400 <__aeabi_ddiv+0x14c>
 80007f6:	2301      	movs	r3, #1
 80007f8:	2200      	movs	r2, #0
 80007fa:	449b      	add	fp, r3
 80007fc:	e5cd      	b.n	800039a <__aeabi_ddiv+0xe6>
 80007fe:	2302      	movs	r3, #2
 8000800:	4447      	add	r7, r8
 8000802:	4547      	cmp	r7, r8
 8000804:	4189      	sbcs	r1, r1
 8000806:	425b      	negs	r3, r3
 8000808:	469c      	mov	ip, r3
 800080a:	4249      	negs	r1, r1
 800080c:	1989      	adds	r1, r1, r6
 800080e:	190c      	adds	r4, r1, r4
 8000810:	44e3      	add	fp, ip
 8000812:	1a24      	subs	r4, r4, r0
 8000814:	e703      	b.n	800061e <__aeabi_ddiv+0x36a>
 8000816:	4643      	mov	r3, r8
 8000818:	005f      	lsls	r7, r3, #1
 800081a:	4547      	cmp	r7, r8
 800081c:	419b      	sbcs	r3, r3
 800081e:	46b8      	mov	r8, r7
 8000820:	425b      	negs	r3, r3
 8000822:	199e      	adds	r6, r3, r6
 8000824:	3a02      	subs	r2, #2
 8000826:	1989      	adds	r1, r1, r6
 8000828:	42a9      	cmp	r1, r5
 800082a:	d000      	beq.n	800082e <__aeabi_ddiv+0x57a>
 800082c:	e754      	b.n	80006d8 <__aeabi_ddiv+0x424>
 800082e:	4540      	cmp	r0, r8
 8000830:	d000      	beq.n	8000834 <__aeabi_ddiv+0x580>
 8000832:	e751      	b.n	80006d8 <__aeabi_ddiv+0x424>
 8000834:	e5ab      	b.n	800038e <__aeabi_ddiv+0xda>
 8000836:	001a      	movs	r2, r3
 8000838:	e7f6      	b.n	8000828 <__aeabi_ddiv+0x574>
 800083a:	211f      	movs	r1, #31
 800083c:	465f      	mov	r7, fp
 800083e:	4249      	negs	r1, r1
 8000840:	1b0c      	subs	r4, r1, r4
 8000842:	40e7      	lsrs	r7, r4
 8000844:	2b20      	cmp	r3, #32
 8000846:	d007      	beq.n	8000858 <__aeabi_ddiv+0x5a4>
 8000848:	491a      	ldr	r1, [pc, #104]	; (80008b4 <__aeabi_ddiv+0x600>)
 800084a:	9b00      	ldr	r3, [sp, #0]
 800084c:	468c      	mov	ip, r1
 800084e:	4463      	add	r3, ip
 8000850:	0018      	movs	r0, r3
 8000852:	465b      	mov	r3, fp
 8000854:	4083      	lsls	r3, r0
 8000856:	431a      	orrs	r2, r3
 8000858:	1e50      	subs	r0, r2, #1
 800085a:	4182      	sbcs	r2, r0
 800085c:	433a      	orrs	r2, r7
 800085e:	2707      	movs	r7, #7
 8000860:	2300      	movs	r3, #0
 8000862:	4017      	ands	r7, r2
 8000864:	d009      	beq.n	800087a <__aeabi_ddiv+0x5c6>
 8000866:	210f      	movs	r1, #15
 8000868:	2300      	movs	r3, #0
 800086a:	4011      	ands	r1, r2
 800086c:	0014      	movs	r4, r2
 800086e:	2904      	cmp	r1, #4
 8000870:	d195      	bne.n	800079e <__aeabi_ddiv+0x4ea>
 8000872:	0022      	movs	r2, r4
 8000874:	075f      	lsls	r7, r3, #29
 8000876:	025b      	lsls	r3, r3, #9
 8000878:	0b1b      	lsrs	r3, r3, #12
 800087a:	08d2      	lsrs	r2, r2, #3
 800087c:	4317      	orrs	r7, r2
 800087e:	2200      	movs	r2, #0
 8000880:	e5a6      	b.n	80003d0 <__aeabi_ddiv+0x11c>
 8000882:	2380      	movs	r3, #128	; 0x80
 8000884:	4659      	mov	r1, fp
 8000886:	031b      	lsls	r3, r3, #12
 8000888:	430b      	orrs	r3, r1
 800088a:	031b      	lsls	r3, r3, #12
 800088c:	0017      	movs	r7, r2
 800088e:	0b1b      	lsrs	r3, r3, #12
 8000890:	4a06      	ldr	r2, [pc, #24]	; (80008ac <__aeabi_ddiv+0x5f8>)
 8000892:	e59d      	b.n	80003d0 <__aeabi_ddiv+0x11c>
 8000894:	42bd      	cmp	r5, r7
 8000896:	d8b2      	bhi.n	80007fe <__aeabi_ddiv+0x54a>
 8000898:	469b      	mov	fp, r3
 800089a:	2400      	movs	r4, #0
 800089c:	e6bf      	b.n	800061e <__aeabi_ddiv+0x36a>
 800089e:	4580      	cmp	r8, r0
 80008a0:	d3b9      	bcc.n	8000816 <__aeabi_ddiv+0x562>
 80008a2:	001a      	movs	r2, r3
 80008a4:	e7c3      	b.n	800082e <__aeabi_ddiv+0x57a>
 80008a6:	46c0      	nop			; (mov r8, r8)
 80008a8:	000003ff 	.word	0x000003ff
 80008ac:	000007ff 	.word	0x000007ff
 80008b0:	0000041e 	.word	0x0000041e
 80008b4:	0000043e 	.word	0x0000043e

080008b8 <__aeabi_d2iz>:
 80008b8:	b530      	push	{r4, r5, lr}
 80008ba:	4d14      	ldr	r5, [pc, #80]	; (800090c <__aeabi_d2iz+0x54>)
 80008bc:	030a      	lsls	r2, r1, #12
 80008be:	004b      	lsls	r3, r1, #1
 80008c0:	0b12      	lsrs	r2, r2, #12
 80008c2:	0d5b      	lsrs	r3, r3, #21
 80008c4:	0fc9      	lsrs	r1, r1, #31
 80008c6:	2400      	movs	r4, #0
 80008c8:	42ab      	cmp	r3, r5
 80008ca:	dd11      	ble.n	80008f0 <__aeabi_d2iz+0x38>
 80008cc:	4c10      	ldr	r4, [pc, #64]	; (8000910 <__aeabi_d2iz+0x58>)
 80008ce:	42a3      	cmp	r3, r4
 80008d0:	dc10      	bgt.n	80008f4 <__aeabi_d2iz+0x3c>
 80008d2:	2480      	movs	r4, #128	; 0x80
 80008d4:	0364      	lsls	r4, r4, #13
 80008d6:	4322      	orrs	r2, r4
 80008d8:	4c0e      	ldr	r4, [pc, #56]	; (8000914 <__aeabi_d2iz+0x5c>)
 80008da:	1ae4      	subs	r4, r4, r3
 80008dc:	2c1f      	cmp	r4, #31
 80008de:	dd0c      	ble.n	80008fa <__aeabi_d2iz+0x42>
 80008e0:	480d      	ldr	r0, [pc, #52]	; (8000918 <__aeabi_d2iz+0x60>)
 80008e2:	1ac3      	subs	r3, r0, r3
 80008e4:	40da      	lsrs	r2, r3
 80008e6:	0013      	movs	r3, r2
 80008e8:	425c      	negs	r4, r3
 80008ea:	2900      	cmp	r1, #0
 80008ec:	d100      	bne.n	80008f0 <__aeabi_d2iz+0x38>
 80008ee:	001c      	movs	r4, r3
 80008f0:	0020      	movs	r0, r4
 80008f2:	bd30      	pop	{r4, r5, pc}
 80008f4:	4b09      	ldr	r3, [pc, #36]	; (800091c <__aeabi_d2iz+0x64>)
 80008f6:	18cc      	adds	r4, r1, r3
 80008f8:	e7fa      	b.n	80008f0 <__aeabi_d2iz+0x38>
 80008fa:	4d09      	ldr	r5, [pc, #36]	; (8000920 <__aeabi_d2iz+0x68>)
 80008fc:	40e0      	lsrs	r0, r4
 80008fe:	46ac      	mov	ip, r5
 8000900:	4463      	add	r3, ip
 8000902:	409a      	lsls	r2, r3
 8000904:	0013      	movs	r3, r2
 8000906:	4303      	orrs	r3, r0
 8000908:	e7ee      	b.n	80008e8 <__aeabi_d2iz+0x30>
 800090a:	46c0      	nop			; (mov r8, r8)
 800090c:	000003fe 	.word	0x000003fe
 8000910:	0000041d 	.word	0x0000041d
 8000914:	00000433 	.word	0x00000433
 8000918:	00000413 	.word	0x00000413
 800091c:	7fffffff 	.word	0x7fffffff
 8000920:	fffffbed 	.word	0xfffffbed

08000924 <__aeabi_ui2d>:
 8000924:	b510      	push	{r4, lr}
 8000926:	1e04      	subs	r4, r0, #0
 8000928:	d025      	beq.n	8000976 <__aeabi_ui2d+0x52>
 800092a:	f000 f87f 	bl	8000a2c <__clzsi2>
 800092e:	4b14      	ldr	r3, [pc, #80]	; (8000980 <__aeabi_ui2d+0x5c>)
 8000930:	1a1b      	subs	r3, r3, r0
 8000932:	055b      	lsls	r3, r3, #21
 8000934:	0d5b      	lsrs	r3, r3, #21
 8000936:	280a      	cmp	r0, #10
 8000938:	dd12      	ble.n	8000960 <__aeabi_ui2d+0x3c>
 800093a:	380b      	subs	r0, #11
 800093c:	4084      	lsls	r4, r0
 800093e:	2200      	movs	r2, #0
 8000940:	0324      	lsls	r4, r4, #12
 8000942:	0b24      	lsrs	r4, r4, #12
 8000944:	2100      	movs	r1, #0
 8000946:	0010      	movs	r0, r2
 8000948:	0324      	lsls	r4, r4, #12
 800094a:	0d0a      	lsrs	r2, r1, #20
 800094c:	0b24      	lsrs	r4, r4, #12
 800094e:	0512      	lsls	r2, r2, #20
 8000950:	4322      	orrs	r2, r4
 8000952:	4c0c      	ldr	r4, [pc, #48]	; (8000984 <__aeabi_ui2d+0x60>)
 8000954:	051b      	lsls	r3, r3, #20
 8000956:	4022      	ands	r2, r4
 8000958:	4313      	orrs	r3, r2
 800095a:	005b      	lsls	r3, r3, #1
 800095c:	0859      	lsrs	r1, r3, #1
 800095e:	bd10      	pop	{r4, pc}
 8000960:	0002      	movs	r2, r0
 8000962:	0021      	movs	r1, r4
 8000964:	3215      	adds	r2, #21
 8000966:	4091      	lsls	r1, r2
 8000968:	000a      	movs	r2, r1
 800096a:	210b      	movs	r1, #11
 800096c:	1a08      	subs	r0, r1, r0
 800096e:	40c4      	lsrs	r4, r0
 8000970:	0324      	lsls	r4, r4, #12
 8000972:	0b24      	lsrs	r4, r4, #12
 8000974:	e7e6      	b.n	8000944 <__aeabi_ui2d+0x20>
 8000976:	2300      	movs	r3, #0
 8000978:	2400      	movs	r4, #0
 800097a:	2200      	movs	r2, #0
 800097c:	e7e2      	b.n	8000944 <__aeabi_ui2d+0x20>
 800097e:	46c0      	nop			; (mov r8, r8)
 8000980:	0000041e 	.word	0x0000041e
 8000984:	800fffff 	.word	0x800fffff

08000988 <__aeabi_f2d>:
 8000988:	0041      	lsls	r1, r0, #1
 800098a:	0e09      	lsrs	r1, r1, #24
 800098c:	1c4b      	adds	r3, r1, #1
 800098e:	b570      	push	{r4, r5, r6, lr}
 8000990:	b2db      	uxtb	r3, r3
 8000992:	0246      	lsls	r6, r0, #9
 8000994:	0a75      	lsrs	r5, r6, #9
 8000996:	0fc4      	lsrs	r4, r0, #31
 8000998:	2b01      	cmp	r3, #1
 800099a:	dd14      	ble.n	80009c6 <__aeabi_f2d+0x3e>
 800099c:	23e0      	movs	r3, #224	; 0xe0
 800099e:	009b      	lsls	r3, r3, #2
 80009a0:	076d      	lsls	r5, r5, #29
 80009a2:	0b36      	lsrs	r6, r6, #12
 80009a4:	18cb      	adds	r3, r1, r3
 80009a6:	2100      	movs	r1, #0
 80009a8:	0d0a      	lsrs	r2, r1, #20
 80009aa:	0028      	movs	r0, r5
 80009ac:	0512      	lsls	r2, r2, #20
 80009ae:	4d1c      	ldr	r5, [pc, #112]	; (8000a20 <__aeabi_f2d+0x98>)
 80009b0:	4332      	orrs	r2, r6
 80009b2:	055b      	lsls	r3, r3, #21
 80009b4:	402a      	ands	r2, r5
 80009b6:	085b      	lsrs	r3, r3, #1
 80009b8:	4313      	orrs	r3, r2
 80009ba:	005b      	lsls	r3, r3, #1
 80009bc:	07e4      	lsls	r4, r4, #31
 80009be:	085b      	lsrs	r3, r3, #1
 80009c0:	4323      	orrs	r3, r4
 80009c2:	0019      	movs	r1, r3
 80009c4:	bd70      	pop	{r4, r5, r6, pc}
 80009c6:	2900      	cmp	r1, #0
 80009c8:	d114      	bne.n	80009f4 <__aeabi_f2d+0x6c>
 80009ca:	2d00      	cmp	r5, #0
 80009cc:	d01e      	beq.n	8000a0c <__aeabi_f2d+0x84>
 80009ce:	0028      	movs	r0, r5
 80009d0:	f000 f82c 	bl	8000a2c <__clzsi2>
 80009d4:	280a      	cmp	r0, #10
 80009d6:	dc1c      	bgt.n	8000a12 <__aeabi_f2d+0x8a>
 80009d8:	230b      	movs	r3, #11
 80009da:	002a      	movs	r2, r5
 80009dc:	1a1b      	subs	r3, r3, r0
 80009de:	40da      	lsrs	r2, r3
 80009e0:	0003      	movs	r3, r0
 80009e2:	3315      	adds	r3, #21
 80009e4:	409d      	lsls	r5, r3
 80009e6:	4b0f      	ldr	r3, [pc, #60]	; (8000a24 <__aeabi_f2d+0x9c>)
 80009e8:	0312      	lsls	r2, r2, #12
 80009ea:	1a1b      	subs	r3, r3, r0
 80009ec:	055b      	lsls	r3, r3, #21
 80009ee:	0b16      	lsrs	r6, r2, #12
 80009f0:	0d5b      	lsrs	r3, r3, #21
 80009f2:	e7d8      	b.n	80009a6 <__aeabi_f2d+0x1e>
 80009f4:	2d00      	cmp	r5, #0
 80009f6:	d006      	beq.n	8000a06 <__aeabi_f2d+0x7e>
 80009f8:	0b32      	lsrs	r2, r6, #12
 80009fa:	2680      	movs	r6, #128	; 0x80
 80009fc:	0336      	lsls	r6, r6, #12
 80009fe:	076d      	lsls	r5, r5, #29
 8000a00:	4316      	orrs	r6, r2
 8000a02:	4b09      	ldr	r3, [pc, #36]	; (8000a28 <__aeabi_f2d+0xa0>)
 8000a04:	e7cf      	b.n	80009a6 <__aeabi_f2d+0x1e>
 8000a06:	4b08      	ldr	r3, [pc, #32]	; (8000a28 <__aeabi_f2d+0xa0>)
 8000a08:	2600      	movs	r6, #0
 8000a0a:	e7cc      	b.n	80009a6 <__aeabi_f2d+0x1e>
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	2600      	movs	r6, #0
 8000a10:	e7c9      	b.n	80009a6 <__aeabi_f2d+0x1e>
 8000a12:	0003      	movs	r3, r0
 8000a14:	002a      	movs	r2, r5
 8000a16:	3b0b      	subs	r3, #11
 8000a18:	409a      	lsls	r2, r3
 8000a1a:	2500      	movs	r5, #0
 8000a1c:	e7e3      	b.n	80009e6 <__aeabi_f2d+0x5e>
 8000a1e:	46c0      	nop			; (mov r8, r8)
 8000a20:	800fffff 	.word	0x800fffff
 8000a24:	00000389 	.word	0x00000389
 8000a28:	000007ff 	.word	0x000007ff

08000a2c <__clzsi2>:
 8000a2c:	211c      	movs	r1, #28
 8000a2e:	2301      	movs	r3, #1
 8000a30:	041b      	lsls	r3, r3, #16
 8000a32:	4298      	cmp	r0, r3
 8000a34:	d301      	bcc.n	8000a3a <__clzsi2+0xe>
 8000a36:	0c00      	lsrs	r0, r0, #16
 8000a38:	3910      	subs	r1, #16
 8000a3a:	0a1b      	lsrs	r3, r3, #8
 8000a3c:	4298      	cmp	r0, r3
 8000a3e:	d301      	bcc.n	8000a44 <__clzsi2+0x18>
 8000a40:	0a00      	lsrs	r0, r0, #8
 8000a42:	3908      	subs	r1, #8
 8000a44:	091b      	lsrs	r3, r3, #4
 8000a46:	4298      	cmp	r0, r3
 8000a48:	d301      	bcc.n	8000a4e <__clzsi2+0x22>
 8000a4a:	0900      	lsrs	r0, r0, #4
 8000a4c:	3904      	subs	r1, #4
 8000a4e:	a202      	add	r2, pc, #8	; (adr r2, 8000a58 <__clzsi2+0x2c>)
 8000a50:	5c10      	ldrb	r0, [r2, r0]
 8000a52:	1840      	adds	r0, r0, r1
 8000a54:	4770      	bx	lr
 8000a56:	46c0      	nop			; (mov r8, r8)
 8000a58:	02020304 	.word	0x02020304
 8000a5c:	01010101 	.word	0x01010101
	...

08000a68 <I2C_DeviceScan>:
	return ch;
}
*/


SM_DeviceFoundTypedef I2C_DeviceScan() {
 8000a68:	b590      	push	{r4, r7, lr}
 8000a6a:	b083      	sub	sp, #12
 8000a6c:	af00      	add	r7, sp, #0

	SM_DeviceFoundTypedef smbus_status = SMBUS_DEVICE_MISSING;
 8000a6e:	1dfb      	adds	r3, r7, #7
 8000a70:	2200      	movs	r2, #0
 8000a72:	701a      	strb	r2, [r3, #0]



    HAL_StatusTypeDef res;
    for(uint16_t i = 0; i < 128; i++)
 8000a74:	1d3b      	adds	r3, r7, #4
 8000a76:	2200      	movs	r2, #0
 8000a78:	801a      	strh	r2, [r3, #0]
 8000a7a:	e017      	b.n	8000aac <I2C_DeviceScan+0x44>
    {
        res = HAL_I2C_IsDeviceReady(&hi2c1, i << 1, 1, 10);
 8000a7c:	1d3b      	adds	r3, r7, #4
 8000a7e:	881b      	ldrh	r3, [r3, #0]
 8000a80:	18db      	adds	r3, r3, r3
 8000a82:	b299      	uxth	r1, r3
 8000a84:	1cfc      	adds	r4, r7, #3
 8000a86:	480e      	ldr	r0, [pc, #56]	; (8000ac0 <I2C_DeviceScan+0x58>)
 8000a88:	230a      	movs	r3, #10
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	f001 fa38 	bl	8001f00 <HAL_I2C_IsDeviceReady>
 8000a90:	0003      	movs	r3, r0
 8000a92:	7023      	strb	r3, [r4, #0]
        if(res == HAL_OK)
 8000a94:	1cfb      	adds	r3, r7, #3
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d102      	bne.n	8000aa2 <I2C_DeviceScan+0x3a>
        {

           	smbus_status = SMBUS_DEVICE_FOUND;
 8000a9c:	1dfb      	adds	r3, r7, #7
 8000a9e:	2201      	movs	r2, #1
 8000aa0:	701a      	strb	r2, [r3, #0]
    for(uint16_t i = 0; i < 128; i++)
 8000aa2:	1d3b      	adds	r3, r7, #4
 8000aa4:	881a      	ldrh	r2, [r3, #0]
 8000aa6:	1d3b      	adds	r3, r7, #4
 8000aa8:	3201      	adds	r2, #1
 8000aaa:	801a      	strh	r2, [r3, #0]
 8000aac:	1d3b      	adds	r3, r7, #4
 8000aae:	881b      	ldrh	r3, [r3, #0]
 8000ab0:	2b7f      	cmp	r3, #127	; 0x7f
 8000ab2:	d9e3      	bls.n	8000a7c <I2C_DeviceScan+0x14>

        }
    }

    return smbus_status;
 8000ab4:	1dfb      	adds	r3, r7, #7
 8000ab6:	781b      	ldrb	r3, [r3, #0]
}
 8000ab8:	0018      	movs	r0, r3
 8000aba:	46bd      	mov	sp, r7
 8000abc:	b003      	add	sp, #12
 8000abe:	bd90      	pop	{r4, r7, pc}
 8000ac0:	200004b8 	.word	0x200004b8

08000ac4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000acc:	2390      	movs	r3, #144	; 0x90
 8000ace:	05db      	lsls	r3, r3, #23
 8000ad0:	2120      	movs	r1, #32
 8000ad2:	0018      	movs	r0, r3
 8000ad4:	f001 f835 	bl	8001b42 <HAL_GPIO_TogglePin>

}
 8000ad8:	46c0      	nop			; (mov r8, r8)
 8000ada:	46bd      	mov	sp, r7
 8000adc:	b002      	add	sp, #8
 8000ade:	bd80      	pop	{r7, pc}

08000ae0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b084      	sub	sp, #16
 8000ae4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ae6:	f000 fb55 	bl	8001194 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000aea:	f000 f891 	bl	8000c10 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000aee:	f000 f977 	bl	8000de0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000af2:	f000 f957 	bl	8000da4 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000af6:	f000 f925 	bl	8000d44 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8000afa:	f000 f8e3 	bl	8000cc4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  // blink when initiated correctly
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000afe:	2390      	movs	r3, #144	; 0x90
 8000b00:	05db      	lsls	r3, r3, #23
 8000b02:	2201      	movs	r2, #1
 8000b04:	2120      	movs	r1, #32
 8000b06:	0018      	movs	r0, r3
 8000b08:	f000 fffe 	bl	8001b08 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8000b0c:	2064      	movs	r0, #100	; 0x64
 8000b0e:	f000 fba5 	bl	800125c <HAL_Delay>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000b12:	2390      	movs	r3, #144	; 0x90
 8000b14:	05db      	lsls	r3, r3, #23
 8000b16:	2200      	movs	r2, #0
 8000b18:	2120      	movs	r1, #32
 8000b1a:	0018      	movs	r0, r3
 8000b1c:	f000 fff4 	bl	8001b08 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8000b20:	2064      	movs	r0, #100	; 0x64
 8000b22:	f000 fb9b 	bl	800125c <HAL_Delay>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000b26:	2390      	movs	r3, #144	; 0x90
 8000b28:	05db      	lsls	r3, r3, #23
 8000b2a:	2201      	movs	r2, #1
 8000b2c:	2120      	movs	r1, #32
 8000b2e:	0018      	movs	r0, r3
 8000b30:	f000 ffea 	bl	8001b08 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8000b34:	2064      	movs	r0, #100	; 0x64
 8000b36:	f000 fb91 	bl	800125c <HAL_Delay>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000b3a:	2390      	movs	r3, #144	; 0x90
 8000b3c:	05db      	lsls	r3, r3, #23
 8000b3e:	2200      	movs	r2, #0
 8000b40:	2120      	movs	r1, #32
 8000b42:	0018      	movs	r0, r3
 8000b44:	f000 ffe0 	bl	8001b08 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8000b48:	2064      	movs	r0, #100	; 0x64
 8000b4a:	f000 fb87 	bl	800125c <HAL_Delay>



  if(I2C_DeviceScan())
 8000b4e:	f7ff ff8b 	bl	8000a68 <I2C_DeviceScan>
 8000b52:	1e03      	subs	r3, r0, #0
 8000b54:	d02b      	beq.n	8000bae <main+0xce>
  {
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000b56:	2390      	movs	r3, #144	; 0x90
 8000b58:	05db      	lsls	r3, r3, #23
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	2120      	movs	r1, #32
 8000b5e:	0018      	movs	r0, r3
 8000b60:	f000 ffd2 	bl	8001b08 <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 8000b64:	23fa      	movs	r3, #250	; 0xfa
 8000b66:	009b      	lsls	r3, r3, #2
 8000b68:	0018      	movs	r0, r3
 8000b6a:	f000 fb77 	bl	800125c <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000b6e:	2390      	movs	r3, #144	; 0x90
 8000b70:	05db      	lsls	r3, r3, #23
 8000b72:	2200      	movs	r2, #0
 8000b74:	2120      	movs	r1, #32
 8000b76:	0018      	movs	r0, r3
 8000b78:	f000 ffc6 	bl	8001b08 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 8000b7c:	2064      	movs	r0, #100	; 0x64
 8000b7e:	f000 fb6d 	bl	800125c <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000b82:	2390      	movs	r3, #144	; 0x90
 8000b84:	05db      	lsls	r3, r3, #23
 8000b86:	2201      	movs	r2, #1
 8000b88:	2120      	movs	r1, #32
 8000b8a:	0018      	movs	r0, r3
 8000b8c:	f000 ffbc 	bl	8001b08 <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 8000b90:	23fa      	movs	r3, #250	; 0xfa
 8000b92:	009b      	lsls	r3, r3, #2
 8000b94:	0018      	movs	r0, r3
 8000b96:	f000 fb61 	bl	800125c <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000b9a:	2390      	movs	r3, #144	; 0x90
 8000b9c:	05db      	lsls	r3, r3, #23
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	2120      	movs	r1, #32
 8000ba2:	0018      	movs	r0, r3
 8000ba4:	f000 ffb0 	bl	8001b08 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 8000ba8:	2064      	movs	r0, #100	; 0x64
 8000baa:	f000 fb57 	bl	800125c <HAL_Delay>
  }

  // start receiving on UART via DMA
  uint8_t uart_data_in[1];
  HAL_UART_Receive_DMA(&huart1, uart_data_in, 1);
 8000bae:	230c      	movs	r3, #12
 8000bb0:	18f9      	adds	r1, r7, r3
 8000bb2:	4b14      	ldr	r3, [pc, #80]	; (8000c04 <main+0x124>)
 8000bb4:	2201      	movs	r2, #1
 8000bb6:	0018      	movs	r0, r3
 8000bb8:	f002 fb82 	bl	80032c0 <HAL_UART_Receive_DMA>
  if(I2C_DeviceScan())
 8000bbc:	f7ff ff54 	bl	8000a68 <I2C_DeviceScan>
 8000bc0:	1e03      	subs	r3, r0, #0
 8000bc2:	d001      	beq.n	8000bc8 <main+0xe8>
  {
	  ssd1306_TestAll();
 8000bc4:	f003 fd1e 	bl	8004604 <ssd1306_TestAll>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	    ssd1306_Fill(Black);
 8000bc8:	2000      	movs	r0, #0
 8000bca:	f003 fa3f 	bl	800404c <ssd1306_Fill>
	    ssd1306_SetCursor(2, 0);
 8000bce:	2100      	movs	r1, #0
 8000bd0:	2002      	movs	r0, #2
 8000bd2:	f003 fbb5 	bl	8004340 <ssd1306_SetCursor>
	    char data_out [5] = "";
 8000bd6:	1d3b      	adds	r3, r7, #4
 8000bd8:	2200      	movs	r2, #0
 8000bda:	601a      	str	r2, [r3, #0]
 8000bdc:	2200      	movs	r2, #0
 8000bde:	711a      	strb	r2, [r3, #4]
	    snprintf(data_out, sizeof(data_out), "\n\r%s\n\r", uart_data_in);
 8000be0:	230c      	movs	r3, #12
 8000be2:	18fb      	adds	r3, r7, r3
 8000be4:	4a08      	ldr	r2, [pc, #32]	; (8000c08 <main+0x128>)
 8000be6:	1d38      	adds	r0, r7, #4
 8000be8:	2105      	movs	r1, #5
 8000bea:	f003 fd65 	bl	80046b8 <sniprintf>
	    ssd1306_WriteString(data_out, Font_7x10, White);
 8000bee:	4a07      	ldr	r2, [pc, #28]	; (8000c0c <main+0x12c>)
 8000bf0:	1d38      	adds	r0, r7, #4
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	6811      	ldr	r1, [r2, #0]
 8000bf6:	6852      	ldr	r2, [r2, #4]
 8000bf8:	f003 fb78 	bl	80042ec <ssd1306_WriteString>
	    ssd1306_UpdateScreen();
 8000bfc:	f003 fa4a 	bl	8004094 <ssd1306_UpdateScreen>
  {
 8000c00:	e7e2      	b.n	8000bc8 <main+0xe8>
 8000c02:	46c0      	nop			; (mov r8, r8)
 8000c04:	20000548 	.word	0x20000548
 8000c08:	08004edc 	.word	0x08004edc
 8000c0c:	2000000c 	.word	0x2000000c

08000c10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c10:	b590      	push	{r4, r7, lr}
 8000c12:	b099      	sub	sp, #100	; 0x64
 8000c14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c16:	242c      	movs	r4, #44	; 0x2c
 8000c18:	193b      	adds	r3, r7, r4
 8000c1a:	0018      	movs	r0, r3
 8000c1c:	2334      	movs	r3, #52	; 0x34
 8000c1e:	001a      	movs	r2, r3
 8000c20:	2100      	movs	r1, #0
 8000c22:	f003 fd40 	bl	80046a6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c26:	231c      	movs	r3, #28
 8000c28:	18fb      	adds	r3, r7, r3
 8000c2a:	0018      	movs	r0, r3
 8000c2c:	2310      	movs	r3, #16
 8000c2e:	001a      	movs	r2, r3
 8000c30:	2100      	movs	r1, #0
 8000c32:	f003 fd38 	bl	80046a6 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c36:	003b      	movs	r3, r7
 8000c38:	0018      	movs	r0, r3
 8000c3a:	231c      	movs	r3, #28
 8000c3c:	001a      	movs	r2, r3
 8000c3e:	2100      	movs	r1, #0
 8000c40:	f003 fd31 	bl	80046a6 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c44:	0021      	movs	r1, r4
 8000c46:	187b      	adds	r3, r7, r1
 8000c48:	2202      	movs	r2, #2
 8000c4a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c4c:	187b      	adds	r3, r7, r1
 8000c4e:	2201      	movs	r2, #1
 8000c50:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c52:	187b      	adds	r3, r7, r1
 8000c54:	2210      	movs	r2, #16
 8000c56:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000c58:	187b      	adds	r3, r7, r1
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c5e:	187b      	adds	r3, r7, r1
 8000c60:	0018      	movs	r0, r3
 8000c62:	f001 fcdb 	bl	800261c <HAL_RCC_OscConfig>
 8000c66:	1e03      	subs	r3, r0, #0
 8000c68:	d001      	beq.n	8000c6e <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000c6a:	f000 f901 	bl	8000e70 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c6e:	211c      	movs	r1, #28
 8000c70:	187b      	adds	r3, r7, r1
 8000c72:	2207      	movs	r2, #7
 8000c74:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000c76:	187b      	adds	r3, r7, r1
 8000c78:	2200      	movs	r2, #0
 8000c7a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c7c:	187b      	adds	r3, r7, r1
 8000c7e:	2200      	movs	r2, #0
 8000c80:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c82:	187b      	adds	r3, r7, r1
 8000c84:	2200      	movs	r2, #0
 8000c86:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c88:	187b      	adds	r3, r7, r1
 8000c8a:	2100      	movs	r1, #0
 8000c8c:	0018      	movs	r0, r3
 8000c8e:	f002 f84b 	bl	8002d28 <HAL_RCC_ClockConfig>
 8000c92:	1e03      	subs	r3, r0, #0
 8000c94:	d001      	beq.n	8000c9a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000c96:	f000 f8eb 	bl	8000e70 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8000c9a:	003b      	movs	r3, r7
 8000c9c:	2221      	movs	r2, #33	; 0x21
 8000c9e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000ca0:	003b      	movs	r3, r7
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000ca6:	003b      	movs	r3, r7
 8000ca8:	2200      	movs	r2, #0
 8000caa:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cac:	003b      	movs	r3, r7
 8000cae:	0018      	movs	r0, r3
 8000cb0:	f002 f9b2 	bl	8003018 <HAL_RCCEx_PeriphCLKConfig>
 8000cb4:	1e03      	subs	r3, r0, #0
 8000cb6:	d001      	beq.n	8000cbc <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000cb8:	f000 f8da 	bl	8000e70 <Error_Handler>
  }
}
 8000cbc:	46c0      	nop			; (mov r8, r8)
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	b019      	add	sp, #100	; 0x64
 8000cc2:	bd90      	pop	{r4, r7, pc}

08000cc4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000cc8:	4b1b      	ldr	r3, [pc, #108]	; (8000d38 <MX_I2C1_Init+0x74>)
 8000cca:	4a1c      	ldr	r2, [pc, #112]	; (8000d3c <MX_I2C1_Init+0x78>)
 8000ccc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000cce:	4b1a      	ldr	r3, [pc, #104]	; (8000d38 <MX_I2C1_Init+0x74>)
 8000cd0:	4a1b      	ldr	r2, [pc, #108]	; (8000d40 <MX_I2C1_Init+0x7c>)
 8000cd2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000cd4:	4b18      	ldr	r3, [pc, #96]	; (8000d38 <MX_I2C1_Init+0x74>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cda:	4b17      	ldr	r3, [pc, #92]	; (8000d38 <MX_I2C1_Init+0x74>)
 8000cdc:	2201      	movs	r2, #1
 8000cde:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ce0:	4b15      	ldr	r3, [pc, #84]	; (8000d38 <MX_I2C1_Init+0x74>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000ce6:	4b14      	ldr	r3, [pc, #80]	; (8000d38 <MX_I2C1_Init+0x74>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000cec:	4b12      	ldr	r3, [pc, #72]	; (8000d38 <MX_I2C1_Init+0x74>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cf2:	4b11      	ldr	r3, [pc, #68]	; (8000d38 <MX_I2C1_Init+0x74>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cf8:	4b0f      	ldr	r3, [pc, #60]	; (8000d38 <MX_I2C1_Init+0x74>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000cfe:	4b0e      	ldr	r3, [pc, #56]	; (8000d38 <MX_I2C1_Init+0x74>)
 8000d00:	0018      	movs	r0, r3
 8000d02:	f000 ff39 	bl	8001b78 <HAL_I2C_Init>
 8000d06:	1e03      	subs	r3, r0, #0
 8000d08:	d001      	beq.n	8000d0e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000d0a:	f000 f8b1 	bl	8000e70 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d0e:	4b0a      	ldr	r3, [pc, #40]	; (8000d38 <MX_I2C1_Init+0x74>)
 8000d10:	2100      	movs	r1, #0
 8000d12:	0018      	movs	r0, r3
 8000d14:	f001 fbea 	bl	80024ec <HAL_I2CEx_ConfigAnalogFilter>
 8000d18:	1e03      	subs	r3, r0, #0
 8000d1a:	d001      	beq.n	8000d20 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000d1c:	f000 f8a8 	bl	8000e70 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000d20:	4b05      	ldr	r3, [pc, #20]	; (8000d38 <MX_I2C1_Init+0x74>)
 8000d22:	2100      	movs	r1, #0
 8000d24:	0018      	movs	r0, r3
 8000d26:	f001 fc2d 	bl	8002584 <HAL_I2CEx_ConfigDigitalFilter>
 8000d2a:	1e03      	subs	r3, r0, #0
 8000d2c:	d001      	beq.n	8000d32 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000d2e:	f000 f89f 	bl	8000e70 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d32:	46c0      	nop			; (mov r8, r8)
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	200004b8 	.word	0x200004b8
 8000d3c:	40005400 	.word	0x40005400
 8000d40:	2000090e 	.word	0x2000090e

08000d44 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d48:	4b14      	ldr	r3, [pc, #80]	; (8000d9c <MX_USART1_UART_Init+0x58>)
 8000d4a:	4a15      	ldr	r2, [pc, #84]	; (8000da0 <MX_USART1_UART_Init+0x5c>)
 8000d4c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000d4e:	4b13      	ldr	r3, [pc, #76]	; (8000d9c <MX_USART1_UART_Init+0x58>)
 8000d50:	22e1      	movs	r2, #225	; 0xe1
 8000d52:	0252      	lsls	r2, r2, #9
 8000d54:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d56:	4b11      	ldr	r3, [pc, #68]	; (8000d9c <MX_USART1_UART_Init+0x58>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d5c:	4b0f      	ldr	r3, [pc, #60]	; (8000d9c <MX_USART1_UART_Init+0x58>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d62:	4b0e      	ldr	r3, [pc, #56]	; (8000d9c <MX_USART1_UART_Init+0x58>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d68:	4b0c      	ldr	r3, [pc, #48]	; (8000d9c <MX_USART1_UART_Init+0x58>)
 8000d6a:	220c      	movs	r2, #12
 8000d6c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d6e:	4b0b      	ldr	r3, [pc, #44]	; (8000d9c <MX_USART1_UART_Init+0x58>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d74:	4b09      	ldr	r3, [pc, #36]	; (8000d9c <MX_USART1_UART_Init+0x58>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d7a:	4b08      	ldr	r3, [pc, #32]	; (8000d9c <MX_USART1_UART_Init+0x58>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d80:	4b06      	ldr	r3, [pc, #24]	; (8000d9c <MX_USART1_UART_Init+0x58>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d86:	4b05      	ldr	r3, [pc, #20]	; (8000d9c <MX_USART1_UART_Init+0x58>)
 8000d88:	0018      	movs	r0, r3
 8000d8a:	f002 fa45 	bl	8003218 <HAL_UART_Init>
 8000d8e:	1e03      	subs	r3, r0, #0
 8000d90:	d001      	beq.n	8000d96 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000d92:	f000 f86d 	bl	8000e70 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d96:	46c0      	nop			; (mov r8, r8)
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	20000548 	.word	0x20000548
 8000da0:	40013800 	.word	0x40013800

08000da4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000daa:	4b0c      	ldr	r3, [pc, #48]	; (8000ddc <MX_DMA_Init+0x38>)
 8000dac:	695a      	ldr	r2, [r3, #20]
 8000dae:	4b0b      	ldr	r3, [pc, #44]	; (8000ddc <MX_DMA_Init+0x38>)
 8000db0:	2101      	movs	r1, #1
 8000db2:	430a      	orrs	r2, r1
 8000db4:	615a      	str	r2, [r3, #20]
 8000db6:	4b09      	ldr	r3, [pc, #36]	; (8000ddc <MX_DMA_Init+0x38>)
 8000db8:	695b      	ldr	r3, [r3, #20]
 8000dba:	2201      	movs	r2, #1
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	607b      	str	r3, [r7, #4]
 8000dc0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	2100      	movs	r1, #0
 8000dc6:	200a      	movs	r0, #10
 8000dc8:	f000 fb16 	bl	80013f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000dcc:	200a      	movs	r0, #10
 8000dce:	f000 fb28 	bl	8001422 <HAL_NVIC_EnableIRQ>

}
 8000dd2:	46c0      	nop			; (mov r8, r8)
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	b002      	add	sp, #8
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	46c0      	nop			; (mov r8, r8)
 8000ddc:	40021000 	.word	0x40021000

08000de0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000de0:	b590      	push	{r4, r7, lr}
 8000de2:	b089      	sub	sp, #36	; 0x24
 8000de4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de6:	240c      	movs	r4, #12
 8000de8:	193b      	adds	r3, r7, r4
 8000dea:	0018      	movs	r0, r3
 8000dec:	2314      	movs	r3, #20
 8000dee:	001a      	movs	r2, r3
 8000df0:	2100      	movs	r1, #0
 8000df2:	f003 fc58 	bl	80046a6 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000df6:	4b1d      	ldr	r3, [pc, #116]	; (8000e6c <MX_GPIO_Init+0x8c>)
 8000df8:	695a      	ldr	r2, [r3, #20]
 8000dfa:	4b1c      	ldr	r3, [pc, #112]	; (8000e6c <MX_GPIO_Init+0x8c>)
 8000dfc:	2180      	movs	r1, #128	; 0x80
 8000dfe:	0289      	lsls	r1, r1, #10
 8000e00:	430a      	orrs	r2, r1
 8000e02:	615a      	str	r2, [r3, #20]
 8000e04:	4b19      	ldr	r3, [pc, #100]	; (8000e6c <MX_GPIO_Init+0x8c>)
 8000e06:	695a      	ldr	r2, [r3, #20]
 8000e08:	2380      	movs	r3, #128	; 0x80
 8000e0a:	029b      	lsls	r3, r3, #10
 8000e0c:	4013      	ands	r3, r2
 8000e0e:	60bb      	str	r3, [r7, #8]
 8000e10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e12:	4b16      	ldr	r3, [pc, #88]	; (8000e6c <MX_GPIO_Init+0x8c>)
 8000e14:	695a      	ldr	r2, [r3, #20]
 8000e16:	4b15      	ldr	r3, [pc, #84]	; (8000e6c <MX_GPIO_Init+0x8c>)
 8000e18:	2180      	movs	r1, #128	; 0x80
 8000e1a:	02c9      	lsls	r1, r1, #11
 8000e1c:	430a      	orrs	r2, r1
 8000e1e:	615a      	str	r2, [r3, #20]
 8000e20:	4b12      	ldr	r3, [pc, #72]	; (8000e6c <MX_GPIO_Init+0x8c>)
 8000e22:	695a      	ldr	r2, [r3, #20]
 8000e24:	2380      	movs	r3, #128	; 0x80
 8000e26:	02db      	lsls	r3, r3, #11
 8000e28:	4013      	ands	r3, r2
 8000e2a:	607b      	str	r3, [r7, #4]
 8000e2c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000e2e:	2390      	movs	r3, #144	; 0x90
 8000e30:	05db      	lsls	r3, r3, #23
 8000e32:	2200      	movs	r2, #0
 8000e34:	2120      	movs	r1, #32
 8000e36:	0018      	movs	r0, r3
 8000e38:	f000 fe66 	bl	8001b08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000e3c:	0021      	movs	r1, r4
 8000e3e:	187b      	adds	r3, r7, r1
 8000e40:	2220      	movs	r2, #32
 8000e42:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e44:	187b      	adds	r3, r7, r1
 8000e46:	2201      	movs	r2, #1
 8000e48:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4a:	187b      	adds	r3, r7, r1
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e50:	187b      	adds	r3, r7, r1
 8000e52:	2200      	movs	r2, #0
 8000e54:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e56:	187a      	adds	r2, r7, r1
 8000e58:	2390      	movs	r3, #144	; 0x90
 8000e5a:	05db      	lsls	r3, r3, #23
 8000e5c:	0011      	movs	r1, r2
 8000e5e:	0018      	movs	r0, r3
 8000e60:	f000 fcda 	bl	8001818 <HAL_GPIO_Init>

}
 8000e64:	46c0      	nop			; (mov r8, r8)
 8000e66:	46bd      	mov	sp, r7
 8000e68:	b009      	add	sp, #36	; 0x24
 8000e6a:	bd90      	pop	{r4, r7, pc}
 8000e6c:	40021000 	.word	0x40021000

08000e70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000e74:	46c0      	nop			; (mov r8, r8)
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
	...

08000e7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e82:	4b0f      	ldr	r3, [pc, #60]	; (8000ec0 <HAL_MspInit+0x44>)
 8000e84:	699a      	ldr	r2, [r3, #24]
 8000e86:	4b0e      	ldr	r3, [pc, #56]	; (8000ec0 <HAL_MspInit+0x44>)
 8000e88:	2101      	movs	r1, #1
 8000e8a:	430a      	orrs	r2, r1
 8000e8c:	619a      	str	r2, [r3, #24]
 8000e8e:	4b0c      	ldr	r3, [pc, #48]	; (8000ec0 <HAL_MspInit+0x44>)
 8000e90:	699b      	ldr	r3, [r3, #24]
 8000e92:	2201      	movs	r2, #1
 8000e94:	4013      	ands	r3, r2
 8000e96:	607b      	str	r3, [r7, #4]
 8000e98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e9a:	4b09      	ldr	r3, [pc, #36]	; (8000ec0 <HAL_MspInit+0x44>)
 8000e9c:	69da      	ldr	r2, [r3, #28]
 8000e9e:	4b08      	ldr	r3, [pc, #32]	; (8000ec0 <HAL_MspInit+0x44>)
 8000ea0:	2180      	movs	r1, #128	; 0x80
 8000ea2:	0549      	lsls	r1, r1, #21
 8000ea4:	430a      	orrs	r2, r1
 8000ea6:	61da      	str	r2, [r3, #28]
 8000ea8:	4b05      	ldr	r3, [pc, #20]	; (8000ec0 <HAL_MspInit+0x44>)
 8000eaa:	69da      	ldr	r2, [r3, #28]
 8000eac:	2380      	movs	r3, #128	; 0x80
 8000eae:	055b      	lsls	r3, r3, #21
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	603b      	str	r3, [r7, #0]
 8000eb4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eb6:	46c0      	nop			; (mov r8, r8)
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	b002      	add	sp, #8
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	46c0      	nop			; (mov r8, r8)
 8000ec0:	40021000 	.word	0x40021000

08000ec4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b08a      	sub	sp, #40	; 0x28
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ecc:	2314      	movs	r3, #20
 8000ece:	18fb      	adds	r3, r7, r3
 8000ed0:	0018      	movs	r0, r3
 8000ed2:	2314      	movs	r3, #20
 8000ed4:	001a      	movs	r2, r3
 8000ed6:	2100      	movs	r1, #0
 8000ed8:	f003 fbe5 	bl	80046a6 <memset>
  if(hi2c->Instance==I2C1)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a1c      	ldr	r2, [pc, #112]	; (8000f54 <HAL_I2C_MspInit+0x90>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d131      	bne.n	8000f4a <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ee6:	4b1c      	ldr	r3, [pc, #112]	; (8000f58 <HAL_I2C_MspInit+0x94>)
 8000ee8:	695a      	ldr	r2, [r3, #20]
 8000eea:	4b1b      	ldr	r3, [pc, #108]	; (8000f58 <HAL_I2C_MspInit+0x94>)
 8000eec:	2180      	movs	r1, #128	; 0x80
 8000eee:	02c9      	lsls	r1, r1, #11
 8000ef0:	430a      	orrs	r2, r1
 8000ef2:	615a      	str	r2, [r3, #20]
 8000ef4:	4b18      	ldr	r3, [pc, #96]	; (8000f58 <HAL_I2C_MspInit+0x94>)
 8000ef6:	695a      	ldr	r2, [r3, #20]
 8000ef8:	2380      	movs	r3, #128	; 0x80
 8000efa:	02db      	lsls	r3, r3, #11
 8000efc:	4013      	ands	r3, r2
 8000efe:	613b      	str	r3, [r7, #16]
 8000f00:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f02:	2114      	movs	r1, #20
 8000f04:	187b      	adds	r3, r7, r1
 8000f06:	22c0      	movs	r2, #192	; 0xc0
 8000f08:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f0a:	187b      	adds	r3, r7, r1
 8000f0c:	2212      	movs	r2, #18
 8000f0e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f10:	187b      	adds	r3, r7, r1
 8000f12:	2201      	movs	r2, #1
 8000f14:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f16:	187b      	adds	r3, r7, r1
 8000f18:	2203      	movs	r2, #3
 8000f1a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8000f1c:	187b      	adds	r3, r7, r1
 8000f1e:	2201      	movs	r2, #1
 8000f20:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f22:	187b      	adds	r3, r7, r1
 8000f24:	4a0d      	ldr	r2, [pc, #52]	; (8000f5c <HAL_I2C_MspInit+0x98>)
 8000f26:	0019      	movs	r1, r3
 8000f28:	0010      	movs	r0, r2
 8000f2a:	f000 fc75 	bl	8001818 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f2e:	4b0a      	ldr	r3, [pc, #40]	; (8000f58 <HAL_I2C_MspInit+0x94>)
 8000f30:	69da      	ldr	r2, [r3, #28]
 8000f32:	4b09      	ldr	r3, [pc, #36]	; (8000f58 <HAL_I2C_MspInit+0x94>)
 8000f34:	2180      	movs	r1, #128	; 0x80
 8000f36:	0389      	lsls	r1, r1, #14
 8000f38:	430a      	orrs	r2, r1
 8000f3a:	61da      	str	r2, [r3, #28]
 8000f3c:	4b06      	ldr	r3, [pc, #24]	; (8000f58 <HAL_I2C_MspInit+0x94>)
 8000f3e:	69da      	ldr	r2, [r3, #28]
 8000f40:	2380      	movs	r3, #128	; 0x80
 8000f42:	039b      	lsls	r3, r3, #14
 8000f44:	4013      	ands	r3, r2
 8000f46:	60fb      	str	r3, [r7, #12]
 8000f48:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000f4a:	46c0      	nop			; (mov r8, r8)
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	b00a      	add	sp, #40	; 0x28
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	46c0      	nop			; (mov r8, r8)
 8000f54:	40005400 	.word	0x40005400
 8000f58:	40021000 	.word	0x40021000
 8000f5c:	48000400 	.word	0x48000400

08000f60 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b08a      	sub	sp, #40	; 0x28
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f68:	2314      	movs	r3, #20
 8000f6a:	18fb      	adds	r3, r7, r3
 8000f6c:	0018      	movs	r0, r3
 8000f6e:	2314      	movs	r3, #20
 8000f70:	001a      	movs	r2, r3
 8000f72:	2100      	movs	r1, #0
 8000f74:	f003 fb97 	bl	80046a6 <memset>
  if(huart->Instance==USART1)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a35      	ldr	r2, [pc, #212]	; (8001054 <HAL_UART_MspInit+0xf4>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d163      	bne.n	800104a <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f82:	4b35      	ldr	r3, [pc, #212]	; (8001058 <HAL_UART_MspInit+0xf8>)
 8000f84:	699a      	ldr	r2, [r3, #24]
 8000f86:	4b34      	ldr	r3, [pc, #208]	; (8001058 <HAL_UART_MspInit+0xf8>)
 8000f88:	2180      	movs	r1, #128	; 0x80
 8000f8a:	01c9      	lsls	r1, r1, #7
 8000f8c:	430a      	orrs	r2, r1
 8000f8e:	619a      	str	r2, [r3, #24]
 8000f90:	4b31      	ldr	r3, [pc, #196]	; (8001058 <HAL_UART_MspInit+0xf8>)
 8000f92:	699a      	ldr	r2, [r3, #24]
 8000f94:	2380      	movs	r3, #128	; 0x80
 8000f96:	01db      	lsls	r3, r3, #7
 8000f98:	4013      	ands	r3, r2
 8000f9a:	613b      	str	r3, [r7, #16]
 8000f9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f9e:	4b2e      	ldr	r3, [pc, #184]	; (8001058 <HAL_UART_MspInit+0xf8>)
 8000fa0:	695a      	ldr	r2, [r3, #20]
 8000fa2:	4b2d      	ldr	r3, [pc, #180]	; (8001058 <HAL_UART_MspInit+0xf8>)
 8000fa4:	2180      	movs	r1, #128	; 0x80
 8000fa6:	0289      	lsls	r1, r1, #10
 8000fa8:	430a      	orrs	r2, r1
 8000faa:	615a      	str	r2, [r3, #20]
 8000fac:	4b2a      	ldr	r3, [pc, #168]	; (8001058 <HAL_UART_MspInit+0xf8>)
 8000fae:	695a      	ldr	r2, [r3, #20]
 8000fb0:	2380      	movs	r3, #128	; 0x80
 8000fb2:	029b      	lsls	r3, r3, #10
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	60fb      	str	r3, [r7, #12]
 8000fb8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000fba:	2114      	movs	r1, #20
 8000fbc:	187b      	adds	r3, r7, r1
 8000fbe:	22c0      	movs	r2, #192	; 0xc0
 8000fc0:	00d2      	lsls	r2, r2, #3
 8000fc2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc4:	187b      	adds	r3, r7, r1
 8000fc6:	2202      	movs	r2, #2
 8000fc8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fca:	187b      	adds	r3, r7, r1
 8000fcc:	2200      	movs	r2, #0
 8000fce:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fd0:	187b      	adds	r3, r7, r1
 8000fd2:	2203      	movs	r2, #3
 8000fd4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000fd6:	187b      	adds	r3, r7, r1
 8000fd8:	2201      	movs	r2, #1
 8000fda:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fdc:	187a      	adds	r2, r7, r1
 8000fde:	2390      	movs	r3, #144	; 0x90
 8000fe0:	05db      	lsls	r3, r3, #23
 8000fe2:	0011      	movs	r1, r2
 8000fe4:	0018      	movs	r0, r3
 8000fe6:	f000 fc17 	bl	8001818 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel3;
 8000fea:	4b1c      	ldr	r3, [pc, #112]	; (800105c <HAL_UART_MspInit+0xfc>)
 8000fec:	4a1c      	ldr	r2, [pc, #112]	; (8001060 <HAL_UART_MspInit+0x100>)
 8000fee:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ff0:	4b1a      	ldr	r3, [pc, #104]	; (800105c <HAL_UART_MspInit+0xfc>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ff6:	4b19      	ldr	r3, [pc, #100]	; (800105c <HAL_UART_MspInit+0xfc>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000ffc:	4b17      	ldr	r3, [pc, #92]	; (800105c <HAL_UART_MspInit+0xfc>)
 8000ffe:	2280      	movs	r2, #128	; 0x80
 8001000:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001002:	4b16      	ldr	r3, [pc, #88]	; (800105c <HAL_UART_MspInit+0xfc>)
 8001004:	2280      	movs	r2, #128	; 0x80
 8001006:	0092      	lsls	r2, r2, #2
 8001008:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800100a:	4b14      	ldr	r3, [pc, #80]	; (800105c <HAL_UART_MspInit+0xfc>)
 800100c:	2280      	movs	r2, #128	; 0x80
 800100e:	0112      	lsls	r2, r2, #4
 8001010:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8001012:	4b12      	ldr	r3, [pc, #72]	; (800105c <HAL_UART_MspInit+0xfc>)
 8001014:	2220      	movs	r2, #32
 8001016:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001018:	4b10      	ldr	r3, [pc, #64]	; (800105c <HAL_UART_MspInit+0xfc>)
 800101a:	2200      	movs	r2, #0
 800101c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800101e:	4b0f      	ldr	r3, [pc, #60]	; (800105c <HAL_UART_MspInit+0xfc>)
 8001020:	0018      	movs	r0, r3
 8001022:	f000 fa1b 	bl	800145c <HAL_DMA_Init>
 8001026:	1e03      	subs	r3, r0, #0
 8001028:	d001      	beq.n	800102e <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 800102a:	f7ff ff21 	bl	8000e70 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	4a0a      	ldr	r2, [pc, #40]	; (800105c <HAL_UART_MspInit+0xfc>)
 8001032:	66da      	str	r2, [r3, #108]	; 0x6c
 8001034:	4b09      	ldr	r3, [pc, #36]	; (800105c <HAL_UART_MspInit+0xfc>)
 8001036:	687a      	ldr	r2, [r7, #4]
 8001038:	625a      	str	r2, [r3, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800103a:	2200      	movs	r2, #0
 800103c:	2100      	movs	r1, #0
 800103e:	201b      	movs	r0, #27
 8001040:	f000 f9da 	bl	80013f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001044:	201b      	movs	r0, #27
 8001046:	f000 f9ec 	bl	8001422 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800104a:	46c0      	nop			; (mov r8, r8)
 800104c:	46bd      	mov	sp, r7
 800104e:	b00a      	add	sp, #40	; 0x28
 8001050:	bd80      	pop	{r7, pc}
 8001052:	46c0      	nop			; (mov r8, r8)
 8001054:	40013800 	.word	0x40013800
 8001058:	40021000 	.word	0x40021000
 800105c:	20000504 	.word	0x20000504
 8001060:	40020030 	.word	0x40020030

08001064 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001068:	46c0      	nop			; (mov r8, r8)
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}

0800106e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800106e:	b580      	push	{r7, lr}
 8001070:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001072:	e7fe      	b.n	8001072 <HardFault_Handler+0x4>

08001074 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001078:	46c0      	nop			; (mov r8, r8)
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}

0800107e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800107e:	b580      	push	{r7, lr}
 8001080:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001082:	46c0      	nop			; (mov r8, r8)
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}

08001088 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800108c:	f000 f8ca 	bl	8001224 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001090:	46c0      	nop			; (mov r8, r8)
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
	...

08001098 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800109c:	4b03      	ldr	r3, [pc, #12]	; (80010ac <DMA1_Channel2_3_IRQHandler+0x14>)
 800109e:	0018      	movs	r0, r3
 80010a0:	f000 fad0 	bl	8001644 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 80010a4:	46c0      	nop			; (mov r8, r8)
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	46c0      	nop			; (mov r8, r8)
 80010ac:	20000504 	.word	0x20000504

080010b0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80010b4:	4b03      	ldr	r3, [pc, #12]	; (80010c4 <USART1_IRQHandler+0x14>)
 80010b6:	0018      	movs	r0, r3
 80010b8:	f002 f99a 	bl	80033f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80010bc:	46c0      	nop			; (mov r8, r8)
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	46c0      	nop			; (mov r8, r8)
 80010c4:	20000548 	.word	0x20000548

080010c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b086      	sub	sp, #24
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010d0:	4a14      	ldr	r2, [pc, #80]	; (8001124 <_sbrk+0x5c>)
 80010d2:	4b15      	ldr	r3, [pc, #84]	; (8001128 <_sbrk+0x60>)
 80010d4:	1ad3      	subs	r3, r2, r3
 80010d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010dc:	4b13      	ldr	r3, [pc, #76]	; (800112c <_sbrk+0x64>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d102      	bne.n	80010ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010e4:	4b11      	ldr	r3, [pc, #68]	; (800112c <_sbrk+0x64>)
 80010e6:	4a12      	ldr	r2, [pc, #72]	; (8001130 <_sbrk+0x68>)
 80010e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010ea:	4b10      	ldr	r3, [pc, #64]	; (800112c <_sbrk+0x64>)
 80010ec:	681a      	ldr	r2, [r3, #0]
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	18d3      	adds	r3, r2, r3
 80010f2:	693a      	ldr	r2, [r7, #16]
 80010f4:	429a      	cmp	r2, r3
 80010f6:	d207      	bcs.n	8001108 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010f8:	f003 fa98 	bl	800462c <__errno>
 80010fc:	0003      	movs	r3, r0
 80010fe:	220c      	movs	r2, #12
 8001100:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001102:	2301      	movs	r3, #1
 8001104:	425b      	negs	r3, r3
 8001106:	e009      	b.n	800111c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001108:	4b08      	ldr	r3, [pc, #32]	; (800112c <_sbrk+0x64>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800110e:	4b07      	ldr	r3, [pc, #28]	; (800112c <_sbrk+0x64>)
 8001110:	681a      	ldr	r2, [r3, #0]
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	18d2      	adds	r2, r2, r3
 8001116:	4b05      	ldr	r3, [pc, #20]	; (800112c <_sbrk+0x64>)
 8001118:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800111a:	68fb      	ldr	r3, [r7, #12]
}
 800111c:	0018      	movs	r0, r3
 800111e:	46bd      	mov	sp, r7
 8001120:	b006      	add	sp, #24
 8001122:	bd80      	pop	{r7, pc}
 8001124:	20004000 	.word	0x20004000
 8001128:	00000400 	.word	0x00000400
 800112c:	200000a4 	.word	0x200000a4
 8001130:	200005d0 	.word	0x200005d0

08001134 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001138:	46c0      	nop			; (mov r8, r8)
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
	...

08001140 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001140:	480d      	ldr	r0, [pc, #52]	; (8001178 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001142:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001144:	480d      	ldr	r0, [pc, #52]	; (800117c <LoopForever+0x6>)
  ldr r1, =_edata
 8001146:	490e      	ldr	r1, [pc, #56]	; (8001180 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001148:	4a0e      	ldr	r2, [pc, #56]	; (8001184 <LoopForever+0xe>)
  movs r3, #0
 800114a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800114c:	e002      	b.n	8001154 <LoopCopyDataInit>

0800114e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800114e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001150:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001152:	3304      	adds	r3, #4

08001154 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001154:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001156:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001158:	d3f9      	bcc.n	800114e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800115a:	4a0b      	ldr	r2, [pc, #44]	; (8001188 <LoopForever+0x12>)
  ldr r4, =_ebss
 800115c:	4c0b      	ldr	r4, [pc, #44]	; (800118c <LoopForever+0x16>)
  movs r3, #0
 800115e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001160:	e001      	b.n	8001166 <LoopFillZerobss>

08001162 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001162:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001164:	3204      	adds	r2, #4

08001166 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001166:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001168:	d3fb      	bcc.n	8001162 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800116a:	f7ff ffe3 	bl	8001134 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800116e:	f003 fa63 	bl	8004638 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001172:	f7ff fcb5 	bl	8000ae0 <main>

08001176 <LoopForever>:

LoopForever:
    b LoopForever
 8001176:	e7fe      	b.n	8001176 <LoopForever>
  ldr   r0, =_estack
 8001178:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 800117c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001180:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8001184:	080077f0 	.word	0x080077f0
  ldr r2, =_sbss
 8001188:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 800118c:	200005d0 	.word	0x200005d0

08001190 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001190:	e7fe      	b.n	8001190 <ADC1_COMP_IRQHandler>
	...

08001194 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001198:	4b07      	ldr	r3, [pc, #28]	; (80011b8 <HAL_Init+0x24>)
 800119a:	681a      	ldr	r2, [r3, #0]
 800119c:	4b06      	ldr	r3, [pc, #24]	; (80011b8 <HAL_Init+0x24>)
 800119e:	2110      	movs	r1, #16
 80011a0:	430a      	orrs	r2, r1
 80011a2:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80011a4:	2000      	movs	r0, #0
 80011a6:	f000 f809 	bl	80011bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011aa:	f7ff fe67 	bl	8000e7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011ae:	2300      	movs	r3, #0
}
 80011b0:	0018      	movs	r0, r3
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	46c0      	nop			; (mov r8, r8)
 80011b8:	40022000 	.word	0x40022000

080011bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011bc:	b590      	push	{r4, r7, lr}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011c4:	4b14      	ldr	r3, [pc, #80]	; (8001218 <HAL_InitTick+0x5c>)
 80011c6:	681c      	ldr	r4, [r3, #0]
 80011c8:	4b14      	ldr	r3, [pc, #80]	; (800121c <HAL_InitTick+0x60>)
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	0019      	movs	r1, r3
 80011ce:	23fa      	movs	r3, #250	; 0xfa
 80011d0:	0098      	lsls	r0, r3, #2
 80011d2:	f7fe ff99 	bl	8000108 <__udivsi3>
 80011d6:	0003      	movs	r3, r0
 80011d8:	0019      	movs	r1, r3
 80011da:	0020      	movs	r0, r4
 80011dc:	f7fe ff94 	bl	8000108 <__udivsi3>
 80011e0:	0003      	movs	r3, r0
 80011e2:	0018      	movs	r0, r3
 80011e4:	f000 f92d 	bl	8001442 <HAL_SYSTICK_Config>
 80011e8:	1e03      	subs	r3, r0, #0
 80011ea:	d001      	beq.n	80011f0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80011ec:	2301      	movs	r3, #1
 80011ee:	e00f      	b.n	8001210 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2b03      	cmp	r3, #3
 80011f4:	d80b      	bhi.n	800120e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011f6:	6879      	ldr	r1, [r7, #4]
 80011f8:	2301      	movs	r3, #1
 80011fa:	425b      	negs	r3, r3
 80011fc:	2200      	movs	r2, #0
 80011fe:	0018      	movs	r0, r3
 8001200:	f000 f8fa 	bl	80013f8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001204:	4b06      	ldr	r3, [pc, #24]	; (8001220 <HAL_InitTick+0x64>)
 8001206:	687a      	ldr	r2, [r7, #4]
 8001208:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800120a:	2300      	movs	r3, #0
 800120c:	e000      	b.n	8001210 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800120e:	2301      	movs	r3, #1
}
 8001210:	0018      	movs	r0, r3
 8001212:	46bd      	mov	sp, r7
 8001214:	b003      	add	sp, #12
 8001216:	bd90      	pop	{r4, r7, pc}
 8001218:	20000000 	.word	0x20000000
 800121c:	20000008 	.word	0x20000008
 8001220:	20000004 	.word	0x20000004

08001224 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001228:	4b05      	ldr	r3, [pc, #20]	; (8001240 <HAL_IncTick+0x1c>)
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	001a      	movs	r2, r3
 800122e:	4b05      	ldr	r3, [pc, #20]	; (8001244 <HAL_IncTick+0x20>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	18d2      	adds	r2, r2, r3
 8001234:	4b03      	ldr	r3, [pc, #12]	; (8001244 <HAL_IncTick+0x20>)
 8001236:	601a      	str	r2, [r3, #0]
}
 8001238:	46c0      	nop			; (mov r8, r8)
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	46c0      	nop			; (mov r8, r8)
 8001240:	20000008 	.word	0x20000008
 8001244:	200005c8 	.word	0x200005c8

08001248 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0
  return uwTick;
 800124c:	4b02      	ldr	r3, [pc, #8]	; (8001258 <HAL_GetTick+0x10>)
 800124e:	681b      	ldr	r3, [r3, #0]
}
 8001250:	0018      	movs	r0, r3
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	46c0      	nop			; (mov r8, r8)
 8001258:	200005c8 	.word	0x200005c8

0800125c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b084      	sub	sp, #16
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001264:	f7ff fff0 	bl	8001248 <HAL_GetTick>
 8001268:	0003      	movs	r3, r0
 800126a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	3301      	adds	r3, #1
 8001274:	d005      	beq.n	8001282 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001276:	4b09      	ldr	r3, [pc, #36]	; (800129c <HAL_Delay+0x40>)
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	001a      	movs	r2, r3
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	189b      	adds	r3, r3, r2
 8001280:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001282:	46c0      	nop			; (mov r8, r8)
 8001284:	f7ff ffe0 	bl	8001248 <HAL_GetTick>
 8001288:	0002      	movs	r2, r0
 800128a:	68bb      	ldr	r3, [r7, #8]
 800128c:	1ad3      	subs	r3, r2, r3
 800128e:	68fa      	ldr	r2, [r7, #12]
 8001290:	429a      	cmp	r2, r3
 8001292:	d8f7      	bhi.n	8001284 <HAL_Delay+0x28>
  {
  }
}
 8001294:	46c0      	nop			; (mov r8, r8)
 8001296:	46bd      	mov	sp, r7
 8001298:	b004      	add	sp, #16
 800129a:	bd80      	pop	{r7, pc}
 800129c:	20000008 	.word	0x20000008

080012a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	0002      	movs	r2, r0
 80012a8:	1dfb      	adds	r3, r7, #7
 80012aa:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80012ac:	1dfb      	adds	r3, r7, #7
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	2b7f      	cmp	r3, #127	; 0x7f
 80012b2:	d809      	bhi.n	80012c8 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012b4:	1dfb      	adds	r3, r7, #7
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	001a      	movs	r2, r3
 80012ba:	231f      	movs	r3, #31
 80012bc:	401a      	ands	r2, r3
 80012be:	4b04      	ldr	r3, [pc, #16]	; (80012d0 <__NVIC_EnableIRQ+0x30>)
 80012c0:	2101      	movs	r1, #1
 80012c2:	4091      	lsls	r1, r2
 80012c4:	000a      	movs	r2, r1
 80012c6:	601a      	str	r2, [r3, #0]
  }
}
 80012c8:	46c0      	nop			; (mov r8, r8)
 80012ca:	46bd      	mov	sp, r7
 80012cc:	b002      	add	sp, #8
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	e000e100 	.word	0xe000e100

080012d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012d4:	b590      	push	{r4, r7, lr}
 80012d6:	b083      	sub	sp, #12
 80012d8:	af00      	add	r7, sp, #0
 80012da:	0002      	movs	r2, r0
 80012dc:	6039      	str	r1, [r7, #0]
 80012de:	1dfb      	adds	r3, r7, #7
 80012e0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80012e2:	1dfb      	adds	r3, r7, #7
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	2b7f      	cmp	r3, #127	; 0x7f
 80012e8:	d828      	bhi.n	800133c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012ea:	4a2f      	ldr	r2, [pc, #188]	; (80013a8 <__NVIC_SetPriority+0xd4>)
 80012ec:	1dfb      	adds	r3, r7, #7
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	b25b      	sxtb	r3, r3
 80012f2:	089b      	lsrs	r3, r3, #2
 80012f4:	33c0      	adds	r3, #192	; 0xc0
 80012f6:	009b      	lsls	r3, r3, #2
 80012f8:	589b      	ldr	r3, [r3, r2]
 80012fa:	1dfa      	adds	r2, r7, #7
 80012fc:	7812      	ldrb	r2, [r2, #0]
 80012fe:	0011      	movs	r1, r2
 8001300:	2203      	movs	r2, #3
 8001302:	400a      	ands	r2, r1
 8001304:	00d2      	lsls	r2, r2, #3
 8001306:	21ff      	movs	r1, #255	; 0xff
 8001308:	4091      	lsls	r1, r2
 800130a:	000a      	movs	r2, r1
 800130c:	43d2      	mvns	r2, r2
 800130e:	401a      	ands	r2, r3
 8001310:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	019b      	lsls	r3, r3, #6
 8001316:	22ff      	movs	r2, #255	; 0xff
 8001318:	401a      	ands	r2, r3
 800131a:	1dfb      	adds	r3, r7, #7
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	0018      	movs	r0, r3
 8001320:	2303      	movs	r3, #3
 8001322:	4003      	ands	r3, r0
 8001324:	00db      	lsls	r3, r3, #3
 8001326:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001328:	481f      	ldr	r0, [pc, #124]	; (80013a8 <__NVIC_SetPriority+0xd4>)
 800132a:	1dfb      	adds	r3, r7, #7
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	b25b      	sxtb	r3, r3
 8001330:	089b      	lsrs	r3, r3, #2
 8001332:	430a      	orrs	r2, r1
 8001334:	33c0      	adds	r3, #192	; 0xc0
 8001336:	009b      	lsls	r3, r3, #2
 8001338:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800133a:	e031      	b.n	80013a0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800133c:	4a1b      	ldr	r2, [pc, #108]	; (80013ac <__NVIC_SetPriority+0xd8>)
 800133e:	1dfb      	adds	r3, r7, #7
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	0019      	movs	r1, r3
 8001344:	230f      	movs	r3, #15
 8001346:	400b      	ands	r3, r1
 8001348:	3b08      	subs	r3, #8
 800134a:	089b      	lsrs	r3, r3, #2
 800134c:	3306      	adds	r3, #6
 800134e:	009b      	lsls	r3, r3, #2
 8001350:	18d3      	adds	r3, r2, r3
 8001352:	3304      	adds	r3, #4
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	1dfa      	adds	r2, r7, #7
 8001358:	7812      	ldrb	r2, [r2, #0]
 800135a:	0011      	movs	r1, r2
 800135c:	2203      	movs	r2, #3
 800135e:	400a      	ands	r2, r1
 8001360:	00d2      	lsls	r2, r2, #3
 8001362:	21ff      	movs	r1, #255	; 0xff
 8001364:	4091      	lsls	r1, r2
 8001366:	000a      	movs	r2, r1
 8001368:	43d2      	mvns	r2, r2
 800136a:	401a      	ands	r2, r3
 800136c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	019b      	lsls	r3, r3, #6
 8001372:	22ff      	movs	r2, #255	; 0xff
 8001374:	401a      	ands	r2, r3
 8001376:	1dfb      	adds	r3, r7, #7
 8001378:	781b      	ldrb	r3, [r3, #0]
 800137a:	0018      	movs	r0, r3
 800137c:	2303      	movs	r3, #3
 800137e:	4003      	ands	r3, r0
 8001380:	00db      	lsls	r3, r3, #3
 8001382:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001384:	4809      	ldr	r0, [pc, #36]	; (80013ac <__NVIC_SetPriority+0xd8>)
 8001386:	1dfb      	adds	r3, r7, #7
 8001388:	781b      	ldrb	r3, [r3, #0]
 800138a:	001c      	movs	r4, r3
 800138c:	230f      	movs	r3, #15
 800138e:	4023      	ands	r3, r4
 8001390:	3b08      	subs	r3, #8
 8001392:	089b      	lsrs	r3, r3, #2
 8001394:	430a      	orrs	r2, r1
 8001396:	3306      	adds	r3, #6
 8001398:	009b      	lsls	r3, r3, #2
 800139a:	18c3      	adds	r3, r0, r3
 800139c:	3304      	adds	r3, #4
 800139e:	601a      	str	r2, [r3, #0]
}
 80013a0:	46c0      	nop			; (mov r8, r8)
 80013a2:	46bd      	mov	sp, r7
 80013a4:	b003      	add	sp, #12
 80013a6:	bd90      	pop	{r4, r7, pc}
 80013a8:	e000e100 	.word	0xe000e100
 80013ac:	e000ed00 	.word	0xe000ed00

080013b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	3b01      	subs	r3, #1
 80013bc:	4a0c      	ldr	r2, [pc, #48]	; (80013f0 <SysTick_Config+0x40>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d901      	bls.n	80013c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013c2:	2301      	movs	r3, #1
 80013c4:	e010      	b.n	80013e8 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013c6:	4b0b      	ldr	r3, [pc, #44]	; (80013f4 <SysTick_Config+0x44>)
 80013c8:	687a      	ldr	r2, [r7, #4]
 80013ca:	3a01      	subs	r2, #1
 80013cc:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013ce:	2301      	movs	r3, #1
 80013d0:	425b      	negs	r3, r3
 80013d2:	2103      	movs	r1, #3
 80013d4:	0018      	movs	r0, r3
 80013d6:	f7ff ff7d 	bl	80012d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013da:	4b06      	ldr	r3, [pc, #24]	; (80013f4 <SysTick_Config+0x44>)
 80013dc:	2200      	movs	r2, #0
 80013de:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013e0:	4b04      	ldr	r3, [pc, #16]	; (80013f4 <SysTick_Config+0x44>)
 80013e2:	2207      	movs	r2, #7
 80013e4:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013e6:	2300      	movs	r3, #0
}
 80013e8:	0018      	movs	r0, r3
 80013ea:	46bd      	mov	sp, r7
 80013ec:	b002      	add	sp, #8
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	00ffffff 	.word	0x00ffffff
 80013f4:	e000e010 	.word	0xe000e010

080013f8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b084      	sub	sp, #16
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	60b9      	str	r1, [r7, #8]
 8001400:	607a      	str	r2, [r7, #4]
 8001402:	210f      	movs	r1, #15
 8001404:	187b      	adds	r3, r7, r1
 8001406:	1c02      	adds	r2, r0, #0
 8001408:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800140a:	68ba      	ldr	r2, [r7, #8]
 800140c:	187b      	adds	r3, r7, r1
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	b25b      	sxtb	r3, r3
 8001412:	0011      	movs	r1, r2
 8001414:	0018      	movs	r0, r3
 8001416:	f7ff ff5d 	bl	80012d4 <__NVIC_SetPriority>
}
 800141a:	46c0      	nop			; (mov r8, r8)
 800141c:	46bd      	mov	sp, r7
 800141e:	b004      	add	sp, #16
 8001420:	bd80      	pop	{r7, pc}

08001422 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001422:	b580      	push	{r7, lr}
 8001424:	b082      	sub	sp, #8
 8001426:	af00      	add	r7, sp, #0
 8001428:	0002      	movs	r2, r0
 800142a:	1dfb      	adds	r3, r7, #7
 800142c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800142e:	1dfb      	adds	r3, r7, #7
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	b25b      	sxtb	r3, r3
 8001434:	0018      	movs	r0, r3
 8001436:	f7ff ff33 	bl	80012a0 <__NVIC_EnableIRQ>
}
 800143a:	46c0      	nop			; (mov r8, r8)
 800143c:	46bd      	mov	sp, r7
 800143e:	b002      	add	sp, #8
 8001440:	bd80      	pop	{r7, pc}

08001442 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001442:	b580      	push	{r7, lr}
 8001444:	b082      	sub	sp, #8
 8001446:	af00      	add	r7, sp, #0
 8001448:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	0018      	movs	r0, r3
 800144e:	f7ff ffaf 	bl	80013b0 <SysTick_Config>
 8001452:	0003      	movs	r3, r0
}
 8001454:	0018      	movs	r0, r3
 8001456:	46bd      	mov	sp, r7
 8001458:	b002      	add	sp, #8
 800145a:	bd80      	pop	{r7, pc}

0800145c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 800145c:	b580      	push	{r7, lr}
 800145e:	b084      	sub	sp, #16
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001464:	2300      	movs	r3, #0
 8001466:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d101      	bne.n	8001472 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800146e:	2301      	movs	r3, #1
 8001470:	e036      	b.n	80014e0 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2221      	movs	r2, #33	; 0x21
 8001476:	2102      	movs	r1, #2
 8001478:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	4a18      	ldr	r2, [pc, #96]	; (80014e8 <HAL_DMA_Init+0x8c>)
 8001486:	4013      	ands	r3, r2
 8001488:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001492:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	68db      	ldr	r3, [r3, #12]
 8001498:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800149e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	695b      	ldr	r3, [r3, #20]
 80014a4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014aa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	69db      	ldr	r3, [r3, #28]
 80014b0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80014b2:	68fa      	ldr	r2, [r7, #12]
 80014b4:	4313      	orrs	r3, r2
 80014b6:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	68fa      	ldr	r2, [r7, #12]
 80014be:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	0018      	movs	r0, r3
 80014c4:	f000 f98c 	bl	80017e0 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2200      	movs	r2, #0
 80014cc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2221      	movs	r2, #33	; 0x21
 80014d2:	2101      	movs	r1, #1
 80014d4:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2220      	movs	r2, #32
 80014da:	2100      	movs	r1, #0
 80014dc:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 80014de:	2300      	movs	r3, #0
}  
 80014e0:	0018      	movs	r0, r3
 80014e2:	46bd      	mov	sp, r7
 80014e4:	b004      	add	sp, #16
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	ffffc00f 	.word	0xffffc00f

080014ec <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b086      	sub	sp, #24
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	60f8      	str	r0, [r7, #12]
 80014f4:	60b9      	str	r1, [r7, #8]
 80014f6:	607a      	str	r2, [r7, #4]
 80014f8:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 80014fa:	2317      	movs	r3, #23
 80014fc:	18fb      	adds	r3, r7, r3
 80014fe:	2200      	movs	r2, #0
 8001500:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	2220      	movs	r2, #32
 8001506:	5c9b      	ldrb	r3, [r3, r2]
 8001508:	2b01      	cmp	r3, #1
 800150a:	d101      	bne.n	8001510 <HAL_DMA_Start_IT+0x24>
 800150c:	2302      	movs	r3, #2
 800150e:	e04f      	b.n	80015b0 <HAL_DMA_Start_IT+0xc4>
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	2220      	movs	r2, #32
 8001514:	2101      	movs	r1, #1
 8001516:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	2221      	movs	r2, #33	; 0x21
 800151c:	5c9b      	ldrb	r3, [r3, r2]
 800151e:	b2db      	uxtb	r3, r3
 8001520:	2b01      	cmp	r3, #1
 8001522:	d13a      	bne.n	800159a <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	2221      	movs	r2, #33	; 0x21
 8001528:	2102      	movs	r1, #2
 800152a:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	2200      	movs	r2, #0
 8001530:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	2101      	movs	r1, #1
 800153e:	438a      	bics	r2, r1
 8001540:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	687a      	ldr	r2, [r7, #4]
 8001546:	68b9      	ldr	r1, [r7, #8]
 8001548:	68f8      	ldr	r0, [r7, #12]
 800154a:	f000 f91d 	bl	8001788 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001552:	2b00      	cmp	r3, #0
 8001554:	d008      	beq.n	8001568 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	681a      	ldr	r2, [r3, #0]
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	210e      	movs	r1, #14
 8001562:	430a      	orrs	r2, r1
 8001564:	601a      	str	r2, [r3, #0]
 8001566:	e00f      	b.n	8001588 <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	210a      	movs	r1, #10
 8001574:	430a      	orrs	r2, r1
 8001576:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	681a      	ldr	r2, [r3, #0]
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	2104      	movs	r1, #4
 8001584:	438a      	bics	r2, r1
 8001586:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	2101      	movs	r1, #1
 8001594:	430a      	orrs	r2, r1
 8001596:	601a      	str	r2, [r3, #0]
 8001598:	e007      	b.n	80015aa <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	2220      	movs	r2, #32
 800159e:	2100      	movs	r1, #0
 80015a0:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 80015a2:	2317      	movs	r3, #23
 80015a4:	18fb      	adds	r3, r7, r3
 80015a6:	2202      	movs	r2, #2
 80015a8:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 80015aa:	2317      	movs	r3, #23
 80015ac:	18fb      	adds	r3, r7, r3
 80015ae:	781b      	ldrb	r3, [r3, #0]
} 
 80015b0:	0018      	movs	r0, r3
 80015b2:	46bd      	mov	sp, r7
 80015b4:	b006      	add	sp, #24
 80015b6:	bd80      	pop	{r7, pc}

080015b8 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b084      	sub	sp, #16
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015c0:	230f      	movs	r3, #15
 80015c2:	18fb      	adds	r3, r7, r3
 80015c4:	2200      	movs	r2, #0
 80015c6:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2221      	movs	r2, #33	; 0x21
 80015cc:	5c9b      	ldrb	r3, [r3, r2]
 80015ce:	b2db      	uxtb	r3, r3
 80015d0:	2b02      	cmp	r3, #2
 80015d2:	d007      	beq.n	80015e4 <HAL_DMA_Abort_IT+0x2c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2204      	movs	r2, #4
 80015d8:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80015da:	230f      	movs	r3, #15
 80015dc:	18fb      	adds	r3, r7, r3
 80015de:	2201      	movs	r2, #1
 80015e0:	701a      	strb	r2, [r3, #0]
 80015e2:	e028      	b.n	8001636 <HAL_DMA_Abort_IT+0x7e>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	681a      	ldr	r2, [r3, #0]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	210e      	movs	r1, #14
 80015f0:	438a      	bics	r2, r1
 80015f2:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	681a      	ldr	r2, [r3, #0]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	2101      	movs	r1, #1
 8001600:	438a      	bics	r2, r1
 8001602:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800160c:	2101      	movs	r1, #1
 800160e:	4091      	lsls	r1, r2
 8001610:	000a      	movs	r2, r1
 8001612:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2221      	movs	r2, #33	; 0x21
 8001618:	2101      	movs	r1, #1
 800161a:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2220      	movs	r2, #32
 8001620:	2100      	movs	r1, #0
 8001622:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001628:	2b00      	cmp	r3, #0
 800162a:	d004      	beq.n	8001636 <HAL_DMA_Abort_IT+0x7e>
    {
      hdma->XferAbortCallback(hdma);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001630:	687a      	ldr	r2, [r7, #4]
 8001632:	0010      	movs	r0, r2
 8001634:	4798      	blx	r3
    } 
  }
  return status;
 8001636:	230f      	movs	r3, #15
 8001638:	18fb      	adds	r3, r7, r3
 800163a:	781b      	ldrb	r3, [r3, #0]
}
 800163c:	0018      	movs	r0, r3
 800163e:	46bd      	mov	sp, r7
 8001640:	b004      	add	sp, #16
 8001642:	bd80      	pop	{r7, pc}

08001644 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b084      	sub	sp, #16
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001660:	2204      	movs	r2, #4
 8001662:	409a      	lsls	r2, r3
 8001664:	0013      	movs	r3, r2
 8001666:	68fa      	ldr	r2, [r7, #12]
 8001668:	4013      	ands	r3, r2
 800166a:	d024      	beq.n	80016b6 <HAL_DMA_IRQHandler+0x72>
 800166c:	68bb      	ldr	r3, [r7, #8]
 800166e:	2204      	movs	r2, #4
 8001670:	4013      	ands	r3, r2
 8001672:	d020      	beq.n	80016b6 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	2220      	movs	r2, #32
 800167c:	4013      	ands	r3, r2
 800167e:	d107      	bne.n	8001690 <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	681a      	ldr	r2, [r3, #0]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	2104      	movs	r1, #4
 800168c:	438a      	bics	r2, r1
 800168e:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001698:	2104      	movs	r1, #4
 800169a:	4091      	lsls	r1, r2
 800169c:	000a      	movs	r2, r1
 800169e:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d100      	bne.n	80016aa <HAL_DMA_IRQHandler+0x66>
 80016a8:	e06a      	b.n	8001780 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016ae:	687a      	ldr	r2, [r7, #4]
 80016b0:	0010      	movs	r0, r2
 80016b2:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 80016b4:	e064      	b.n	8001780 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ba:	2202      	movs	r2, #2
 80016bc:	409a      	lsls	r2, r3
 80016be:	0013      	movs	r3, r2
 80016c0:	68fa      	ldr	r2, [r7, #12]
 80016c2:	4013      	ands	r3, r2
 80016c4:	d02b      	beq.n	800171e <HAL_DMA_IRQHandler+0xda>
 80016c6:	68bb      	ldr	r3, [r7, #8]
 80016c8:	2202      	movs	r2, #2
 80016ca:	4013      	ands	r3, r2
 80016cc:	d027      	beq.n	800171e <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	2220      	movs	r2, #32
 80016d6:	4013      	ands	r3, r2
 80016d8:	d10b      	bne.n	80016f2 <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	681a      	ldr	r2, [r3, #0]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	210a      	movs	r1, #10
 80016e6:	438a      	bics	r2, r1
 80016e8:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2221      	movs	r2, #33	; 0x21
 80016ee:	2101      	movs	r1, #1
 80016f0:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016fa:	2102      	movs	r1, #2
 80016fc:	4091      	lsls	r1, r2
 80016fe:	000a      	movs	r2, r1
 8001700:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2220      	movs	r2, #32
 8001706:	2100      	movs	r1, #0
 8001708:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800170e:	2b00      	cmp	r3, #0
 8001710:	d036      	beq.n	8001780 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001716:	687a      	ldr	r2, [r7, #4]
 8001718:	0010      	movs	r0, r2
 800171a:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 800171c:	e030      	b.n	8001780 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001722:	2208      	movs	r2, #8
 8001724:	409a      	lsls	r2, r3
 8001726:	0013      	movs	r3, r2
 8001728:	68fa      	ldr	r2, [r7, #12]
 800172a:	4013      	ands	r3, r2
 800172c:	d028      	beq.n	8001780 <HAL_DMA_IRQHandler+0x13c>
 800172e:	68bb      	ldr	r3, [r7, #8]
 8001730:	2208      	movs	r2, #8
 8001732:	4013      	ands	r3, r2
 8001734:	d024      	beq.n	8001780 <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	681a      	ldr	r2, [r3, #0]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	210e      	movs	r1, #14
 8001742:	438a      	bics	r2, r1
 8001744:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800174e:	2101      	movs	r1, #1
 8001750:	4091      	lsls	r1, r2
 8001752:	000a      	movs	r2, r1
 8001754:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2201      	movs	r2, #1
 800175a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2221      	movs	r2, #33	; 0x21
 8001760:	2101      	movs	r1, #1
 8001762:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2220      	movs	r2, #32
 8001768:	2100      	movs	r1, #0
 800176a:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001770:	2b00      	cmp	r3, #0
 8001772:	d005      	beq.n	8001780 <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001778:	687a      	ldr	r2, [r7, #4]
 800177a:	0010      	movs	r0, r2
 800177c:	4798      	blx	r3
    }
   }
}  
 800177e:	e7ff      	b.n	8001780 <HAL_DMA_IRQHandler+0x13c>
 8001780:	46c0      	nop			; (mov r8, r8)
 8001782:	46bd      	mov	sp, r7
 8001784:	b004      	add	sp, #16
 8001786:	bd80      	pop	{r7, pc}

08001788 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b084      	sub	sp, #16
 800178c:	af00      	add	r7, sp, #0
 800178e:	60f8      	str	r0, [r7, #12]
 8001790:	60b9      	str	r1, [r7, #8]
 8001792:	607a      	str	r2, [r7, #4]
 8001794:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800179e:	2101      	movs	r1, #1
 80017a0:	4091      	lsls	r1, r2
 80017a2:	000a      	movs	r2, r1
 80017a4:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	683a      	ldr	r2, [r7, #0]
 80017ac:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	2b10      	cmp	r3, #16
 80017b4:	d108      	bne.n	80017c8 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	687a      	ldr	r2, [r7, #4]
 80017bc:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	68ba      	ldr	r2, [r7, #8]
 80017c4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80017c6:	e007      	b.n	80017d8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	68ba      	ldr	r2, [r7, #8]
 80017ce:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	687a      	ldr	r2, [r7, #4]
 80017d6:	60da      	str	r2, [r3, #12]
}
 80017d8:	46c0      	nop			; (mov r8, r8)
 80017da:	46bd      	mov	sp, r7
 80017dc:	b004      	add	sp, #16
 80017de:	bd80      	pop	{r7, pc}

080017e0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a08      	ldr	r2, [pc, #32]	; (8001810 <DMA_CalcBaseAndBitshift+0x30>)
 80017ee:	4694      	mov	ip, r2
 80017f0:	4463      	add	r3, ip
 80017f2:	2114      	movs	r1, #20
 80017f4:	0018      	movs	r0, r3
 80017f6:	f7fe fc87 	bl	8000108 <__udivsi3>
 80017fa:	0003      	movs	r3, r0
 80017fc:	009a      	lsls	r2, r3, #2
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	4a03      	ldr	r2, [pc, #12]	; (8001814 <DMA_CalcBaseAndBitshift+0x34>)
 8001806:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8001808:	46c0      	nop			; (mov r8, r8)
 800180a:	46bd      	mov	sp, r7
 800180c:	b002      	add	sp, #8
 800180e:	bd80      	pop	{r7, pc}
 8001810:	bffdfff8 	.word	0xbffdfff8
 8001814:	40020000 	.word	0x40020000

08001818 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8001818:	b580      	push	{r7, lr}
 800181a:	b086      	sub	sp, #24
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
 8001820:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001822:	2300      	movs	r3, #0
 8001824:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001826:	e155      	b.n	8001ad4 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	2101      	movs	r1, #1
 800182e:	697a      	ldr	r2, [r7, #20]
 8001830:	4091      	lsls	r1, r2
 8001832:	000a      	movs	r2, r1
 8001834:	4013      	ands	r3, r2
 8001836:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d100      	bne.n	8001840 <HAL_GPIO_Init+0x28>
 800183e:	e146      	b.n	8001ace <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	2b01      	cmp	r3, #1
 8001846:	d00b      	beq.n	8001860 <HAL_GPIO_Init+0x48>
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	2b02      	cmp	r3, #2
 800184e:	d007      	beq.n	8001860 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001854:	2b11      	cmp	r3, #17
 8001856:	d003      	beq.n	8001860 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	2b12      	cmp	r3, #18
 800185e:	d130      	bne.n	80018c2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	689b      	ldr	r3, [r3, #8]
 8001864:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	005b      	lsls	r3, r3, #1
 800186a:	2203      	movs	r2, #3
 800186c:	409a      	lsls	r2, r3
 800186e:	0013      	movs	r3, r2
 8001870:	43da      	mvns	r2, r3
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	4013      	ands	r3, r2
 8001876:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	68da      	ldr	r2, [r3, #12]
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	005b      	lsls	r3, r3, #1
 8001880:	409a      	lsls	r2, r3
 8001882:	0013      	movs	r3, r2
 8001884:	693a      	ldr	r2, [r7, #16]
 8001886:	4313      	orrs	r3, r2
 8001888:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	693a      	ldr	r2, [r7, #16]
 800188e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001896:	2201      	movs	r2, #1
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	409a      	lsls	r2, r3
 800189c:	0013      	movs	r3, r2
 800189e:	43da      	mvns	r2, r3
 80018a0:	693b      	ldr	r3, [r7, #16]
 80018a2:	4013      	ands	r3, r2
 80018a4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	091b      	lsrs	r3, r3, #4
 80018ac:	2201      	movs	r2, #1
 80018ae:	401a      	ands	r2, r3
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	409a      	lsls	r2, r3
 80018b4:	0013      	movs	r3, r2
 80018b6:	693a      	ldr	r2, [r7, #16]
 80018b8:	4313      	orrs	r3, r2
 80018ba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	693a      	ldr	r2, [r7, #16]
 80018c0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	68db      	ldr	r3, [r3, #12]
 80018c6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	005b      	lsls	r3, r3, #1
 80018cc:	2203      	movs	r2, #3
 80018ce:	409a      	lsls	r2, r3
 80018d0:	0013      	movs	r3, r2
 80018d2:	43da      	mvns	r2, r3
 80018d4:	693b      	ldr	r3, [r7, #16]
 80018d6:	4013      	ands	r3, r2
 80018d8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	689a      	ldr	r2, [r3, #8]
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	005b      	lsls	r3, r3, #1
 80018e2:	409a      	lsls	r2, r3
 80018e4:	0013      	movs	r3, r2
 80018e6:	693a      	ldr	r2, [r7, #16]
 80018e8:	4313      	orrs	r3, r2
 80018ea:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	693a      	ldr	r2, [r7, #16]
 80018f0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	2b02      	cmp	r3, #2
 80018f8:	d003      	beq.n	8001902 <HAL_GPIO_Init+0xea>
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	2b12      	cmp	r3, #18
 8001900:	d123      	bne.n	800194a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001902:	697b      	ldr	r3, [r7, #20]
 8001904:	08da      	lsrs	r2, r3, #3
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	3208      	adds	r2, #8
 800190a:	0092      	lsls	r2, r2, #2
 800190c:	58d3      	ldr	r3, [r2, r3]
 800190e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	2207      	movs	r2, #7
 8001914:	4013      	ands	r3, r2
 8001916:	009b      	lsls	r3, r3, #2
 8001918:	220f      	movs	r2, #15
 800191a:	409a      	lsls	r2, r3
 800191c:	0013      	movs	r3, r2
 800191e:	43da      	mvns	r2, r3
 8001920:	693b      	ldr	r3, [r7, #16]
 8001922:	4013      	ands	r3, r2
 8001924:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	691a      	ldr	r2, [r3, #16]
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	2107      	movs	r1, #7
 800192e:	400b      	ands	r3, r1
 8001930:	009b      	lsls	r3, r3, #2
 8001932:	409a      	lsls	r2, r3
 8001934:	0013      	movs	r3, r2
 8001936:	693a      	ldr	r2, [r7, #16]
 8001938:	4313      	orrs	r3, r2
 800193a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	08da      	lsrs	r2, r3, #3
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	3208      	adds	r2, #8
 8001944:	0092      	lsls	r2, r2, #2
 8001946:	6939      	ldr	r1, [r7, #16]
 8001948:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	005b      	lsls	r3, r3, #1
 8001954:	2203      	movs	r2, #3
 8001956:	409a      	lsls	r2, r3
 8001958:	0013      	movs	r3, r2
 800195a:	43da      	mvns	r2, r3
 800195c:	693b      	ldr	r3, [r7, #16]
 800195e:	4013      	ands	r3, r2
 8001960:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	2203      	movs	r2, #3
 8001968:	401a      	ands	r2, r3
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	005b      	lsls	r3, r3, #1
 800196e:	409a      	lsls	r2, r3
 8001970:	0013      	movs	r3, r2
 8001972:	693a      	ldr	r2, [r7, #16]
 8001974:	4313      	orrs	r3, r2
 8001976:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	693a      	ldr	r2, [r7, #16]
 800197c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	685a      	ldr	r2, [r3, #4]
 8001982:	2380      	movs	r3, #128	; 0x80
 8001984:	055b      	lsls	r3, r3, #21
 8001986:	4013      	ands	r3, r2
 8001988:	d100      	bne.n	800198c <HAL_GPIO_Init+0x174>
 800198a:	e0a0      	b.n	8001ace <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800198c:	4b57      	ldr	r3, [pc, #348]	; (8001aec <HAL_GPIO_Init+0x2d4>)
 800198e:	699a      	ldr	r2, [r3, #24]
 8001990:	4b56      	ldr	r3, [pc, #344]	; (8001aec <HAL_GPIO_Init+0x2d4>)
 8001992:	2101      	movs	r1, #1
 8001994:	430a      	orrs	r2, r1
 8001996:	619a      	str	r2, [r3, #24]
 8001998:	4b54      	ldr	r3, [pc, #336]	; (8001aec <HAL_GPIO_Init+0x2d4>)
 800199a:	699b      	ldr	r3, [r3, #24]
 800199c:	2201      	movs	r2, #1
 800199e:	4013      	ands	r3, r2
 80019a0:	60bb      	str	r3, [r7, #8]
 80019a2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80019a4:	4a52      	ldr	r2, [pc, #328]	; (8001af0 <HAL_GPIO_Init+0x2d8>)
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	089b      	lsrs	r3, r3, #2
 80019aa:	3302      	adds	r3, #2
 80019ac:	009b      	lsls	r3, r3, #2
 80019ae:	589b      	ldr	r3, [r3, r2]
 80019b0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	2203      	movs	r2, #3
 80019b6:	4013      	ands	r3, r2
 80019b8:	009b      	lsls	r3, r3, #2
 80019ba:	220f      	movs	r2, #15
 80019bc:	409a      	lsls	r2, r3
 80019be:	0013      	movs	r3, r2
 80019c0:	43da      	mvns	r2, r3
 80019c2:	693b      	ldr	r3, [r7, #16]
 80019c4:	4013      	ands	r3, r2
 80019c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80019c8:	687a      	ldr	r2, [r7, #4]
 80019ca:	2390      	movs	r3, #144	; 0x90
 80019cc:	05db      	lsls	r3, r3, #23
 80019ce:	429a      	cmp	r2, r3
 80019d0:	d019      	beq.n	8001a06 <HAL_GPIO_Init+0x1ee>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	4a47      	ldr	r2, [pc, #284]	; (8001af4 <HAL_GPIO_Init+0x2dc>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d013      	beq.n	8001a02 <HAL_GPIO_Init+0x1ea>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	4a46      	ldr	r2, [pc, #280]	; (8001af8 <HAL_GPIO_Init+0x2e0>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d00d      	beq.n	80019fe <HAL_GPIO_Init+0x1e6>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	4a45      	ldr	r2, [pc, #276]	; (8001afc <HAL_GPIO_Init+0x2e4>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d007      	beq.n	80019fa <HAL_GPIO_Init+0x1e2>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	4a44      	ldr	r2, [pc, #272]	; (8001b00 <HAL_GPIO_Init+0x2e8>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d101      	bne.n	80019f6 <HAL_GPIO_Init+0x1de>
 80019f2:	2304      	movs	r3, #4
 80019f4:	e008      	b.n	8001a08 <HAL_GPIO_Init+0x1f0>
 80019f6:	2305      	movs	r3, #5
 80019f8:	e006      	b.n	8001a08 <HAL_GPIO_Init+0x1f0>
 80019fa:	2303      	movs	r3, #3
 80019fc:	e004      	b.n	8001a08 <HAL_GPIO_Init+0x1f0>
 80019fe:	2302      	movs	r3, #2
 8001a00:	e002      	b.n	8001a08 <HAL_GPIO_Init+0x1f0>
 8001a02:	2301      	movs	r3, #1
 8001a04:	e000      	b.n	8001a08 <HAL_GPIO_Init+0x1f0>
 8001a06:	2300      	movs	r3, #0
 8001a08:	697a      	ldr	r2, [r7, #20]
 8001a0a:	2103      	movs	r1, #3
 8001a0c:	400a      	ands	r2, r1
 8001a0e:	0092      	lsls	r2, r2, #2
 8001a10:	4093      	lsls	r3, r2
 8001a12:	693a      	ldr	r2, [r7, #16]
 8001a14:	4313      	orrs	r3, r2
 8001a16:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001a18:	4935      	ldr	r1, [pc, #212]	; (8001af0 <HAL_GPIO_Init+0x2d8>)
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	089b      	lsrs	r3, r3, #2
 8001a1e:	3302      	adds	r3, #2
 8001a20:	009b      	lsls	r3, r3, #2
 8001a22:	693a      	ldr	r2, [r7, #16]
 8001a24:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a26:	4b37      	ldr	r3, [pc, #220]	; (8001b04 <HAL_GPIO_Init+0x2ec>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	43da      	mvns	r2, r3
 8001a30:	693b      	ldr	r3, [r7, #16]
 8001a32:	4013      	ands	r3, r2
 8001a34:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	685a      	ldr	r2, [r3, #4]
 8001a3a:	2380      	movs	r3, #128	; 0x80
 8001a3c:	025b      	lsls	r3, r3, #9
 8001a3e:	4013      	ands	r3, r2
 8001a40:	d003      	beq.n	8001a4a <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8001a42:	693a      	ldr	r2, [r7, #16]
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	4313      	orrs	r3, r2
 8001a48:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001a4a:	4b2e      	ldr	r3, [pc, #184]	; (8001b04 <HAL_GPIO_Init+0x2ec>)
 8001a4c:	693a      	ldr	r2, [r7, #16]
 8001a4e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001a50:	4b2c      	ldr	r3, [pc, #176]	; (8001b04 <HAL_GPIO_Init+0x2ec>)
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	43da      	mvns	r2, r3
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	685a      	ldr	r2, [r3, #4]
 8001a64:	2380      	movs	r3, #128	; 0x80
 8001a66:	029b      	lsls	r3, r3, #10
 8001a68:	4013      	ands	r3, r2
 8001a6a:	d003      	beq.n	8001a74 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8001a6c:	693a      	ldr	r2, [r7, #16]
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	4313      	orrs	r3, r2
 8001a72:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001a74:	4b23      	ldr	r3, [pc, #140]	; (8001b04 <HAL_GPIO_Init+0x2ec>)
 8001a76:	693a      	ldr	r2, [r7, #16]
 8001a78:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a7a:	4b22      	ldr	r3, [pc, #136]	; (8001b04 <HAL_GPIO_Init+0x2ec>)
 8001a7c:	689b      	ldr	r3, [r3, #8]
 8001a7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	43da      	mvns	r2, r3
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	4013      	ands	r3, r2
 8001a88:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	685a      	ldr	r2, [r3, #4]
 8001a8e:	2380      	movs	r3, #128	; 0x80
 8001a90:	035b      	lsls	r3, r3, #13
 8001a92:	4013      	ands	r3, r2
 8001a94:	d003      	beq.n	8001a9e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001a96:	693a      	ldr	r2, [r7, #16]
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001a9e:	4b19      	ldr	r3, [pc, #100]	; (8001b04 <HAL_GPIO_Init+0x2ec>)
 8001aa0:	693a      	ldr	r2, [r7, #16]
 8001aa2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001aa4:	4b17      	ldr	r3, [pc, #92]	; (8001b04 <HAL_GPIO_Init+0x2ec>)
 8001aa6:	68db      	ldr	r3, [r3, #12]
 8001aa8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	43da      	mvns	r2, r3
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	685a      	ldr	r2, [r3, #4]
 8001ab8:	2380      	movs	r3, #128	; 0x80
 8001aba:	039b      	lsls	r3, r3, #14
 8001abc:	4013      	ands	r3, r2
 8001abe:	d003      	beq.n	8001ac8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001ac0:	693a      	ldr	r2, [r7, #16]
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001ac8:	4b0e      	ldr	r3, [pc, #56]	; (8001b04 <HAL_GPIO_Init+0x2ec>)
 8001aca:	693a      	ldr	r2, [r7, #16]
 8001acc:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	3301      	adds	r3, #1
 8001ad2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	40da      	lsrs	r2, r3
 8001adc:	1e13      	subs	r3, r2, #0
 8001ade:	d000      	beq.n	8001ae2 <HAL_GPIO_Init+0x2ca>
 8001ae0:	e6a2      	b.n	8001828 <HAL_GPIO_Init+0x10>
  } 
}
 8001ae2:	46c0      	nop			; (mov r8, r8)
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	b006      	add	sp, #24
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	46c0      	nop			; (mov r8, r8)
 8001aec:	40021000 	.word	0x40021000
 8001af0:	40010000 	.word	0x40010000
 8001af4:	48000400 	.word	0x48000400
 8001af8:	48000800 	.word	0x48000800
 8001afc:	48000c00 	.word	0x48000c00
 8001b00:	48001000 	.word	0x48001000
 8001b04:	40010400 	.word	0x40010400

08001b08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
 8001b10:	0008      	movs	r0, r1
 8001b12:	0011      	movs	r1, r2
 8001b14:	1cbb      	adds	r3, r7, #2
 8001b16:	1c02      	adds	r2, r0, #0
 8001b18:	801a      	strh	r2, [r3, #0]
 8001b1a:	1c7b      	adds	r3, r7, #1
 8001b1c:	1c0a      	adds	r2, r1, #0
 8001b1e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b20:	1c7b      	adds	r3, r7, #1
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d004      	beq.n	8001b32 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b28:	1cbb      	adds	r3, r7, #2
 8001b2a:	881a      	ldrh	r2, [r3, #0]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001b30:	e003      	b.n	8001b3a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b32:	1cbb      	adds	r3, r7, #2
 8001b34:	881a      	ldrh	r2, [r3, #0]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001b3a:	46c0      	nop			; (mov r8, r8)
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	b002      	add	sp, #8
 8001b40:	bd80      	pop	{r7, pc}

08001b42 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b42:	b580      	push	{r7, lr}
 8001b44:	b084      	sub	sp, #16
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	6078      	str	r0, [r7, #4]
 8001b4a:	000a      	movs	r2, r1
 8001b4c:	1cbb      	adds	r3, r7, #2
 8001b4e:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	695b      	ldr	r3, [r3, #20]
 8001b54:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001b56:	1cbb      	adds	r3, r7, #2
 8001b58:	881b      	ldrh	r3, [r3, #0]
 8001b5a:	68fa      	ldr	r2, [r7, #12]
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	041a      	lsls	r2, r3, #16
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	43db      	mvns	r3, r3
 8001b64:	1cb9      	adds	r1, r7, #2
 8001b66:	8809      	ldrh	r1, [r1, #0]
 8001b68:	400b      	ands	r3, r1
 8001b6a:	431a      	orrs	r2, r3
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	619a      	str	r2, [r3, #24]
}
 8001b70:	46c0      	nop			; (mov r8, r8)
 8001b72:	46bd      	mov	sp, r7
 8001b74:	b004      	add	sp, #16
 8001b76:	bd80      	pop	{r7, pc}

08001b78 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d101      	bne.n	8001b8a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	e082      	b.n	8001c90 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2241      	movs	r2, #65	; 0x41
 8001b8e:	5c9b      	ldrb	r3, [r3, r2]
 8001b90:	b2db      	uxtb	r3, r3
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d107      	bne.n	8001ba6 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2240      	movs	r2, #64	; 0x40
 8001b9a:	2100      	movs	r1, #0
 8001b9c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	0018      	movs	r0, r3
 8001ba2:	f7ff f98f 	bl	8000ec4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2241      	movs	r2, #65	; 0x41
 8001baa:	2124      	movs	r1, #36	; 0x24
 8001bac:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	681a      	ldr	r2, [r3, #0]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	2101      	movs	r1, #1
 8001bba:	438a      	bics	r2, r1
 8001bbc:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	685a      	ldr	r2, [r3, #4]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4934      	ldr	r1, [pc, #208]	; (8001c98 <HAL_I2C_Init+0x120>)
 8001bc8:	400a      	ands	r2, r1
 8001bca:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	689a      	ldr	r2, [r3, #8]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4931      	ldr	r1, [pc, #196]	; (8001c9c <HAL_I2C_Init+0x124>)
 8001bd8:	400a      	ands	r2, r1
 8001bda:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	68db      	ldr	r3, [r3, #12]
 8001be0:	2b01      	cmp	r3, #1
 8001be2:	d108      	bne.n	8001bf6 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	689a      	ldr	r2, [r3, #8]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	2180      	movs	r1, #128	; 0x80
 8001bee:	0209      	lsls	r1, r1, #8
 8001bf0:	430a      	orrs	r2, r1
 8001bf2:	609a      	str	r2, [r3, #8]
 8001bf4:	e007      	b.n	8001c06 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	689a      	ldr	r2, [r3, #8]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	2184      	movs	r1, #132	; 0x84
 8001c00:	0209      	lsls	r1, r1, #8
 8001c02:	430a      	orrs	r2, r1
 8001c04:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	68db      	ldr	r3, [r3, #12]
 8001c0a:	2b02      	cmp	r3, #2
 8001c0c:	d104      	bne.n	8001c18 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	2280      	movs	r2, #128	; 0x80
 8001c14:	0112      	lsls	r2, r2, #4
 8001c16:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	685a      	ldr	r2, [r3, #4]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	491f      	ldr	r1, [pc, #124]	; (8001ca0 <HAL_I2C_Init+0x128>)
 8001c24:	430a      	orrs	r2, r1
 8001c26:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	68da      	ldr	r2, [r3, #12]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	491a      	ldr	r1, [pc, #104]	; (8001c9c <HAL_I2C_Init+0x124>)
 8001c34:	400a      	ands	r2, r1
 8001c36:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	691a      	ldr	r2, [r3, #16]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	695b      	ldr	r3, [r3, #20]
 8001c40:	431a      	orrs	r2, r3
 8001c42:	0011      	movs	r1, r2
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	699b      	ldr	r3, [r3, #24]
 8001c48:	021a      	lsls	r2, r3, #8
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	430a      	orrs	r2, r1
 8001c50:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	69d9      	ldr	r1, [r3, #28]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6a1a      	ldr	r2, [r3, #32]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	430a      	orrs	r2, r1
 8001c60:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	681a      	ldr	r2, [r3, #0]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	2101      	movs	r1, #1
 8001c6e:	430a      	orrs	r2, r1
 8001c70:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2200      	movs	r2, #0
 8001c76:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2241      	movs	r2, #65	; 0x41
 8001c7c:	2120      	movs	r1, #32
 8001c7e:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2200      	movs	r2, #0
 8001c84:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2242      	movs	r2, #66	; 0x42
 8001c8a:	2100      	movs	r1, #0
 8001c8c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001c8e:	2300      	movs	r3, #0
}
 8001c90:	0018      	movs	r0, r3
 8001c92:	46bd      	mov	sp, r7
 8001c94:	b002      	add	sp, #8
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	f0ffffff 	.word	0xf0ffffff
 8001c9c:	ffff7fff 	.word	0xffff7fff
 8001ca0:	02008000 	.word	0x02008000

08001ca4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ca4:	b590      	push	{r4, r7, lr}
 8001ca6:	b089      	sub	sp, #36	; 0x24
 8001ca8:	af02      	add	r7, sp, #8
 8001caa:	60f8      	str	r0, [r7, #12]
 8001cac:	000c      	movs	r4, r1
 8001cae:	0010      	movs	r0, r2
 8001cb0:	0019      	movs	r1, r3
 8001cb2:	230a      	movs	r3, #10
 8001cb4:	18fb      	adds	r3, r7, r3
 8001cb6:	1c22      	adds	r2, r4, #0
 8001cb8:	801a      	strh	r2, [r3, #0]
 8001cba:	2308      	movs	r3, #8
 8001cbc:	18fb      	adds	r3, r7, r3
 8001cbe:	1c02      	adds	r2, r0, #0
 8001cc0:	801a      	strh	r2, [r3, #0]
 8001cc2:	1dbb      	adds	r3, r7, #6
 8001cc4:	1c0a      	adds	r2, r1, #0
 8001cc6:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	2241      	movs	r2, #65	; 0x41
 8001ccc:	5c9b      	ldrb	r3, [r3, r2]
 8001cce:	b2db      	uxtb	r3, r3
 8001cd0:	2b20      	cmp	r3, #32
 8001cd2:	d000      	beq.n	8001cd6 <HAL_I2C_Mem_Write+0x32>
 8001cd4:	e10c      	b.n	8001ef0 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001cd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d004      	beq.n	8001ce6 <HAL_I2C_Mem_Write+0x42>
 8001cdc:	232c      	movs	r3, #44	; 0x2c
 8001cde:	18fb      	adds	r3, r7, r3
 8001ce0:	881b      	ldrh	r3, [r3, #0]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d105      	bne.n	8001cf2 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	2280      	movs	r2, #128	; 0x80
 8001cea:	0092      	lsls	r2, r2, #2
 8001cec:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e0ff      	b.n	8001ef2 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	2240      	movs	r2, #64	; 0x40
 8001cf6:	5c9b      	ldrb	r3, [r3, r2]
 8001cf8:	2b01      	cmp	r3, #1
 8001cfa:	d101      	bne.n	8001d00 <HAL_I2C_Mem_Write+0x5c>
 8001cfc:	2302      	movs	r3, #2
 8001cfe:	e0f8      	b.n	8001ef2 <HAL_I2C_Mem_Write+0x24e>
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	2240      	movs	r2, #64	; 0x40
 8001d04:	2101      	movs	r1, #1
 8001d06:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001d08:	f7ff fa9e 	bl	8001248 <HAL_GetTick>
 8001d0c:	0003      	movs	r3, r0
 8001d0e:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001d10:	2380      	movs	r3, #128	; 0x80
 8001d12:	0219      	lsls	r1, r3, #8
 8001d14:	68f8      	ldr	r0, [r7, #12]
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	9300      	str	r3, [sp, #0]
 8001d1a:	2319      	movs	r3, #25
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	f000 fa8f 	bl	8002240 <I2C_WaitOnFlagUntilTimeout>
 8001d22:	1e03      	subs	r3, r0, #0
 8001d24:	d001      	beq.n	8001d2a <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	e0e3      	b.n	8001ef2 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	2241      	movs	r2, #65	; 0x41
 8001d2e:	2121      	movs	r1, #33	; 0x21
 8001d30:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	2242      	movs	r2, #66	; 0x42
 8001d36:	2140      	movs	r1, #64	; 0x40
 8001d38:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001d44:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	222c      	movs	r2, #44	; 0x2c
 8001d4a:	18ba      	adds	r2, r7, r2
 8001d4c:	8812      	ldrh	r2, [r2, #0]
 8001d4e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	2200      	movs	r2, #0
 8001d54:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001d56:	1dbb      	adds	r3, r7, #6
 8001d58:	881c      	ldrh	r4, [r3, #0]
 8001d5a:	2308      	movs	r3, #8
 8001d5c:	18fb      	adds	r3, r7, r3
 8001d5e:	881a      	ldrh	r2, [r3, #0]
 8001d60:	230a      	movs	r3, #10
 8001d62:	18fb      	adds	r3, r7, r3
 8001d64:	8819      	ldrh	r1, [r3, #0]
 8001d66:	68f8      	ldr	r0, [r7, #12]
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	9301      	str	r3, [sp, #4]
 8001d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d6e:	9300      	str	r3, [sp, #0]
 8001d70:	0023      	movs	r3, r4
 8001d72:	f000 f9df 	bl	8002134 <I2C_RequestMemoryWrite>
 8001d76:	1e03      	subs	r3, r0, #0
 8001d78:	d005      	beq.n	8001d86 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	2240      	movs	r2, #64	; 0x40
 8001d7e:	2100      	movs	r1, #0
 8001d80:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	e0b5      	b.n	8001ef2 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d8a:	b29b      	uxth	r3, r3
 8001d8c:	2bff      	cmp	r3, #255	; 0xff
 8001d8e:	d911      	bls.n	8001db4 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	22ff      	movs	r2, #255	; 0xff
 8001d94:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d9a:	b2da      	uxtb	r2, r3
 8001d9c:	2380      	movs	r3, #128	; 0x80
 8001d9e:	045c      	lsls	r4, r3, #17
 8001da0:	230a      	movs	r3, #10
 8001da2:	18fb      	adds	r3, r7, r3
 8001da4:	8819      	ldrh	r1, [r3, #0]
 8001da6:	68f8      	ldr	r0, [r7, #12]
 8001da8:	2300      	movs	r3, #0
 8001daa:	9300      	str	r3, [sp, #0]
 8001dac:	0023      	movs	r3, r4
 8001dae:	f000 fb67 	bl	8002480 <I2C_TransferConfig>
 8001db2:	e012      	b.n	8001dda <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001db8:	b29a      	uxth	r2, r3
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dc2:	b2da      	uxtb	r2, r3
 8001dc4:	2380      	movs	r3, #128	; 0x80
 8001dc6:	049c      	lsls	r4, r3, #18
 8001dc8:	230a      	movs	r3, #10
 8001dca:	18fb      	adds	r3, r7, r3
 8001dcc:	8819      	ldrh	r1, [r3, #0]
 8001dce:	68f8      	ldr	r0, [r7, #12]
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	9300      	str	r3, [sp, #0]
 8001dd4:	0023      	movs	r3, r4
 8001dd6:	f000 fb53 	bl	8002480 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001dda:	697a      	ldr	r2, [r7, #20]
 8001ddc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	0018      	movs	r0, r3
 8001de2:	f000 fa6c 	bl	80022be <I2C_WaitOnTXISFlagUntilTimeout>
 8001de6:	1e03      	subs	r3, r0, #0
 8001de8:	d001      	beq.n	8001dee <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	e081      	b.n	8001ef2 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df2:	781a      	ldrb	r2, [r3, #0]
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dfe:	1c5a      	adds	r2, r3, #1
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e08:	b29b      	uxth	r3, r3
 8001e0a:	3b01      	subs	r3, #1
 8001e0c:	b29a      	uxth	r2, r3
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e16:	3b01      	subs	r3, #1
 8001e18:	b29a      	uxth	r2, r3
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e22:	b29b      	uxth	r3, r3
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d03a      	beq.n	8001e9e <HAL_I2C_Mem_Write+0x1fa>
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d136      	bne.n	8001e9e <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001e30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001e32:	68f8      	ldr	r0, [r7, #12]
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	9300      	str	r3, [sp, #0]
 8001e38:	0013      	movs	r3, r2
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	2180      	movs	r1, #128	; 0x80
 8001e3e:	f000 f9ff 	bl	8002240 <I2C_WaitOnFlagUntilTimeout>
 8001e42:	1e03      	subs	r3, r0, #0
 8001e44:	d001      	beq.n	8001e4a <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	e053      	b.n	8001ef2 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e4e:	b29b      	uxth	r3, r3
 8001e50:	2bff      	cmp	r3, #255	; 0xff
 8001e52:	d911      	bls.n	8001e78 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	22ff      	movs	r2, #255	; 0xff
 8001e58:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e5e:	b2da      	uxtb	r2, r3
 8001e60:	2380      	movs	r3, #128	; 0x80
 8001e62:	045c      	lsls	r4, r3, #17
 8001e64:	230a      	movs	r3, #10
 8001e66:	18fb      	adds	r3, r7, r3
 8001e68:	8819      	ldrh	r1, [r3, #0]
 8001e6a:	68f8      	ldr	r0, [r7, #12]
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	9300      	str	r3, [sp, #0]
 8001e70:	0023      	movs	r3, r4
 8001e72:	f000 fb05 	bl	8002480 <I2C_TransferConfig>
 8001e76:	e012      	b.n	8001e9e <HAL_I2C_Mem_Write+0x1fa>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e7c:	b29a      	uxth	r2, r3
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e86:	b2da      	uxtb	r2, r3
 8001e88:	2380      	movs	r3, #128	; 0x80
 8001e8a:	049c      	lsls	r4, r3, #18
 8001e8c:	230a      	movs	r3, #10
 8001e8e:	18fb      	adds	r3, r7, r3
 8001e90:	8819      	ldrh	r1, [r3, #0]
 8001e92:	68f8      	ldr	r0, [r7, #12]
 8001e94:	2300      	movs	r3, #0
 8001e96:	9300      	str	r3, [sp, #0]
 8001e98:	0023      	movs	r3, r4
 8001e9a:	f000 faf1 	bl	8002480 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ea2:	b29b      	uxth	r3, r3
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d198      	bne.n	8001dda <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ea8:	697a      	ldr	r2, [r7, #20]
 8001eaa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	0018      	movs	r0, r3
 8001eb0:	f000 fa44 	bl	800233c <I2C_WaitOnSTOPFlagUntilTimeout>
 8001eb4:	1e03      	subs	r3, r0, #0
 8001eb6:	d001      	beq.n	8001ebc <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e01a      	b.n	8001ef2 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	2220      	movs	r2, #32
 8001ec2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	685a      	ldr	r2, [r3, #4]
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	490b      	ldr	r1, [pc, #44]	; (8001efc <HAL_I2C_Mem_Write+0x258>)
 8001ed0:	400a      	ands	r2, r1
 8001ed2:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	2241      	movs	r2, #65	; 0x41
 8001ed8:	2120      	movs	r1, #32
 8001eda:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	2242      	movs	r2, #66	; 0x42
 8001ee0:	2100      	movs	r1, #0
 8001ee2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	2240      	movs	r2, #64	; 0x40
 8001ee8:	2100      	movs	r1, #0
 8001eea:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001eec:	2300      	movs	r3, #0
 8001eee:	e000      	b.n	8001ef2 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8001ef0:	2302      	movs	r3, #2
  }
}
 8001ef2:	0018      	movs	r0, r3
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	b007      	add	sp, #28
 8001ef8:	bd90      	pop	{r4, r7, pc}
 8001efa:	46c0      	nop			; (mov r8, r8)
 8001efc:	fe00e800 	.word	0xfe00e800

08001f00 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b08a      	sub	sp, #40	; 0x28
 8001f04:	af02      	add	r7, sp, #8
 8001f06:	60f8      	str	r0, [r7, #12]
 8001f08:	607a      	str	r2, [r7, #4]
 8001f0a:	603b      	str	r3, [r7, #0]
 8001f0c:	230a      	movs	r3, #10
 8001f0e:	18fb      	adds	r3, r7, r3
 8001f10:	1c0a      	adds	r2, r1, #0
 8001f12:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8001f14:	2300      	movs	r3, #0
 8001f16:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	2241      	movs	r2, #65	; 0x41
 8001f1c:	5c9b      	ldrb	r3, [r3, r2]
 8001f1e:	b2db      	uxtb	r3, r3
 8001f20:	2b20      	cmp	r3, #32
 8001f22:	d000      	beq.n	8001f26 <HAL_I2C_IsDeviceReady+0x26>
 8001f24:	e0fe      	b.n	8002124 <HAL_I2C_IsDeviceReady+0x224>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	699a      	ldr	r2, [r3, #24]
 8001f2c:	2380      	movs	r3, #128	; 0x80
 8001f2e:	021b      	lsls	r3, r3, #8
 8001f30:	401a      	ands	r2, r3
 8001f32:	2380      	movs	r3, #128	; 0x80
 8001f34:	021b      	lsls	r3, r3, #8
 8001f36:	429a      	cmp	r2, r3
 8001f38:	d101      	bne.n	8001f3e <HAL_I2C_IsDeviceReady+0x3e>
    {
      return HAL_BUSY;
 8001f3a:	2302      	movs	r3, #2
 8001f3c:	e0f3      	b.n	8002126 <HAL_I2C_IsDeviceReady+0x226>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	2240      	movs	r2, #64	; 0x40
 8001f42:	5c9b      	ldrb	r3, [r3, r2]
 8001f44:	2b01      	cmp	r3, #1
 8001f46:	d101      	bne.n	8001f4c <HAL_I2C_IsDeviceReady+0x4c>
 8001f48:	2302      	movs	r3, #2
 8001f4a:	e0ec      	b.n	8002126 <HAL_I2C_IsDeviceReady+0x226>
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	2240      	movs	r2, #64	; 0x40
 8001f50:	2101      	movs	r1, #1
 8001f52:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	2241      	movs	r2, #65	; 0x41
 8001f58:	2124      	movs	r1, #36	; 0x24
 8001f5a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	68db      	ldr	r3, [r3, #12]
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d107      	bne.n	8001f7a <HAL_I2C_IsDeviceReady+0x7a>
 8001f6a:	230a      	movs	r3, #10
 8001f6c:	18fb      	adds	r3, r7, r3
 8001f6e:	881b      	ldrh	r3, [r3, #0]
 8001f70:	059b      	lsls	r3, r3, #22
 8001f72:	0d9b      	lsrs	r3, r3, #22
 8001f74:	4a6e      	ldr	r2, [pc, #440]	; (8002130 <HAL_I2C_IsDeviceReady+0x230>)
 8001f76:	431a      	orrs	r2, r3
 8001f78:	e007      	b.n	8001f8a <HAL_I2C_IsDeviceReady+0x8a>
 8001f7a:	230a      	movs	r3, #10
 8001f7c:	18fb      	adds	r3, r7, r3
 8001f7e:	881b      	ldrh	r3, [r3, #0]
 8001f80:	059b      	lsls	r3, r3, #22
 8001f82:	0d9b      	lsrs	r3, r3, #22
 8001f84:	22a0      	movs	r2, #160	; 0xa0
 8001f86:	0192      	lsls	r2, r2, #6
 8001f88:	431a      	orrs	r2, r3
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	605a      	str	r2, [r3, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8001f90:	f7ff f95a 	bl	8001248 <HAL_GetTick>
 8001f94:	0003      	movs	r3, r0
 8001f96:	61bb      	str	r3, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	699b      	ldr	r3, [r3, #24]
 8001f9e:	2220      	movs	r2, #32
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	3b20      	subs	r3, #32
 8001fa4:	425a      	negs	r2, r3
 8001fa6:	4153      	adcs	r3, r2
 8001fa8:	b2da      	uxtb	r2, r3
 8001faa:	231f      	movs	r3, #31
 8001fac:	18fb      	adds	r3, r7, r3
 8001fae:	701a      	strb	r2, [r3, #0]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	699b      	ldr	r3, [r3, #24]
 8001fb6:	2210      	movs	r2, #16
 8001fb8:	4013      	ands	r3, r2
 8001fba:	3b10      	subs	r3, #16
 8001fbc:	425a      	negs	r2, r3
 8001fbe:	4153      	adcs	r3, r2
 8001fc0:	b2da      	uxtb	r2, r3
 8001fc2:	231e      	movs	r3, #30
 8001fc4:	18fb      	adds	r3, r7, r3
 8001fc6:	701a      	strb	r2, [r3, #0]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001fc8:	e035      	b.n	8002036 <HAL_I2C_IsDeviceReady+0x136>
      {
        if (Timeout != HAL_MAX_DELAY)
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	3301      	adds	r3, #1
 8001fce:	d01a      	beq.n	8002006 <HAL_I2C_IsDeviceReady+0x106>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001fd0:	f7ff f93a 	bl	8001248 <HAL_GetTick>
 8001fd4:	0002      	movs	r2, r0
 8001fd6:	69bb      	ldr	r3, [r7, #24]
 8001fd8:	1ad3      	subs	r3, r2, r3
 8001fda:	683a      	ldr	r2, [r7, #0]
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	d302      	bcc.n	8001fe6 <HAL_I2C_IsDeviceReady+0xe6>
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d10f      	bne.n	8002006 <HAL_I2C_IsDeviceReady+0x106>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	2241      	movs	r2, #65	; 0x41
 8001fea:	2120      	movs	r1, #32
 8001fec:	5499      	strb	r1, [r3, r2]

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ff2:	2220      	movs	r2, #32
 8001ff4:	431a      	orrs	r2, r3
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	2240      	movs	r2, #64	; 0x40
 8001ffe:	2100      	movs	r1, #0
 8002000:	5499      	strb	r1, [r3, r2]

            return HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	e08f      	b.n	8002126 <HAL_I2C_IsDeviceReady+0x226>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	699b      	ldr	r3, [r3, #24]
 800200c:	2220      	movs	r2, #32
 800200e:	4013      	ands	r3, r2
 8002010:	3b20      	subs	r3, #32
 8002012:	425a      	negs	r2, r3
 8002014:	4153      	adcs	r3, r2
 8002016:	b2da      	uxtb	r2, r3
 8002018:	231f      	movs	r3, #31
 800201a:	18fb      	adds	r3, r7, r3
 800201c:	701a      	strb	r2, [r3, #0]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	699b      	ldr	r3, [r3, #24]
 8002024:	2210      	movs	r2, #16
 8002026:	4013      	ands	r3, r2
 8002028:	3b10      	subs	r3, #16
 800202a:	425a      	negs	r2, r3
 800202c:	4153      	adcs	r3, r2
 800202e:	b2da      	uxtb	r2, r3
 8002030:	231e      	movs	r3, #30
 8002032:	18fb      	adds	r3, r7, r3
 8002034:	701a      	strb	r2, [r3, #0]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002036:	231f      	movs	r3, #31
 8002038:	18fb      	adds	r3, r7, r3
 800203a:	781b      	ldrb	r3, [r3, #0]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d104      	bne.n	800204a <HAL_I2C_IsDeviceReady+0x14a>
 8002040:	231e      	movs	r3, #30
 8002042:	18fb      	adds	r3, r7, r3
 8002044:	781b      	ldrb	r3, [r3, #0]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d0bf      	beq.n	8001fca <HAL_I2C_IsDeviceReady+0xca>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	699b      	ldr	r3, [r3, #24]
 8002050:	2210      	movs	r2, #16
 8002052:	4013      	ands	r3, r2
 8002054:	2b10      	cmp	r3, #16
 8002056:	d01a      	beq.n	800208e <HAL_I2C_IsDeviceReady+0x18e>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002058:	683a      	ldr	r2, [r7, #0]
 800205a:	68f8      	ldr	r0, [r7, #12]
 800205c:	69bb      	ldr	r3, [r7, #24]
 800205e:	9300      	str	r3, [sp, #0]
 8002060:	0013      	movs	r3, r2
 8002062:	2200      	movs	r2, #0
 8002064:	2120      	movs	r1, #32
 8002066:	f000 f8eb 	bl	8002240 <I2C_WaitOnFlagUntilTimeout>
 800206a:	1e03      	subs	r3, r0, #0
 800206c:	d001      	beq.n	8002072 <HAL_I2C_IsDeviceReady+0x172>
        {
          return HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	e059      	b.n	8002126 <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	2220      	movs	r2, #32
 8002078:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	2241      	movs	r2, #65	; 0x41
 800207e:	2120      	movs	r1, #32
 8002080:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	2240      	movs	r2, #64	; 0x40
 8002086:	2100      	movs	r1, #0
 8002088:	5499      	strb	r1, [r3, r2]

        return HAL_OK;
 800208a:	2300      	movs	r3, #0
 800208c:	e04b      	b.n	8002126 <HAL_I2C_IsDeviceReady+0x226>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800208e:	683a      	ldr	r2, [r7, #0]
 8002090:	68f8      	ldr	r0, [r7, #12]
 8002092:	69bb      	ldr	r3, [r7, #24]
 8002094:	9300      	str	r3, [sp, #0]
 8002096:	0013      	movs	r3, r2
 8002098:	2200      	movs	r2, #0
 800209a:	2120      	movs	r1, #32
 800209c:	f000 f8d0 	bl	8002240 <I2C_WaitOnFlagUntilTimeout>
 80020a0:	1e03      	subs	r3, r0, #0
 80020a2:	d001      	beq.n	80020a8 <HAL_I2C_IsDeviceReady+0x1a8>
        {
          return HAL_ERROR;
 80020a4:	2301      	movs	r3, #1
 80020a6:	e03e      	b.n	8002126 <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	2210      	movs	r2, #16
 80020ae:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	2220      	movs	r2, #32
 80020b6:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	687a      	ldr	r2, [r7, #4]
 80020bc:	429a      	cmp	r2, r3
 80020be:	d119      	bne.n	80020f4 <HAL_I2C_IsDeviceReady+0x1f4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	685a      	ldr	r2, [r3, #4]
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	2180      	movs	r1, #128	; 0x80
 80020cc:	01c9      	lsls	r1, r1, #7
 80020ce:	430a      	orrs	r2, r1
 80020d0:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80020d2:	683a      	ldr	r2, [r7, #0]
 80020d4:	68f8      	ldr	r0, [r7, #12]
 80020d6:	69bb      	ldr	r3, [r7, #24]
 80020d8:	9300      	str	r3, [sp, #0]
 80020da:	0013      	movs	r3, r2
 80020dc:	2200      	movs	r2, #0
 80020de:	2120      	movs	r1, #32
 80020e0:	f000 f8ae 	bl	8002240 <I2C_WaitOnFlagUntilTimeout>
 80020e4:	1e03      	subs	r3, r0, #0
 80020e6:	d001      	beq.n	80020ec <HAL_I2C_IsDeviceReady+0x1ec>
        {
          return HAL_ERROR;
 80020e8:	2301      	movs	r3, #1
 80020ea:	e01c      	b.n	8002126 <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	2220      	movs	r2, #32
 80020f2:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	3301      	adds	r3, #1
 80020f8:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	687a      	ldr	r2, [r7, #4]
 80020fe:	429a      	cmp	r2, r3
 8002100:	d900      	bls.n	8002104 <HAL_I2C_IsDeviceReady+0x204>
 8002102:	e72e      	b.n	8001f62 <HAL_I2C_IsDeviceReady+0x62>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	2241      	movs	r2, #65	; 0x41
 8002108:	2120      	movs	r1, #32
 800210a:	5499      	strb	r1, [r3, r2]

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002110:	2220      	movs	r2, #32
 8002112:	431a      	orrs	r2, r3
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	2240      	movs	r2, #64	; 0x40
 800211c:	2100      	movs	r1, #0
 800211e:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002120:	2301      	movs	r3, #1
 8002122:	e000      	b.n	8002126 <HAL_I2C_IsDeviceReady+0x226>
  }
  else
  {
    return HAL_BUSY;
 8002124:	2302      	movs	r3, #2
  }
}
 8002126:	0018      	movs	r0, r3
 8002128:	46bd      	mov	sp, r7
 800212a:	b008      	add	sp, #32
 800212c:	bd80      	pop	{r7, pc}
 800212e:	46c0      	nop			; (mov r8, r8)
 8002130:	02002000 	.word	0x02002000

08002134 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002134:	b5b0      	push	{r4, r5, r7, lr}
 8002136:	b086      	sub	sp, #24
 8002138:	af02      	add	r7, sp, #8
 800213a:	60f8      	str	r0, [r7, #12]
 800213c:	000c      	movs	r4, r1
 800213e:	0010      	movs	r0, r2
 8002140:	0019      	movs	r1, r3
 8002142:	250a      	movs	r5, #10
 8002144:	197b      	adds	r3, r7, r5
 8002146:	1c22      	adds	r2, r4, #0
 8002148:	801a      	strh	r2, [r3, #0]
 800214a:	2308      	movs	r3, #8
 800214c:	18fb      	adds	r3, r7, r3
 800214e:	1c02      	adds	r2, r0, #0
 8002150:	801a      	strh	r2, [r3, #0]
 8002152:	1dbb      	adds	r3, r7, #6
 8002154:	1c0a      	adds	r2, r1, #0
 8002156:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002158:	1dbb      	adds	r3, r7, #6
 800215a:	881b      	ldrh	r3, [r3, #0]
 800215c:	b2da      	uxtb	r2, r3
 800215e:	2380      	movs	r3, #128	; 0x80
 8002160:	045c      	lsls	r4, r3, #17
 8002162:	197b      	adds	r3, r7, r5
 8002164:	8819      	ldrh	r1, [r3, #0]
 8002166:	68f8      	ldr	r0, [r7, #12]
 8002168:	4b23      	ldr	r3, [pc, #140]	; (80021f8 <I2C_RequestMemoryWrite+0xc4>)
 800216a:	9300      	str	r3, [sp, #0]
 800216c:	0023      	movs	r3, r4
 800216e:	f000 f987 	bl	8002480 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002172:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002174:	6a39      	ldr	r1, [r7, #32]
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	0018      	movs	r0, r3
 800217a:	f000 f8a0 	bl	80022be <I2C_WaitOnTXISFlagUntilTimeout>
 800217e:	1e03      	subs	r3, r0, #0
 8002180:	d001      	beq.n	8002186 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	e033      	b.n	80021ee <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002186:	1dbb      	adds	r3, r7, #6
 8002188:	881b      	ldrh	r3, [r3, #0]
 800218a:	2b01      	cmp	r3, #1
 800218c:	d107      	bne.n	800219e <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800218e:	2308      	movs	r3, #8
 8002190:	18fb      	adds	r3, r7, r3
 8002192:	881b      	ldrh	r3, [r3, #0]
 8002194:	b2da      	uxtb	r2, r3
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	629a      	str	r2, [r3, #40]	; 0x28
 800219c:	e019      	b.n	80021d2 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800219e:	2308      	movs	r3, #8
 80021a0:	18fb      	adds	r3, r7, r3
 80021a2:	881b      	ldrh	r3, [r3, #0]
 80021a4:	0a1b      	lsrs	r3, r3, #8
 80021a6:	b29b      	uxth	r3, r3
 80021a8:	b2da      	uxtb	r2, r3
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80021b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021b2:	6a39      	ldr	r1, [r7, #32]
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	0018      	movs	r0, r3
 80021b8:	f000 f881 	bl	80022be <I2C_WaitOnTXISFlagUntilTimeout>
 80021bc:	1e03      	subs	r3, r0, #0
 80021be:	d001      	beq.n	80021c4 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 80021c0:	2301      	movs	r3, #1
 80021c2:	e014      	b.n	80021ee <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80021c4:	2308      	movs	r3, #8
 80021c6:	18fb      	adds	r3, r7, r3
 80021c8:	881b      	ldrh	r3, [r3, #0]
 80021ca:	b2da      	uxtb	r2, r3
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80021d2:	6a3a      	ldr	r2, [r7, #32]
 80021d4:	68f8      	ldr	r0, [r7, #12]
 80021d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d8:	9300      	str	r3, [sp, #0]
 80021da:	0013      	movs	r3, r2
 80021dc:	2200      	movs	r2, #0
 80021de:	2180      	movs	r1, #128	; 0x80
 80021e0:	f000 f82e 	bl	8002240 <I2C_WaitOnFlagUntilTimeout>
 80021e4:	1e03      	subs	r3, r0, #0
 80021e6:	d001      	beq.n	80021ec <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 80021e8:	2301      	movs	r3, #1
 80021ea:	e000      	b.n	80021ee <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 80021ec:	2300      	movs	r3, #0
}
 80021ee:	0018      	movs	r0, r3
 80021f0:	46bd      	mov	sp, r7
 80021f2:	b004      	add	sp, #16
 80021f4:	bdb0      	pop	{r4, r5, r7, pc}
 80021f6:	46c0      	nop			; (mov r8, r8)
 80021f8:	80002000 	.word	0x80002000

080021fc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b082      	sub	sp, #8
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	699b      	ldr	r3, [r3, #24]
 800220a:	2202      	movs	r2, #2
 800220c:	4013      	ands	r3, r2
 800220e:	2b02      	cmp	r3, #2
 8002210:	d103      	bne.n	800221a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	2200      	movs	r2, #0
 8002218:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	699b      	ldr	r3, [r3, #24]
 8002220:	2201      	movs	r2, #1
 8002222:	4013      	ands	r3, r2
 8002224:	2b01      	cmp	r3, #1
 8002226:	d007      	beq.n	8002238 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	699a      	ldr	r2, [r3, #24]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	2101      	movs	r1, #1
 8002234:	430a      	orrs	r2, r1
 8002236:	619a      	str	r2, [r3, #24]
  }
}
 8002238:	46c0      	nop			; (mov r8, r8)
 800223a:	46bd      	mov	sp, r7
 800223c:	b002      	add	sp, #8
 800223e:	bd80      	pop	{r7, pc}

08002240 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b084      	sub	sp, #16
 8002244:	af00      	add	r7, sp, #0
 8002246:	60f8      	str	r0, [r7, #12]
 8002248:	60b9      	str	r1, [r7, #8]
 800224a:	603b      	str	r3, [r7, #0]
 800224c:	1dfb      	adds	r3, r7, #7
 800224e:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002250:	e021      	b.n	8002296 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	3301      	adds	r3, #1
 8002256:	d01e      	beq.n	8002296 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002258:	f7fe fff6 	bl	8001248 <HAL_GetTick>
 800225c:	0002      	movs	r2, r0
 800225e:	69bb      	ldr	r3, [r7, #24]
 8002260:	1ad3      	subs	r3, r2, r3
 8002262:	683a      	ldr	r2, [r7, #0]
 8002264:	429a      	cmp	r2, r3
 8002266:	d302      	bcc.n	800226e <I2C_WaitOnFlagUntilTimeout+0x2e>
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d113      	bne.n	8002296 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002272:	2220      	movs	r2, #32
 8002274:	431a      	orrs	r2, r3
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	2241      	movs	r2, #65	; 0x41
 800227e:	2120      	movs	r1, #32
 8002280:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	2242      	movs	r2, #66	; 0x42
 8002286:	2100      	movs	r1, #0
 8002288:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	2240      	movs	r2, #64	; 0x40
 800228e:	2100      	movs	r1, #0
 8002290:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e00f      	b.n	80022b6 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	699b      	ldr	r3, [r3, #24]
 800229c:	68ba      	ldr	r2, [r7, #8]
 800229e:	4013      	ands	r3, r2
 80022a0:	68ba      	ldr	r2, [r7, #8]
 80022a2:	1ad3      	subs	r3, r2, r3
 80022a4:	425a      	negs	r2, r3
 80022a6:	4153      	adcs	r3, r2
 80022a8:	b2db      	uxtb	r3, r3
 80022aa:	001a      	movs	r2, r3
 80022ac:	1dfb      	adds	r3, r7, #7
 80022ae:	781b      	ldrb	r3, [r3, #0]
 80022b0:	429a      	cmp	r2, r3
 80022b2:	d0ce      	beq.n	8002252 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80022b4:	2300      	movs	r3, #0
}
 80022b6:	0018      	movs	r0, r3
 80022b8:	46bd      	mov	sp, r7
 80022ba:	b004      	add	sp, #16
 80022bc:	bd80      	pop	{r7, pc}

080022be <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80022be:	b580      	push	{r7, lr}
 80022c0:	b084      	sub	sp, #16
 80022c2:	af00      	add	r7, sp, #0
 80022c4:	60f8      	str	r0, [r7, #12]
 80022c6:	60b9      	str	r1, [r7, #8]
 80022c8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80022ca:	e02b      	b.n	8002324 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80022cc:	687a      	ldr	r2, [r7, #4]
 80022ce:	68b9      	ldr	r1, [r7, #8]
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	0018      	movs	r0, r3
 80022d4:	f000 f86e 	bl	80023b4 <I2C_IsAcknowledgeFailed>
 80022d8:	1e03      	subs	r3, r0, #0
 80022da:	d001      	beq.n	80022e0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80022dc:	2301      	movs	r3, #1
 80022de:	e029      	b.n	8002334 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	3301      	adds	r3, #1
 80022e4:	d01e      	beq.n	8002324 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022e6:	f7fe ffaf 	bl	8001248 <HAL_GetTick>
 80022ea:	0002      	movs	r2, r0
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	1ad3      	subs	r3, r2, r3
 80022f0:	68ba      	ldr	r2, [r7, #8]
 80022f2:	429a      	cmp	r2, r3
 80022f4:	d302      	bcc.n	80022fc <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80022f6:	68bb      	ldr	r3, [r7, #8]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d113      	bne.n	8002324 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002300:	2220      	movs	r2, #32
 8002302:	431a      	orrs	r2, r3
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	2241      	movs	r2, #65	; 0x41
 800230c:	2120      	movs	r1, #32
 800230e:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	2242      	movs	r2, #66	; 0x42
 8002314:	2100      	movs	r1, #0
 8002316:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	2240      	movs	r2, #64	; 0x40
 800231c:	2100      	movs	r1, #0
 800231e:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002320:	2301      	movs	r3, #1
 8002322:	e007      	b.n	8002334 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	699b      	ldr	r3, [r3, #24]
 800232a:	2202      	movs	r2, #2
 800232c:	4013      	ands	r3, r2
 800232e:	2b02      	cmp	r3, #2
 8002330:	d1cc      	bne.n	80022cc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002332:	2300      	movs	r3, #0
}
 8002334:	0018      	movs	r0, r3
 8002336:	46bd      	mov	sp, r7
 8002338:	b004      	add	sp, #16
 800233a:	bd80      	pop	{r7, pc}

0800233c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b084      	sub	sp, #16
 8002340:	af00      	add	r7, sp, #0
 8002342:	60f8      	str	r0, [r7, #12]
 8002344:	60b9      	str	r1, [r7, #8]
 8002346:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002348:	e028      	b.n	800239c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800234a:	687a      	ldr	r2, [r7, #4]
 800234c:	68b9      	ldr	r1, [r7, #8]
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	0018      	movs	r0, r3
 8002352:	f000 f82f 	bl	80023b4 <I2C_IsAcknowledgeFailed>
 8002356:	1e03      	subs	r3, r0, #0
 8002358:	d001      	beq.n	800235e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e026      	b.n	80023ac <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800235e:	f7fe ff73 	bl	8001248 <HAL_GetTick>
 8002362:	0002      	movs	r2, r0
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	1ad3      	subs	r3, r2, r3
 8002368:	68ba      	ldr	r2, [r7, #8]
 800236a:	429a      	cmp	r2, r3
 800236c:	d302      	bcc.n	8002374 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d113      	bne.n	800239c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002378:	2220      	movs	r2, #32
 800237a:	431a      	orrs	r2, r3
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	2241      	movs	r2, #65	; 0x41
 8002384:	2120      	movs	r1, #32
 8002386:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	2242      	movs	r2, #66	; 0x42
 800238c:	2100      	movs	r1, #0
 800238e:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	2240      	movs	r2, #64	; 0x40
 8002394:	2100      	movs	r1, #0
 8002396:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8002398:	2301      	movs	r3, #1
 800239a:	e007      	b.n	80023ac <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	699b      	ldr	r3, [r3, #24]
 80023a2:	2220      	movs	r2, #32
 80023a4:	4013      	ands	r3, r2
 80023a6:	2b20      	cmp	r3, #32
 80023a8:	d1cf      	bne.n	800234a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80023aa:	2300      	movs	r3, #0
}
 80023ac:	0018      	movs	r0, r3
 80023ae:	46bd      	mov	sp, r7
 80023b0:	b004      	add	sp, #16
 80023b2:	bd80      	pop	{r7, pc}

080023b4 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b084      	sub	sp, #16
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	60f8      	str	r0, [r7, #12]
 80023bc:	60b9      	str	r1, [r7, #8]
 80023be:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	699b      	ldr	r3, [r3, #24]
 80023c6:	2210      	movs	r2, #16
 80023c8:	4013      	ands	r3, r2
 80023ca:	2b10      	cmp	r3, #16
 80023cc:	d151      	bne.n	8002472 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80023ce:	e021      	b.n	8002414 <I2C_IsAcknowledgeFailed+0x60>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	3301      	adds	r3, #1
 80023d4:	d01e      	beq.n	8002414 <I2C_IsAcknowledgeFailed+0x60>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023d6:	f7fe ff37 	bl	8001248 <HAL_GetTick>
 80023da:	0002      	movs	r2, r0
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	1ad3      	subs	r3, r2, r3
 80023e0:	68ba      	ldr	r2, [r7, #8]
 80023e2:	429a      	cmp	r2, r3
 80023e4:	d302      	bcc.n	80023ec <I2C_IsAcknowledgeFailed+0x38>
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d113      	bne.n	8002414 <I2C_IsAcknowledgeFailed+0x60>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023f0:	2220      	movs	r2, #32
 80023f2:	431a      	orrs	r2, r3
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	2241      	movs	r2, #65	; 0x41
 80023fc:	2120      	movs	r1, #32
 80023fe:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	2242      	movs	r2, #66	; 0x42
 8002404:	2100      	movs	r1, #0
 8002406:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	2240      	movs	r2, #64	; 0x40
 800240c:	2100      	movs	r1, #0
 800240e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	e02f      	b.n	8002474 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	699b      	ldr	r3, [r3, #24]
 800241a:	2220      	movs	r2, #32
 800241c:	4013      	ands	r3, r2
 800241e:	2b20      	cmp	r3, #32
 8002420:	d1d6      	bne.n	80023d0 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	2210      	movs	r2, #16
 8002428:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	2220      	movs	r2, #32
 8002430:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	0018      	movs	r0, r3
 8002436:	f7ff fee1 	bl	80021fc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	685a      	ldr	r2, [r3, #4]
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	490d      	ldr	r1, [pc, #52]	; (800247c <I2C_IsAcknowledgeFailed+0xc8>)
 8002446:	400a      	ands	r2, r1
 8002448:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800244e:	2204      	movs	r2, #4
 8002450:	431a      	orrs	r2, r3
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	2241      	movs	r2, #65	; 0x41
 800245a:	2120      	movs	r1, #32
 800245c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	2242      	movs	r2, #66	; 0x42
 8002462:	2100      	movs	r1, #0
 8002464:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	2240      	movs	r2, #64	; 0x40
 800246a:	2100      	movs	r1, #0
 800246c:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	e000      	b.n	8002474 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8002472:	2300      	movs	r3, #0
}
 8002474:	0018      	movs	r0, r3
 8002476:	46bd      	mov	sp, r7
 8002478:	b004      	add	sp, #16
 800247a:	bd80      	pop	{r7, pc}
 800247c:	fe00e800 	.word	0xfe00e800

08002480 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002480:	b590      	push	{r4, r7, lr}
 8002482:	b085      	sub	sp, #20
 8002484:	af00      	add	r7, sp, #0
 8002486:	60f8      	str	r0, [r7, #12]
 8002488:	0008      	movs	r0, r1
 800248a:	0011      	movs	r1, r2
 800248c:	607b      	str	r3, [r7, #4]
 800248e:	240a      	movs	r4, #10
 8002490:	193b      	adds	r3, r7, r4
 8002492:	1c02      	adds	r2, r0, #0
 8002494:	801a      	strh	r2, [r3, #0]
 8002496:	2009      	movs	r0, #9
 8002498:	183b      	adds	r3, r7, r0
 800249a:	1c0a      	adds	r2, r1, #0
 800249c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	6a3a      	ldr	r2, [r7, #32]
 80024a6:	0d51      	lsrs	r1, r2, #21
 80024a8:	2280      	movs	r2, #128	; 0x80
 80024aa:	00d2      	lsls	r2, r2, #3
 80024ac:	400a      	ands	r2, r1
 80024ae:	490e      	ldr	r1, [pc, #56]	; (80024e8 <I2C_TransferConfig+0x68>)
 80024b0:	430a      	orrs	r2, r1
 80024b2:	43d2      	mvns	r2, r2
 80024b4:	401a      	ands	r2, r3
 80024b6:	0011      	movs	r1, r2
 80024b8:	193b      	adds	r3, r7, r4
 80024ba:	881b      	ldrh	r3, [r3, #0]
 80024bc:	059b      	lsls	r3, r3, #22
 80024be:	0d9a      	lsrs	r2, r3, #22
 80024c0:	183b      	adds	r3, r7, r0
 80024c2:	781b      	ldrb	r3, [r3, #0]
 80024c4:	0418      	lsls	r0, r3, #16
 80024c6:	23ff      	movs	r3, #255	; 0xff
 80024c8:	041b      	lsls	r3, r3, #16
 80024ca:	4003      	ands	r3, r0
 80024cc:	431a      	orrs	r2, r3
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	431a      	orrs	r2, r3
 80024d2:	6a3b      	ldr	r3, [r7, #32]
 80024d4:	431a      	orrs	r2, r3
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	430a      	orrs	r2, r1
 80024dc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80024de:	46c0      	nop			; (mov r8, r8)
 80024e0:	46bd      	mov	sp, r7
 80024e2:	b005      	add	sp, #20
 80024e4:	bd90      	pop	{r4, r7, pc}
 80024e6:	46c0      	nop			; (mov r8, r8)
 80024e8:	03ff63ff 	.word	0x03ff63ff

080024ec <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b082      	sub	sp, #8
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
 80024f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2241      	movs	r2, #65	; 0x41
 80024fa:	5c9b      	ldrb	r3, [r3, r2]
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	2b20      	cmp	r3, #32
 8002500:	d138      	bne.n	8002574 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2240      	movs	r2, #64	; 0x40
 8002506:	5c9b      	ldrb	r3, [r3, r2]
 8002508:	2b01      	cmp	r3, #1
 800250a:	d101      	bne.n	8002510 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800250c:	2302      	movs	r3, #2
 800250e:	e032      	b.n	8002576 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2240      	movs	r2, #64	; 0x40
 8002514:	2101      	movs	r1, #1
 8002516:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2241      	movs	r2, #65	; 0x41
 800251c:	2124      	movs	r1, #36	; 0x24
 800251e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	2101      	movs	r1, #1
 800252c:	438a      	bics	r2, r1
 800252e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4911      	ldr	r1, [pc, #68]	; (8002580 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800253c:	400a      	ands	r2, r1
 800253e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	6819      	ldr	r1, [r3, #0]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	683a      	ldr	r2, [r7, #0]
 800254c:	430a      	orrs	r2, r1
 800254e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	681a      	ldr	r2, [r3, #0]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	2101      	movs	r1, #1
 800255c:	430a      	orrs	r2, r1
 800255e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2241      	movs	r2, #65	; 0x41
 8002564:	2120      	movs	r1, #32
 8002566:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2240      	movs	r2, #64	; 0x40
 800256c:	2100      	movs	r1, #0
 800256e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002570:	2300      	movs	r3, #0
 8002572:	e000      	b.n	8002576 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002574:	2302      	movs	r3, #2
  }
}
 8002576:	0018      	movs	r0, r3
 8002578:	46bd      	mov	sp, r7
 800257a:	b002      	add	sp, #8
 800257c:	bd80      	pop	{r7, pc}
 800257e:	46c0      	nop			; (mov r8, r8)
 8002580:	ffffefff 	.word	0xffffefff

08002584 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b084      	sub	sp, #16
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
 800258c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2241      	movs	r2, #65	; 0x41
 8002592:	5c9b      	ldrb	r3, [r3, r2]
 8002594:	b2db      	uxtb	r3, r3
 8002596:	2b20      	cmp	r3, #32
 8002598:	d139      	bne.n	800260e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2240      	movs	r2, #64	; 0x40
 800259e:	5c9b      	ldrb	r3, [r3, r2]
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d101      	bne.n	80025a8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80025a4:	2302      	movs	r3, #2
 80025a6:	e033      	b.n	8002610 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2240      	movs	r2, #64	; 0x40
 80025ac:	2101      	movs	r1, #1
 80025ae:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2241      	movs	r2, #65	; 0x41
 80025b4:	2124      	movs	r1, #36	; 0x24
 80025b6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	2101      	movs	r1, #1
 80025c4:	438a      	bics	r2, r1
 80025c6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	4a11      	ldr	r2, [pc, #68]	; (8002618 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80025d4:	4013      	ands	r3, r2
 80025d6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	021b      	lsls	r3, r3, #8
 80025dc:	68fa      	ldr	r2, [r7, #12]
 80025de:	4313      	orrs	r3, r2
 80025e0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	68fa      	ldr	r2, [r7, #12]
 80025e8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	2101      	movs	r1, #1
 80025f6:	430a      	orrs	r2, r1
 80025f8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2241      	movs	r2, #65	; 0x41
 80025fe:	2120      	movs	r1, #32
 8002600:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2240      	movs	r2, #64	; 0x40
 8002606:	2100      	movs	r1, #0
 8002608:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800260a:	2300      	movs	r3, #0
 800260c:	e000      	b.n	8002610 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800260e:	2302      	movs	r3, #2
  }
}
 8002610:	0018      	movs	r0, r3
 8002612:	46bd      	mov	sp, r7
 8002614:	b004      	add	sp, #16
 8002616:	bd80      	pop	{r7, pc}
 8002618:	fffff0ff 	.word	0xfffff0ff

0800261c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b088      	sub	sp, #32
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d102      	bne.n	8002630 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	f000 fb76 	bl	8002d1c <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	2201      	movs	r2, #1
 8002636:	4013      	ands	r3, r2
 8002638:	d100      	bne.n	800263c <HAL_RCC_OscConfig+0x20>
 800263a:	e08e      	b.n	800275a <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800263c:	4bc5      	ldr	r3, [pc, #788]	; (8002954 <HAL_RCC_OscConfig+0x338>)
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	220c      	movs	r2, #12
 8002642:	4013      	ands	r3, r2
 8002644:	2b04      	cmp	r3, #4
 8002646:	d00e      	beq.n	8002666 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002648:	4bc2      	ldr	r3, [pc, #776]	; (8002954 <HAL_RCC_OscConfig+0x338>)
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	220c      	movs	r2, #12
 800264e:	4013      	ands	r3, r2
 8002650:	2b08      	cmp	r3, #8
 8002652:	d117      	bne.n	8002684 <HAL_RCC_OscConfig+0x68>
 8002654:	4bbf      	ldr	r3, [pc, #764]	; (8002954 <HAL_RCC_OscConfig+0x338>)
 8002656:	685a      	ldr	r2, [r3, #4]
 8002658:	23c0      	movs	r3, #192	; 0xc0
 800265a:	025b      	lsls	r3, r3, #9
 800265c:	401a      	ands	r2, r3
 800265e:	2380      	movs	r3, #128	; 0x80
 8002660:	025b      	lsls	r3, r3, #9
 8002662:	429a      	cmp	r2, r3
 8002664:	d10e      	bne.n	8002684 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002666:	4bbb      	ldr	r3, [pc, #748]	; (8002954 <HAL_RCC_OscConfig+0x338>)
 8002668:	681a      	ldr	r2, [r3, #0]
 800266a:	2380      	movs	r3, #128	; 0x80
 800266c:	029b      	lsls	r3, r3, #10
 800266e:	4013      	ands	r3, r2
 8002670:	d100      	bne.n	8002674 <HAL_RCC_OscConfig+0x58>
 8002672:	e071      	b.n	8002758 <HAL_RCC_OscConfig+0x13c>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d000      	beq.n	800267e <HAL_RCC_OscConfig+0x62>
 800267c:	e06c      	b.n	8002758 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	f000 fb4c 	bl	8002d1c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	2b01      	cmp	r3, #1
 800268a:	d107      	bne.n	800269c <HAL_RCC_OscConfig+0x80>
 800268c:	4bb1      	ldr	r3, [pc, #708]	; (8002954 <HAL_RCC_OscConfig+0x338>)
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	4bb0      	ldr	r3, [pc, #704]	; (8002954 <HAL_RCC_OscConfig+0x338>)
 8002692:	2180      	movs	r1, #128	; 0x80
 8002694:	0249      	lsls	r1, r1, #9
 8002696:	430a      	orrs	r2, r1
 8002698:	601a      	str	r2, [r3, #0]
 800269a:	e02f      	b.n	80026fc <HAL_RCC_OscConfig+0xe0>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d10c      	bne.n	80026be <HAL_RCC_OscConfig+0xa2>
 80026a4:	4bab      	ldr	r3, [pc, #684]	; (8002954 <HAL_RCC_OscConfig+0x338>)
 80026a6:	681a      	ldr	r2, [r3, #0]
 80026a8:	4baa      	ldr	r3, [pc, #680]	; (8002954 <HAL_RCC_OscConfig+0x338>)
 80026aa:	49ab      	ldr	r1, [pc, #684]	; (8002958 <HAL_RCC_OscConfig+0x33c>)
 80026ac:	400a      	ands	r2, r1
 80026ae:	601a      	str	r2, [r3, #0]
 80026b0:	4ba8      	ldr	r3, [pc, #672]	; (8002954 <HAL_RCC_OscConfig+0x338>)
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	4ba7      	ldr	r3, [pc, #668]	; (8002954 <HAL_RCC_OscConfig+0x338>)
 80026b6:	49a9      	ldr	r1, [pc, #676]	; (800295c <HAL_RCC_OscConfig+0x340>)
 80026b8:	400a      	ands	r2, r1
 80026ba:	601a      	str	r2, [r3, #0]
 80026bc:	e01e      	b.n	80026fc <HAL_RCC_OscConfig+0xe0>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	2b05      	cmp	r3, #5
 80026c4:	d10e      	bne.n	80026e4 <HAL_RCC_OscConfig+0xc8>
 80026c6:	4ba3      	ldr	r3, [pc, #652]	; (8002954 <HAL_RCC_OscConfig+0x338>)
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	4ba2      	ldr	r3, [pc, #648]	; (8002954 <HAL_RCC_OscConfig+0x338>)
 80026cc:	2180      	movs	r1, #128	; 0x80
 80026ce:	02c9      	lsls	r1, r1, #11
 80026d0:	430a      	orrs	r2, r1
 80026d2:	601a      	str	r2, [r3, #0]
 80026d4:	4b9f      	ldr	r3, [pc, #636]	; (8002954 <HAL_RCC_OscConfig+0x338>)
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	4b9e      	ldr	r3, [pc, #632]	; (8002954 <HAL_RCC_OscConfig+0x338>)
 80026da:	2180      	movs	r1, #128	; 0x80
 80026dc:	0249      	lsls	r1, r1, #9
 80026de:	430a      	orrs	r2, r1
 80026e0:	601a      	str	r2, [r3, #0]
 80026e2:	e00b      	b.n	80026fc <HAL_RCC_OscConfig+0xe0>
 80026e4:	4b9b      	ldr	r3, [pc, #620]	; (8002954 <HAL_RCC_OscConfig+0x338>)
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	4b9a      	ldr	r3, [pc, #616]	; (8002954 <HAL_RCC_OscConfig+0x338>)
 80026ea:	499b      	ldr	r1, [pc, #620]	; (8002958 <HAL_RCC_OscConfig+0x33c>)
 80026ec:	400a      	ands	r2, r1
 80026ee:	601a      	str	r2, [r3, #0]
 80026f0:	4b98      	ldr	r3, [pc, #608]	; (8002954 <HAL_RCC_OscConfig+0x338>)
 80026f2:	681a      	ldr	r2, [r3, #0]
 80026f4:	4b97      	ldr	r3, [pc, #604]	; (8002954 <HAL_RCC_OscConfig+0x338>)
 80026f6:	4999      	ldr	r1, [pc, #612]	; (800295c <HAL_RCC_OscConfig+0x340>)
 80026f8:	400a      	ands	r2, r1
 80026fa:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d014      	beq.n	800272e <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002704:	f7fe fda0 	bl	8001248 <HAL_GetTick>
 8002708:	0003      	movs	r3, r0
 800270a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800270c:	e008      	b.n	8002720 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800270e:	f7fe fd9b 	bl	8001248 <HAL_GetTick>
 8002712:	0002      	movs	r2, r0
 8002714:	69bb      	ldr	r3, [r7, #24]
 8002716:	1ad3      	subs	r3, r2, r3
 8002718:	2b64      	cmp	r3, #100	; 0x64
 800271a:	d901      	bls.n	8002720 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 800271c:	2303      	movs	r3, #3
 800271e:	e2fd      	b.n	8002d1c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002720:	4b8c      	ldr	r3, [pc, #560]	; (8002954 <HAL_RCC_OscConfig+0x338>)
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	2380      	movs	r3, #128	; 0x80
 8002726:	029b      	lsls	r3, r3, #10
 8002728:	4013      	ands	r3, r2
 800272a:	d0f0      	beq.n	800270e <HAL_RCC_OscConfig+0xf2>
 800272c:	e015      	b.n	800275a <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800272e:	f7fe fd8b 	bl	8001248 <HAL_GetTick>
 8002732:	0003      	movs	r3, r0
 8002734:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002736:	e008      	b.n	800274a <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002738:	f7fe fd86 	bl	8001248 <HAL_GetTick>
 800273c:	0002      	movs	r2, r0
 800273e:	69bb      	ldr	r3, [r7, #24]
 8002740:	1ad3      	subs	r3, r2, r3
 8002742:	2b64      	cmp	r3, #100	; 0x64
 8002744:	d901      	bls.n	800274a <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8002746:	2303      	movs	r3, #3
 8002748:	e2e8      	b.n	8002d1c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800274a:	4b82      	ldr	r3, [pc, #520]	; (8002954 <HAL_RCC_OscConfig+0x338>)
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	2380      	movs	r3, #128	; 0x80
 8002750:	029b      	lsls	r3, r3, #10
 8002752:	4013      	ands	r3, r2
 8002754:	d1f0      	bne.n	8002738 <HAL_RCC_OscConfig+0x11c>
 8002756:	e000      	b.n	800275a <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002758:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	2202      	movs	r2, #2
 8002760:	4013      	ands	r3, r2
 8002762:	d100      	bne.n	8002766 <HAL_RCC_OscConfig+0x14a>
 8002764:	e06c      	b.n	8002840 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002766:	4b7b      	ldr	r3, [pc, #492]	; (8002954 <HAL_RCC_OscConfig+0x338>)
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	220c      	movs	r2, #12
 800276c:	4013      	ands	r3, r2
 800276e:	d00e      	beq.n	800278e <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002770:	4b78      	ldr	r3, [pc, #480]	; (8002954 <HAL_RCC_OscConfig+0x338>)
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	220c      	movs	r2, #12
 8002776:	4013      	ands	r3, r2
 8002778:	2b08      	cmp	r3, #8
 800277a:	d11f      	bne.n	80027bc <HAL_RCC_OscConfig+0x1a0>
 800277c:	4b75      	ldr	r3, [pc, #468]	; (8002954 <HAL_RCC_OscConfig+0x338>)
 800277e:	685a      	ldr	r2, [r3, #4]
 8002780:	23c0      	movs	r3, #192	; 0xc0
 8002782:	025b      	lsls	r3, r3, #9
 8002784:	401a      	ands	r2, r3
 8002786:	2380      	movs	r3, #128	; 0x80
 8002788:	021b      	lsls	r3, r3, #8
 800278a:	429a      	cmp	r2, r3
 800278c:	d116      	bne.n	80027bc <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800278e:	4b71      	ldr	r3, [pc, #452]	; (8002954 <HAL_RCC_OscConfig+0x338>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	2202      	movs	r2, #2
 8002794:	4013      	ands	r3, r2
 8002796:	d005      	beq.n	80027a4 <HAL_RCC_OscConfig+0x188>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	68db      	ldr	r3, [r3, #12]
 800279c:	2b01      	cmp	r3, #1
 800279e:	d001      	beq.n	80027a4 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80027a0:	2301      	movs	r3, #1
 80027a2:	e2bb      	b.n	8002d1c <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027a4:	4b6b      	ldr	r3, [pc, #428]	; (8002954 <HAL_RCC_OscConfig+0x338>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	22f8      	movs	r2, #248	; 0xf8
 80027aa:	4393      	bics	r3, r2
 80027ac:	0019      	movs	r1, r3
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	691b      	ldr	r3, [r3, #16]
 80027b2:	00da      	lsls	r2, r3, #3
 80027b4:	4b67      	ldr	r3, [pc, #412]	; (8002954 <HAL_RCC_OscConfig+0x338>)
 80027b6:	430a      	orrs	r2, r1
 80027b8:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027ba:	e041      	b.n	8002840 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	68db      	ldr	r3, [r3, #12]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d024      	beq.n	800280e <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027c4:	4b63      	ldr	r3, [pc, #396]	; (8002954 <HAL_RCC_OscConfig+0x338>)
 80027c6:	681a      	ldr	r2, [r3, #0]
 80027c8:	4b62      	ldr	r3, [pc, #392]	; (8002954 <HAL_RCC_OscConfig+0x338>)
 80027ca:	2101      	movs	r1, #1
 80027cc:	430a      	orrs	r2, r1
 80027ce:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027d0:	f7fe fd3a 	bl	8001248 <HAL_GetTick>
 80027d4:	0003      	movs	r3, r0
 80027d6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027d8:	e008      	b.n	80027ec <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027da:	f7fe fd35 	bl	8001248 <HAL_GetTick>
 80027de:	0002      	movs	r2, r0
 80027e0:	69bb      	ldr	r3, [r7, #24]
 80027e2:	1ad3      	subs	r3, r2, r3
 80027e4:	2b02      	cmp	r3, #2
 80027e6:	d901      	bls.n	80027ec <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80027e8:	2303      	movs	r3, #3
 80027ea:	e297      	b.n	8002d1c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027ec:	4b59      	ldr	r3, [pc, #356]	; (8002954 <HAL_RCC_OscConfig+0x338>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	2202      	movs	r2, #2
 80027f2:	4013      	ands	r3, r2
 80027f4:	d0f1      	beq.n	80027da <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027f6:	4b57      	ldr	r3, [pc, #348]	; (8002954 <HAL_RCC_OscConfig+0x338>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	22f8      	movs	r2, #248	; 0xf8
 80027fc:	4393      	bics	r3, r2
 80027fe:	0019      	movs	r1, r3
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	691b      	ldr	r3, [r3, #16]
 8002804:	00da      	lsls	r2, r3, #3
 8002806:	4b53      	ldr	r3, [pc, #332]	; (8002954 <HAL_RCC_OscConfig+0x338>)
 8002808:	430a      	orrs	r2, r1
 800280a:	601a      	str	r2, [r3, #0]
 800280c:	e018      	b.n	8002840 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800280e:	4b51      	ldr	r3, [pc, #324]	; (8002954 <HAL_RCC_OscConfig+0x338>)
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	4b50      	ldr	r3, [pc, #320]	; (8002954 <HAL_RCC_OscConfig+0x338>)
 8002814:	2101      	movs	r1, #1
 8002816:	438a      	bics	r2, r1
 8002818:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800281a:	f7fe fd15 	bl	8001248 <HAL_GetTick>
 800281e:	0003      	movs	r3, r0
 8002820:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002822:	e008      	b.n	8002836 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002824:	f7fe fd10 	bl	8001248 <HAL_GetTick>
 8002828:	0002      	movs	r2, r0
 800282a:	69bb      	ldr	r3, [r7, #24]
 800282c:	1ad3      	subs	r3, r2, r3
 800282e:	2b02      	cmp	r3, #2
 8002830:	d901      	bls.n	8002836 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8002832:	2303      	movs	r3, #3
 8002834:	e272      	b.n	8002d1c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002836:	4b47      	ldr	r3, [pc, #284]	; (8002954 <HAL_RCC_OscConfig+0x338>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	2202      	movs	r2, #2
 800283c:	4013      	ands	r3, r2
 800283e:	d1f1      	bne.n	8002824 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	2208      	movs	r2, #8
 8002846:	4013      	ands	r3, r2
 8002848:	d036      	beq.n	80028b8 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	69db      	ldr	r3, [r3, #28]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d019      	beq.n	8002886 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002852:	4b40      	ldr	r3, [pc, #256]	; (8002954 <HAL_RCC_OscConfig+0x338>)
 8002854:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002856:	4b3f      	ldr	r3, [pc, #252]	; (8002954 <HAL_RCC_OscConfig+0x338>)
 8002858:	2101      	movs	r1, #1
 800285a:	430a      	orrs	r2, r1
 800285c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800285e:	f7fe fcf3 	bl	8001248 <HAL_GetTick>
 8002862:	0003      	movs	r3, r0
 8002864:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002866:	e008      	b.n	800287a <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002868:	f7fe fcee 	bl	8001248 <HAL_GetTick>
 800286c:	0002      	movs	r2, r0
 800286e:	69bb      	ldr	r3, [r7, #24]
 8002870:	1ad3      	subs	r3, r2, r3
 8002872:	2b02      	cmp	r3, #2
 8002874:	d901      	bls.n	800287a <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8002876:	2303      	movs	r3, #3
 8002878:	e250      	b.n	8002d1c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800287a:	4b36      	ldr	r3, [pc, #216]	; (8002954 <HAL_RCC_OscConfig+0x338>)
 800287c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800287e:	2202      	movs	r2, #2
 8002880:	4013      	ands	r3, r2
 8002882:	d0f1      	beq.n	8002868 <HAL_RCC_OscConfig+0x24c>
 8002884:	e018      	b.n	80028b8 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002886:	4b33      	ldr	r3, [pc, #204]	; (8002954 <HAL_RCC_OscConfig+0x338>)
 8002888:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800288a:	4b32      	ldr	r3, [pc, #200]	; (8002954 <HAL_RCC_OscConfig+0x338>)
 800288c:	2101      	movs	r1, #1
 800288e:	438a      	bics	r2, r1
 8002890:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002892:	f7fe fcd9 	bl	8001248 <HAL_GetTick>
 8002896:	0003      	movs	r3, r0
 8002898:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800289a:	e008      	b.n	80028ae <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800289c:	f7fe fcd4 	bl	8001248 <HAL_GetTick>
 80028a0:	0002      	movs	r2, r0
 80028a2:	69bb      	ldr	r3, [r7, #24]
 80028a4:	1ad3      	subs	r3, r2, r3
 80028a6:	2b02      	cmp	r3, #2
 80028a8:	d901      	bls.n	80028ae <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 80028aa:	2303      	movs	r3, #3
 80028ac:	e236      	b.n	8002d1c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028ae:	4b29      	ldr	r3, [pc, #164]	; (8002954 <HAL_RCC_OscConfig+0x338>)
 80028b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b2:	2202      	movs	r2, #2
 80028b4:	4013      	ands	r3, r2
 80028b6:	d1f1      	bne.n	800289c <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	2204      	movs	r2, #4
 80028be:	4013      	ands	r3, r2
 80028c0:	d100      	bne.n	80028c4 <HAL_RCC_OscConfig+0x2a8>
 80028c2:	e0b5      	b.n	8002a30 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028c4:	231f      	movs	r3, #31
 80028c6:	18fb      	adds	r3, r7, r3
 80028c8:	2200      	movs	r2, #0
 80028ca:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028cc:	4b21      	ldr	r3, [pc, #132]	; (8002954 <HAL_RCC_OscConfig+0x338>)
 80028ce:	69da      	ldr	r2, [r3, #28]
 80028d0:	2380      	movs	r3, #128	; 0x80
 80028d2:	055b      	lsls	r3, r3, #21
 80028d4:	4013      	ands	r3, r2
 80028d6:	d111      	bne.n	80028fc <HAL_RCC_OscConfig+0x2e0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028d8:	4b1e      	ldr	r3, [pc, #120]	; (8002954 <HAL_RCC_OscConfig+0x338>)
 80028da:	69da      	ldr	r2, [r3, #28]
 80028dc:	4b1d      	ldr	r3, [pc, #116]	; (8002954 <HAL_RCC_OscConfig+0x338>)
 80028de:	2180      	movs	r1, #128	; 0x80
 80028e0:	0549      	lsls	r1, r1, #21
 80028e2:	430a      	orrs	r2, r1
 80028e4:	61da      	str	r2, [r3, #28]
 80028e6:	4b1b      	ldr	r3, [pc, #108]	; (8002954 <HAL_RCC_OscConfig+0x338>)
 80028e8:	69da      	ldr	r2, [r3, #28]
 80028ea:	2380      	movs	r3, #128	; 0x80
 80028ec:	055b      	lsls	r3, r3, #21
 80028ee:	4013      	ands	r3, r2
 80028f0:	60fb      	str	r3, [r7, #12]
 80028f2:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80028f4:	231f      	movs	r3, #31
 80028f6:	18fb      	adds	r3, r7, r3
 80028f8:	2201      	movs	r2, #1
 80028fa:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028fc:	4b18      	ldr	r3, [pc, #96]	; (8002960 <HAL_RCC_OscConfig+0x344>)
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	2380      	movs	r3, #128	; 0x80
 8002902:	005b      	lsls	r3, r3, #1
 8002904:	4013      	ands	r3, r2
 8002906:	d11a      	bne.n	800293e <HAL_RCC_OscConfig+0x322>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002908:	4b15      	ldr	r3, [pc, #84]	; (8002960 <HAL_RCC_OscConfig+0x344>)
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	4b14      	ldr	r3, [pc, #80]	; (8002960 <HAL_RCC_OscConfig+0x344>)
 800290e:	2180      	movs	r1, #128	; 0x80
 8002910:	0049      	lsls	r1, r1, #1
 8002912:	430a      	orrs	r2, r1
 8002914:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002916:	f7fe fc97 	bl	8001248 <HAL_GetTick>
 800291a:	0003      	movs	r3, r0
 800291c:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800291e:	e008      	b.n	8002932 <HAL_RCC_OscConfig+0x316>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002920:	f7fe fc92 	bl	8001248 <HAL_GetTick>
 8002924:	0002      	movs	r2, r0
 8002926:	69bb      	ldr	r3, [r7, #24]
 8002928:	1ad3      	subs	r3, r2, r3
 800292a:	2b64      	cmp	r3, #100	; 0x64
 800292c:	d901      	bls.n	8002932 <HAL_RCC_OscConfig+0x316>
        {
          return HAL_TIMEOUT;
 800292e:	2303      	movs	r3, #3
 8002930:	e1f4      	b.n	8002d1c <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002932:	4b0b      	ldr	r3, [pc, #44]	; (8002960 <HAL_RCC_OscConfig+0x344>)
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	2380      	movs	r3, #128	; 0x80
 8002938:	005b      	lsls	r3, r3, #1
 800293a:	4013      	ands	r3, r2
 800293c:	d0f0      	beq.n	8002920 <HAL_RCC_OscConfig+0x304>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	2b01      	cmp	r3, #1
 8002944:	d10e      	bne.n	8002964 <HAL_RCC_OscConfig+0x348>
 8002946:	4b03      	ldr	r3, [pc, #12]	; (8002954 <HAL_RCC_OscConfig+0x338>)
 8002948:	6a1a      	ldr	r2, [r3, #32]
 800294a:	4b02      	ldr	r3, [pc, #8]	; (8002954 <HAL_RCC_OscConfig+0x338>)
 800294c:	2101      	movs	r1, #1
 800294e:	430a      	orrs	r2, r1
 8002950:	621a      	str	r2, [r3, #32]
 8002952:	e035      	b.n	80029c0 <HAL_RCC_OscConfig+0x3a4>
 8002954:	40021000 	.word	0x40021000
 8002958:	fffeffff 	.word	0xfffeffff
 800295c:	fffbffff 	.word	0xfffbffff
 8002960:	40007000 	.word	0x40007000
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d10c      	bne.n	8002986 <HAL_RCC_OscConfig+0x36a>
 800296c:	4bca      	ldr	r3, [pc, #808]	; (8002c98 <HAL_RCC_OscConfig+0x67c>)
 800296e:	6a1a      	ldr	r2, [r3, #32]
 8002970:	4bc9      	ldr	r3, [pc, #804]	; (8002c98 <HAL_RCC_OscConfig+0x67c>)
 8002972:	2101      	movs	r1, #1
 8002974:	438a      	bics	r2, r1
 8002976:	621a      	str	r2, [r3, #32]
 8002978:	4bc7      	ldr	r3, [pc, #796]	; (8002c98 <HAL_RCC_OscConfig+0x67c>)
 800297a:	6a1a      	ldr	r2, [r3, #32]
 800297c:	4bc6      	ldr	r3, [pc, #792]	; (8002c98 <HAL_RCC_OscConfig+0x67c>)
 800297e:	2104      	movs	r1, #4
 8002980:	438a      	bics	r2, r1
 8002982:	621a      	str	r2, [r3, #32]
 8002984:	e01c      	b.n	80029c0 <HAL_RCC_OscConfig+0x3a4>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	2b05      	cmp	r3, #5
 800298c:	d10c      	bne.n	80029a8 <HAL_RCC_OscConfig+0x38c>
 800298e:	4bc2      	ldr	r3, [pc, #776]	; (8002c98 <HAL_RCC_OscConfig+0x67c>)
 8002990:	6a1a      	ldr	r2, [r3, #32]
 8002992:	4bc1      	ldr	r3, [pc, #772]	; (8002c98 <HAL_RCC_OscConfig+0x67c>)
 8002994:	2104      	movs	r1, #4
 8002996:	430a      	orrs	r2, r1
 8002998:	621a      	str	r2, [r3, #32]
 800299a:	4bbf      	ldr	r3, [pc, #764]	; (8002c98 <HAL_RCC_OscConfig+0x67c>)
 800299c:	6a1a      	ldr	r2, [r3, #32]
 800299e:	4bbe      	ldr	r3, [pc, #760]	; (8002c98 <HAL_RCC_OscConfig+0x67c>)
 80029a0:	2101      	movs	r1, #1
 80029a2:	430a      	orrs	r2, r1
 80029a4:	621a      	str	r2, [r3, #32]
 80029a6:	e00b      	b.n	80029c0 <HAL_RCC_OscConfig+0x3a4>
 80029a8:	4bbb      	ldr	r3, [pc, #748]	; (8002c98 <HAL_RCC_OscConfig+0x67c>)
 80029aa:	6a1a      	ldr	r2, [r3, #32]
 80029ac:	4bba      	ldr	r3, [pc, #744]	; (8002c98 <HAL_RCC_OscConfig+0x67c>)
 80029ae:	2101      	movs	r1, #1
 80029b0:	438a      	bics	r2, r1
 80029b2:	621a      	str	r2, [r3, #32]
 80029b4:	4bb8      	ldr	r3, [pc, #736]	; (8002c98 <HAL_RCC_OscConfig+0x67c>)
 80029b6:	6a1a      	ldr	r2, [r3, #32]
 80029b8:	4bb7      	ldr	r3, [pc, #732]	; (8002c98 <HAL_RCC_OscConfig+0x67c>)
 80029ba:	2104      	movs	r1, #4
 80029bc:	438a      	bics	r2, r1
 80029be:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d014      	beq.n	80029f2 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029c8:	f7fe fc3e 	bl	8001248 <HAL_GetTick>
 80029cc:	0003      	movs	r3, r0
 80029ce:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029d0:	e009      	b.n	80029e6 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029d2:	f7fe fc39 	bl	8001248 <HAL_GetTick>
 80029d6:	0002      	movs	r2, r0
 80029d8:	69bb      	ldr	r3, [r7, #24]
 80029da:	1ad3      	subs	r3, r2, r3
 80029dc:	4aaf      	ldr	r2, [pc, #700]	; (8002c9c <HAL_RCC_OscConfig+0x680>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d901      	bls.n	80029e6 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80029e2:	2303      	movs	r3, #3
 80029e4:	e19a      	b.n	8002d1c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029e6:	4bac      	ldr	r3, [pc, #688]	; (8002c98 <HAL_RCC_OscConfig+0x67c>)
 80029e8:	6a1b      	ldr	r3, [r3, #32]
 80029ea:	2202      	movs	r2, #2
 80029ec:	4013      	ands	r3, r2
 80029ee:	d0f0      	beq.n	80029d2 <HAL_RCC_OscConfig+0x3b6>
 80029f0:	e013      	b.n	8002a1a <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029f2:	f7fe fc29 	bl	8001248 <HAL_GetTick>
 80029f6:	0003      	movs	r3, r0
 80029f8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029fa:	e009      	b.n	8002a10 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029fc:	f7fe fc24 	bl	8001248 <HAL_GetTick>
 8002a00:	0002      	movs	r2, r0
 8002a02:	69bb      	ldr	r3, [r7, #24]
 8002a04:	1ad3      	subs	r3, r2, r3
 8002a06:	4aa5      	ldr	r2, [pc, #660]	; (8002c9c <HAL_RCC_OscConfig+0x680>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d901      	bls.n	8002a10 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8002a0c:	2303      	movs	r3, #3
 8002a0e:	e185      	b.n	8002d1c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a10:	4ba1      	ldr	r3, [pc, #644]	; (8002c98 <HAL_RCC_OscConfig+0x67c>)
 8002a12:	6a1b      	ldr	r3, [r3, #32]
 8002a14:	2202      	movs	r2, #2
 8002a16:	4013      	ands	r3, r2
 8002a18:	d1f0      	bne.n	80029fc <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002a1a:	231f      	movs	r3, #31
 8002a1c:	18fb      	adds	r3, r7, r3
 8002a1e:	781b      	ldrb	r3, [r3, #0]
 8002a20:	2b01      	cmp	r3, #1
 8002a22:	d105      	bne.n	8002a30 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a24:	4b9c      	ldr	r3, [pc, #624]	; (8002c98 <HAL_RCC_OscConfig+0x67c>)
 8002a26:	69da      	ldr	r2, [r3, #28]
 8002a28:	4b9b      	ldr	r3, [pc, #620]	; (8002c98 <HAL_RCC_OscConfig+0x67c>)
 8002a2a:	499d      	ldr	r1, [pc, #628]	; (8002ca0 <HAL_RCC_OscConfig+0x684>)
 8002a2c:	400a      	ands	r2, r1
 8002a2e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	2210      	movs	r2, #16
 8002a36:	4013      	ands	r3, r2
 8002a38:	d063      	beq.n	8002b02 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	695b      	ldr	r3, [r3, #20]
 8002a3e:	2b01      	cmp	r3, #1
 8002a40:	d12a      	bne.n	8002a98 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002a42:	4b95      	ldr	r3, [pc, #596]	; (8002c98 <HAL_RCC_OscConfig+0x67c>)
 8002a44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a46:	4b94      	ldr	r3, [pc, #592]	; (8002c98 <HAL_RCC_OscConfig+0x67c>)
 8002a48:	2104      	movs	r1, #4
 8002a4a:	430a      	orrs	r2, r1
 8002a4c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002a4e:	4b92      	ldr	r3, [pc, #584]	; (8002c98 <HAL_RCC_OscConfig+0x67c>)
 8002a50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a52:	4b91      	ldr	r3, [pc, #580]	; (8002c98 <HAL_RCC_OscConfig+0x67c>)
 8002a54:	2101      	movs	r1, #1
 8002a56:	430a      	orrs	r2, r1
 8002a58:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a5a:	f7fe fbf5 	bl	8001248 <HAL_GetTick>
 8002a5e:	0003      	movs	r3, r0
 8002a60:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002a62:	e008      	b.n	8002a76 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002a64:	f7fe fbf0 	bl	8001248 <HAL_GetTick>
 8002a68:	0002      	movs	r2, r0
 8002a6a:	69bb      	ldr	r3, [r7, #24]
 8002a6c:	1ad3      	subs	r3, r2, r3
 8002a6e:	2b02      	cmp	r3, #2
 8002a70:	d901      	bls.n	8002a76 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8002a72:	2303      	movs	r3, #3
 8002a74:	e152      	b.n	8002d1c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002a76:	4b88      	ldr	r3, [pc, #544]	; (8002c98 <HAL_RCC_OscConfig+0x67c>)
 8002a78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a7a:	2202      	movs	r2, #2
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	d0f1      	beq.n	8002a64 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002a80:	4b85      	ldr	r3, [pc, #532]	; (8002c98 <HAL_RCC_OscConfig+0x67c>)
 8002a82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a84:	22f8      	movs	r2, #248	; 0xf8
 8002a86:	4393      	bics	r3, r2
 8002a88:	0019      	movs	r1, r3
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	699b      	ldr	r3, [r3, #24]
 8002a8e:	00da      	lsls	r2, r3, #3
 8002a90:	4b81      	ldr	r3, [pc, #516]	; (8002c98 <HAL_RCC_OscConfig+0x67c>)
 8002a92:	430a      	orrs	r2, r1
 8002a94:	635a      	str	r2, [r3, #52]	; 0x34
 8002a96:	e034      	b.n	8002b02 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	695b      	ldr	r3, [r3, #20]
 8002a9c:	3305      	adds	r3, #5
 8002a9e:	d111      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002aa0:	4b7d      	ldr	r3, [pc, #500]	; (8002c98 <HAL_RCC_OscConfig+0x67c>)
 8002aa2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002aa4:	4b7c      	ldr	r3, [pc, #496]	; (8002c98 <HAL_RCC_OscConfig+0x67c>)
 8002aa6:	2104      	movs	r1, #4
 8002aa8:	438a      	bics	r2, r1
 8002aaa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002aac:	4b7a      	ldr	r3, [pc, #488]	; (8002c98 <HAL_RCC_OscConfig+0x67c>)
 8002aae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ab0:	22f8      	movs	r2, #248	; 0xf8
 8002ab2:	4393      	bics	r3, r2
 8002ab4:	0019      	movs	r1, r3
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	699b      	ldr	r3, [r3, #24]
 8002aba:	00da      	lsls	r2, r3, #3
 8002abc:	4b76      	ldr	r3, [pc, #472]	; (8002c98 <HAL_RCC_OscConfig+0x67c>)
 8002abe:	430a      	orrs	r2, r1
 8002ac0:	635a      	str	r2, [r3, #52]	; 0x34
 8002ac2:	e01e      	b.n	8002b02 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002ac4:	4b74      	ldr	r3, [pc, #464]	; (8002c98 <HAL_RCC_OscConfig+0x67c>)
 8002ac6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ac8:	4b73      	ldr	r3, [pc, #460]	; (8002c98 <HAL_RCC_OscConfig+0x67c>)
 8002aca:	2104      	movs	r1, #4
 8002acc:	430a      	orrs	r2, r1
 8002ace:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002ad0:	4b71      	ldr	r3, [pc, #452]	; (8002c98 <HAL_RCC_OscConfig+0x67c>)
 8002ad2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ad4:	4b70      	ldr	r3, [pc, #448]	; (8002c98 <HAL_RCC_OscConfig+0x67c>)
 8002ad6:	2101      	movs	r1, #1
 8002ad8:	438a      	bics	r2, r1
 8002ada:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002adc:	f7fe fbb4 	bl	8001248 <HAL_GetTick>
 8002ae0:	0003      	movs	r3, r0
 8002ae2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002ae4:	e008      	b.n	8002af8 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002ae6:	f7fe fbaf 	bl	8001248 <HAL_GetTick>
 8002aea:	0002      	movs	r2, r0
 8002aec:	69bb      	ldr	r3, [r7, #24]
 8002aee:	1ad3      	subs	r3, r2, r3
 8002af0:	2b02      	cmp	r3, #2
 8002af2:	d901      	bls.n	8002af8 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8002af4:	2303      	movs	r3, #3
 8002af6:	e111      	b.n	8002d1c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002af8:	4b67      	ldr	r3, [pc, #412]	; (8002c98 <HAL_RCC_OscConfig+0x67c>)
 8002afa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002afc:	2202      	movs	r2, #2
 8002afe:	4013      	ands	r3, r2
 8002b00:	d1f1      	bne.n	8002ae6 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	2220      	movs	r2, #32
 8002b08:	4013      	ands	r3, r2
 8002b0a:	d05c      	beq.n	8002bc6 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002b0c:	4b62      	ldr	r3, [pc, #392]	; (8002c98 <HAL_RCC_OscConfig+0x67c>)
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	220c      	movs	r2, #12
 8002b12:	4013      	ands	r3, r2
 8002b14:	2b0c      	cmp	r3, #12
 8002b16:	d00e      	beq.n	8002b36 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002b18:	4b5f      	ldr	r3, [pc, #380]	; (8002c98 <HAL_RCC_OscConfig+0x67c>)
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	220c      	movs	r2, #12
 8002b1e:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002b20:	2b08      	cmp	r3, #8
 8002b22:	d114      	bne.n	8002b4e <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002b24:	4b5c      	ldr	r3, [pc, #368]	; (8002c98 <HAL_RCC_OscConfig+0x67c>)
 8002b26:	685a      	ldr	r2, [r3, #4]
 8002b28:	23c0      	movs	r3, #192	; 0xc0
 8002b2a:	025b      	lsls	r3, r3, #9
 8002b2c:	401a      	ands	r2, r3
 8002b2e:	23c0      	movs	r3, #192	; 0xc0
 8002b30:	025b      	lsls	r3, r3, #9
 8002b32:	429a      	cmp	r2, r3
 8002b34:	d10b      	bne.n	8002b4e <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002b36:	4b58      	ldr	r3, [pc, #352]	; (8002c98 <HAL_RCC_OscConfig+0x67c>)
 8002b38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b3a:	2380      	movs	r3, #128	; 0x80
 8002b3c:	025b      	lsls	r3, r3, #9
 8002b3e:	4013      	ands	r3, r2
 8002b40:	d040      	beq.n	8002bc4 <HAL_RCC_OscConfig+0x5a8>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6a1b      	ldr	r3, [r3, #32]
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	d03c      	beq.n	8002bc4 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e0e6      	b.n	8002d1c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6a1b      	ldr	r3, [r3, #32]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d01b      	beq.n	8002b8e <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002b56:	4b50      	ldr	r3, [pc, #320]	; (8002c98 <HAL_RCC_OscConfig+0x67c>)
 8002b58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b5a:	4b4f      	ldr	r3, [pc, #316]	; (8002c98 <HAL_RCC_OscConfig+0x67c>)
 8002b5c:	2180      	movs	r1, #128	; 0x80
 8002b5e:	0249      	lsls	r1, r1, #9
 8002b60:	430a      	orrs	r2, r1
 8002b62:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b64:	f7fe fb70 	bl	8001248 <HAL_GetTick>
 8002b68:	0003      	movs	r3, r0
 8002b6a:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002b6c:	e008      	b.n	8002b80 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002b6e:	f7fe fb6b 	bl	8001248 <HAL_GetTick>
 8002b72:	0002      	movs	r2, r0
 8002b74:	69bb      	ldr	r3, [r7, #24]
 8002b76:	1ad3      	subs	r3, r2, r3
 8002b78:	2b02      	cmp	r3, #2
 8002b7a:	d901      	bls.n	8002b80 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8002b7c:	2303      	movs	r3, #3
 8002b7e:	e0cd      	b.n	8002d1c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002b80:	4b45      	ldr	r3, [pc, #276]	; (8002c98 <HAL_RCC_OscConfig+0x67c>)
 8002b82:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b84:	2380      	movs	r3, #128	; 0x80
 8002b86:	025b      	lsls	r3, r3, #9
 8002b88:	4013      	ands	r3, r2
 8002b8a:	d0f0      	beq.n	8002b6e <HAL_RCC_OscConfig+0x552>
 8002b8c:	e01b      	b.n	8002bc6 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002b8e:	4b42      	ldr	r3, [pc, #264]	; (8002c98 <HAL_RCC_OscConfig+0x67c>)
 8002b90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b92:	4b41      	ldr	r3, [pc, #260]	; (8002c98 <HAL_RCC_OscConfig+0x67c>)
 8002b94:	4943      	ldr	r1, [pc, #268]	; (8002ca4 <HAL_RCC_OscConfig+0x688>)
 8002b96:	400a      	ands	r2, r1
 8002b98:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b9a:	f7fe fb55 	bl	8001248 <HAL_GetTick>
 8002b9e:	0003      	movs	r3, r0
 8002ba0:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002ba2:	e008      	b.n	8002bb6 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002ba4:	f7fe fb50 	bl	8001248 <HAL_GetTick>
 8002ba8:	0002      	movs	r2, r0
 8002baa:	69bb      	ldr	r3, [r7, #24]
 8002bac:	1ad3      	subs	r3, r2, r3
 8002bae:	2b02      	cmp	r3, #2
 8002bb0:	d901      	bls.n	8002bb6 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8002bb2:	2303      	movs	r3, #3
 8002bb4:	e0b2      	b.n	8002d1c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002bb6:	4b38      	ldr	r3, [pc, #224]	; (8002c98 <HAL_RCC_OscConfig+0x67c>)
 8002bb8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002bba:	2380      	movs	r3, #128	; 0x80
 8002bbc:	025b      	lsls	r3, r3, #9
 8002bbe:	4013      	ands	r3, r2
 8002bc0:	d1f0      	bne.n	8002ba4 <HAL_RCC_OscConfig+0x588>
 8002bc2:	e000      	b.n	8002bc6 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002bc4:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d100      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x5b4>
 8002bce:	e0a4      	b.n	8002d1a <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002bd0:	4b31      	ldr	r3, [pc, #196]	; (8002c98 <HAL_RCC_OscConfig+0x67c>)
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	220c      	movs	r2, #12
 8002bd6:	4013      	ands	r3, r2
 8002bd8:	2b08      	cmp	r3, #8
 8002bda:	d100      	bne.n	8002bde <HAL_RCC_OscConfig+0x5c2>
 8002bdc:	e078      	b.n	8002cd0 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be2:	2b02      	cmp	r3, #2
 8002be4:	d14c      	bne.n	8002c80 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002be6:	4b2c      	ldr	r3, [pc, #176]	; (8002c98 <HAL_RCC_OscConfig+0x67c>)
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	4b2b      	ldr	r3, [pc, #172]	; (8002c98 <HAL_RCC_OscConfig+0x67c>)
 8002bec:	492e      	ldr	r1, [pc, #184]	; (8002ca8 <HAL_RCC_OscConfig+0x68c>)
 8002bee:	400a      	ands	r2, r1
 8002bf0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bf2:	f7fe fb29 	bl	8001248 <HAL_GetTick>
 8002bf6:	0003      	movs	r3, r0
 8002bf8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bfa:	e008      	b.n	8002c0e <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bfc:	f7fe fb24 	bl	8001248 <HAL_GetTick>
 8002c00:	0002      	movs	r2, r0
 8002c02:	69bb      	ldr	r3, [r7, #24]
 8002c04:	1ad3      	subs	r3, r2, r3
 8002c06:	2b02      	cmp	r3, #2
 8002c08:	d901      	bls.n	8002c0e <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	e086      	b.n	8002d1c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c0e:	4b22      	ldr	r3, [pc, #136]	; (8002c98 <HAL_RCC_OscConfig+0x67c>)
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	2380      	movs	r3, #128	; 0x80
 8002c14:	049b      	lsls	r3, r3, #18
 8002c16:	4013      	ands	r3, r2
 8002c18:	d1f0      	bne.n	8002bfc <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c1a:	4b1f      	ldr	r3, [pc, #124]	; (8002c98 <HAL_RCC_OscConfig+0x67c>)
 8002c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c1e:	220f      	movs	r2, #15
 8002c20:	4393      	bics	r3, r2
 8002c22:	0019      	movs	r1, r3
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c28:	4b1b      	ldr	r3, [pc, #108]	; (8002c98 <HAL_RCC_OscConfig+0x67c>)
 8002c2a:	430a      	orrs	r2, r1
 8002c2c:	62da      	str	r2, [r3, #44]	; 0x2c
 8002c2e:	4b1a      	ldr	r3, [pc, #104]	; (8002c98 <HAL_RCC_OscConfig+0x67c>)
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	4a1e      	ldr	r2, [pc, #120]	; (8002cac <HAL_RCC_OscConfig+0x690>)
 8002c34:	4013      	ands	r3, r2
 8002c36:	0019      	movs	r1, r3
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c40:	431a      	orrs	r2, r3
 8002c42:	4b15      	ldr	r3, [pc, #84]	; (8002c98 <HAL_RCC_OscConfig+0x67c>)
 8002c44:	430a      	orrs	r2, r1
 8002c46:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c48:	4b13      	ldr	r3, [pc, #76]	; (8002c98 <HAL_RCC_OscConfig+0x67c>)
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	4b12      	ldr	r3, [pc, #72]	; (8002c98 <HAL_RCC_OscConfig+0x67c>)
 8002c4e:	2180      	movs	r1, #128	; 0x80
 8002c50:	0449      	lsls	r1, r1, #17
 8002c52:	430a      	orrs	r2, r1
 8002c54:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c56:	f7fe faf7 	bl	8001248 <HAL_GetTick>
 8002c5a:	0003      	movs	r3, r0
 8002c5c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c5e:	e008      	b.n	8002c72 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c60:	f7fe faf2 	bl	8001248 <HAL_GetTick>
 8002c64:	0002      	movs	r2, r0
 8002c66:	69bb      	ldr	r3, [r7, #24]
 8002c68:	1ad3      	subs	r3, r2, r3
 8002c6a:	2b02      	cmp	r3, #2
 8002c6c:	d901      	bls.n	8002c72 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8002c6e:	2303      	movs	r3, #3
 8002c70:	e054      	b.n	8002d1c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c72:	4b09      	ldr	r3, [pc, #36]	; (8002c98 <HAL_RCC_OscConfig+0x67c>)
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	2380      	movs	r3, #128	; 0x80
 8002c78:	049b      	lsls	r3, r3, #18
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	d0f0      	beq.n	8002c60 <HAL_RCC_OscConfig+0x644>
 8002c7e:	e04c      	b.n	8002d1a <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c80:	4b05      	ldr	r3, [pc, #20]	; (8002c98 <HAL_RCC_OscConfig+0x67c>)
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	4b04      	ldr	r3, [pc, #16]	; (8002c98 <HAL_RCC_OscConfig+0x67c>)
 8002c86:	4908      	ldr	r1, [pc, #32]	; (8002ca8 <HAL_RCC_OscConfig+0x68c>)
 8002c88:	400a      	ands	r2, r1
 8002c8a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c8c:	f7fe fadc 	bl	8001248 <HAL_GetTick>
 8002c90:	0003      	movs	r3, r0
 8002c92:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c94:	e015      	b.n	8002cc2 <HAL_RCC_OscConfig+0x6a6>
 8002c96:	46c0      	nop			; (mov r8, r8)
 8002c98:	40021000 	.word	0x40021000
 8002c9c:	00001388 	.word	0x00001388
 8002ca0:	efffffff 	.word	0xefffffff
 8002ca4:	fffeffff 	.word	0xfffeffff
 8002ca8:	feffffff 	.word	0xfeffffff
 8002cac:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cb0:	f7fe faca 	bl	8001248 <HAL_GetTick>
 8002cb4:	0002      	movs	r2, r0
 8002cb6:	69bb      	ldr	r3, [r7, #24]
 8002cb8:	1ad3      	subs	r3, r2, r3
 8002cba:	2b02      	cmp	r3, #2
 8002cbc:	d901      	bls.n	8002cc2 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8002cbe:	2303      	movs	r3, #3
 8002cc0:	e02c      	b.n	8002d1c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cc2:	4b18      	ldr	r3, [pc, #96]	; (8002d24 <HAL_RCC_OscConfig+0x708>)
 8002cc4:	681a      	ldr	r2, [r3, #0]
 8002cc6:	2380      	movs	r3, #128	; 0x80
 8002cc8:	049b      	lsls	r3, r3, #18
 8002cca:	4013      	ands	r3, r2
 8002ccc:	d1f0      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x694>
 8002cce:	e024      	b.n	8002d1a <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd4:	2b01      	cmp	r3, #1
 8002cd6:	d101      	bne.n	8002cdc <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	e01f      	b.n	8002d1c <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002cdc:	4b11      	ldr	r3, [pc, #68]	; (8002d24 <HAL_RCC_OscConfig+0x708>)
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002ce2:	4b10      	ldr	r3, [pc, #64]	; (8002d24 <HAL_RCC_OscConfig+0x708>)
 8002ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ce6:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ce8:	697a      	ldr	r2, [r7, #20]
 8002cea:	23c0      	movs	r3, #192	; 0xc0
 8002cec:	025b      	lsls	r3, r3, #9
 8002cee:	401a      	ands	r2, r3
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	d10e      	bne.n	8002d16 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	220f      	movs	r2, #15
 8002cfc:	401a      	ands	r2, r3
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d02:	429a      	cmp	r2, r3
 8002d04:	d107      	bne.n	8002d16 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002d06:	697a      	ldr	r2, [r7, #20]
 8002d08:	23f0      	movs	r3, #240	; 0xf0
 8002d0a:	039b      	lsls	r3, r3, #14
 8002d0c:	401a      	ands	r2, r3
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002d12:	429a      	cmp	r2, r3
 8002d14:	d001      	beq.n	8002d1a <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e000      	b.n	8002d1c <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8002d1a:	2300      	movs	r3, #0
}
 8002d1c:	0018      	movs	r0, r3
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	b008      	add	sp, #32
 8002d22:	bd80      	pop	{r7, pc}
 8002d24:	40021000 	.word	0x40021000

08002d28 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b084      	sub	sp, #16
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
 8002d30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d101      	bne.n	8002d3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	e0bf      	b.n	8002ebc <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d3c:	4b61      	ldr	r3, [pc, #388]	; (8002ec4 <HAL_RCC_ClockConfig+0x19c>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	2201      	movs	r2, #1
 8002d42:	4013      	ands	r3, r2
 8002d44:	683a      	ldr	r2, [r7, #0]
 8002d46:	429a      	cmp	r2, r3
 8002d48:	d911      	bls.n	8002d6e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d4a:	4b5e      	ldr	r3, [pc, #376]	; (8002ec4 <HAL_RCC_ClockConfig+0x19c>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	2201      	movs	r2, #1
 8002d50:	4393      	bics	r3, r2
 8002d52:	0019      	movs	r1, r3
 8002d54:	4b5b      	ldr	r3, [pc, #364]	; (8002ec4 <HAL_RCC_ClockConfig+0x19c>)
 8002d56:	683a      	ldr	r2, [r7, #0]
 8002d58:	430a      	orrs	r2, r1
 8002d5a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d5c:	4b59      	ldr	r3, [pc, #356]	; (8002ec4 <HAL_RCC_ClockConfig+0x19c>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	2201      	movs	r2, #1
 8002d62:	4013      	ands	r3, r2
 8002d64:	683a      	ldr	r2, [r7, #0]
 8002d66:	429a      	cmp	r2, r3
 8002d68:	d001      	beq.n	8002d6e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e0a6      	b.n	8002ebc <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	2202      	movs	r2, #2
 8002d74:	4013      	ands	r3, r2
 8002d76:	d015      	beq.n	8002da4 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	2204      	movs	r2, #4
 8002d7e:	4013      	ands	r3, r2
 8002d80:	d006      	beq.n	8002d90 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002d82:	4b51      	ldr	r3, [pc, #324]	; (8002ec8 <HAL_RCC_ClockConfig+0x1a0>)
 8002d84:	685a      	ldr	r2, [r3, #4]
 8002d86:	4b50      	ldr	r3, [pc, #320]	; (8002ec8 <HAL_RCC_ClockConfig+0x1a0>)
 8002d88:	21e0      	movs	r1, #224	; 0xe0
 8002d8a:	00c9      	lsls	r1, r1, #3
 8002d8c:	430a      	orrs	r2, r1
 8002d8e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d90:	4b4d      	ldr	r3, [pc, #308]	; (8002ec8 <HAL_RCC_ClockConfig+0x1a0>)
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	22f0      	movs	r2, #240	; 0xf0
 8002d96:	4393      	bics	r3, r2
 8002d98:	0019      	movs	r1, r3
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	689a      	ldr	r2, [r3, #8]
 8002d9e:	4b4a      	ldr	r3, [pc, #296]	; (8002ec8 <HAL_RCC_ClockConfig+0x1a0>)
 8002da0:	430a      	orrs	r2, r1
 8002da2:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	2201      	movs	r2, #1
 8002daa:	4013      	ands	r3, r2
 8002dac:	d04c      	beq.n	8002e48 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	d107      	bne.n	8002dc6 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002db6:	4b44      	ldr	r3, [pc, #272]	; (8002ec8 <HAL_RCC_ClockConfig+0x1a0>)
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	2380      	movs	r3, #128	; 0x80
 8002dbc:	029b      	lsls	r3, r3, #10
 8002dbe:	4013      	ands	r3, r2
 8002dc0:	d120      	bne.n	8002e04 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e07a      	b.n	8002ebc <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	2b02      	cmp	r3, #2
 8002dcc:	d107      	bne.n	8002dde <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dce:	4b3e      	ldr	r3, [pc, #248]	; (8002ec8 <HAL_RCC_ClockConfig+0x1a0>)
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	2380      	movs	r3, #128	; 0x80
 8002dd4:	049b      	lsls	r3, r3, #18
 8002dd6:	4013      	ands	r3, r2
 8002dd8:	d114      	bne.n	8002e04 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e06e      	b.n	8002ebc <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	2b03      	cmp	r3, #3
 8002de4:	d107      	bne.n	8002df6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002de6:	4b38      	ldr	r3, [pc, #224]	; (8002ec8 <HAL_RCC_ClockConfig+0x1a0>)
 8002de8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002dea:	2380      	movs	r3, #128	; 0x80
 8002dec:	025b      	lsls	r3, r3, #9
 8002dee:	4013      	ands	r3, r2
 8002df0:	d108      	bne.n	8002e04 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	e062      	b.n	8002ebc <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002df6:	4b34      	ldr	r3, [pc, #208]	; (8002ec8 <HAL_RCC_ClockConfig+0x1a0>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	2202      	movs	r2, #2
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	d101      	bne.n	8002e04 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002e00:	2301      	movs	r3, #1
 8002e02:	e05b      	b.n	8002ebc <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e04:	4b30      	ldr	r3, [pc, #192]	; (8002ec8 <HAL_RCC_ClockConfig+0x1a0>)
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	2203      	movs	r2, #3
 8002e0a:	4393      	bics	r3, r2
 8002e0c:	0019      	movs	r1, r3
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	685a      	ldr	r2, [r3, #4]
 8002e12:	4b2d      	ldr	r3, [pc, #180]	; (8002ec8 <HAL_RCC_ClockConfig+0x1a0>)
 8002e14:	430a      	orrs	r2, r1
 8002e16:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e18:	f7fe fa16 	bl	8001248 <HAL_GetTick>
 8002e1c:	0003      	movs	r3, r0
 8002e1e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e20:	e009      	b.n	8002e36 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e22:	f7fe fa11 	bl	8001248 <HAL_GetTick>
 8002e26:	0002      	movs	r2, r0
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	1ad3      	subs	r3, r2, r3
 8002e2c:	4a27      	ldr	r2, [pc, #156]	; (8002ecc <HAL_RCC_ClockConfig+0x1a4>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d901      	bls.n	8002e36 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e32:	2303      	movs	r3, #3
 8002e34:	e042      	b.n	8002ebc <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e36:	4b24      	ldr	r3, [pc, #144]	; (8002ec8 <HAL_RCC_ClockConfig+0x1a0>)
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	220c      	movs	r2, #12
 8002e3c:	401a      	ands	r2, r3
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	009b      	lsls	r3, r3, #2
 8002e44:	429a      	cmp	r2, r3
 8002e46:	d1ec      	bne.n	8002e22 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e48:	4b1e      	ldr	r3, [pc, #120]	; (8002ec4 <HAL_RCC_ClockConfig+0x19c>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	2201      	movs	r2, #1
 8002e4e:	4013      	ands	r3, r2
 8002e50:	683a      	ldr	r2, [r7, #0]
 8002e52:	429a      	cmp	r2, r3
 8002e54:	d211      	bcs.n	8002e7a <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e56:	4b1b      	ldr	r3, [pc, #108]	; (8002ec4 <HAL_RCC_ClockConfig+0x19c>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	4393      	bics	r3, r2
 8002e5e:	0019      	movs	r1, r3
 8002e60:	4b18      	ldr	r3, [pc, #96]	; (8002ec4 <HAL_RCC_ClockConfig+0x19c>)
 8002e62:	683a      	ldr	r2, [r7, #0]
 8002e64:	430a      	orrs	r2, r1
 8002e66:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e68:	4b16      	ldr	r3, [pc, #88]	; (8002ec4 <HAL_RCC_ClockConfig+0x19c>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	4013      	ands	r3, r2
 8002e70:	683a      	ldr	r2, [r7, #0]
 8002e72:	429a      	cmp	r2, r3
 8002e74:	d001      	beq.n	8002e7a <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	e020      	b.n	8002ebc <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	2204      	movs	r2, #4
 8002e80:	4013      	ands	r3, r2
 8002e82:	d009      	beq.n	8002e98 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002e84:	4b10      	ldr	r3, [pc, #64]	; (8002ec8 <HAL_RCC_ClockConfig+0x1a0>)
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	4a11      	ldr	r2, [pc, #68]	; (8002ed0 <HAL_RCC_ClockConfig+0x1a8>)
 8002e8a:	4013      	ands	r3, r2
 8002e8c:	0019      	movs	r1, r3
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	68da      	ldr	r2, [r3, #12]
 8002e92:	4b0d      	ldr	r3, [pc, #52]	; (8002ec8 <HAL_RCC_ClockConfig+0x1a0>)
 8002e94:	430a      	orrs	r2, r1
 8002e96:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002e98:	f000 f820 	bl	8002edc <HAL_RCC_GetSysClockFreq>
 8002e9c:	0001      	movs	r1, r0
 8002e9e:	4b0a      	ldr	r3, [pc, #40]	; (8002ec8 <HAL_RCC_ClockConfig+0x1a0>)
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	091b      	lsrs	r3, r3, #4
 8002ea4:	220f      	movs	r2, #15
 8002ea6:	4013      	ands	r3, r2
 8002ea8:	4a0a      	ldr	r2, [pc, #40]	; (8002ed4 <HAL_RCC_ClockConfig+0x1ac>)
 8002eaa:	5cd3      	ldrb	r3, [r2, r3]
 8002eac:	000a      	movs	r2, r1
 8002eae:	40da      	lsrs	r2, r3
 8002eb0:	4b09      	ldr	r3, [pc, #36]	; (8002ed8 <HAL_RCC_ClockConfig+0x1b0>)
 8002eb2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002eb4:	2000      	movs	r0, #0
 8002eb6:	f7fe f981 	bl	80011bc <HAL_InitTick>
  
  return HAL_OK;
 8002eba:	2300      	movs	r3, #0
}
 8002ebc:	0018      	movs	r0, r3
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	b004      	add	sp, #16
 8002ec2:	bd80      	pop	{r7, pc}
 8002ec4:	40022000 	.word	0x40022000
 8002ec8:	40021000 	.word	0x40021000
 8002ecc:	00001388 	.word	0x00001388
 8002ed0:	fffff8ff 	.word	0xfffff8ff
 8002ed4:	08004f88 	.word	0x08004f88
 8002ed8:	20000000 	.word	0x20000000

08002edc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002edc:	b590      	push	{r4, r7, lr}
 8002ede:	b08f      	sub	sp, #60	; 0x3c
 8002ee0:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8002ee2:	2314      	movs	r3, #20
 8002ee4:	18fb      	adds	r3, r7, r3
 8002ee6:	4a37      	ldr	r2, [pc, #220]	; (8002fc4 <HAL_RCC_GetSysClockFreq+0xe8>)
 8002ee8:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002eea:	c313      	stmia	r3!, {r0, r1, r4}
 8002eec:	6812      	ldr	r2, [r2, #0]
 8002eee:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8002ef0:	1d3b      	adds	r3, r7, #4
 8002ef2:	4a35      	ldr	r2, [pc, #212]	; (8002fc8 <HAL_RCC_GetSysClockFreq+0xec>)
 8002ef4:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002ef6:	c313      	stmia	r3!, {r0, r1, r4}
 8002ef8:	6812      	ldr	r2, [r2, #0]
 8002efa:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002efc:	2300      	movs	r3, #0
 8002efe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f00:	2300      	movs	r3, #0
 8002f02:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f04:	2300      	movs	r3, #0
 8002f06:	637b      	str	r3, [r7, #52]	; 0x34
 8002f08:	2300      	movs	r3, #0
 8002f0a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8002f10:	4b2e      	ldr	r3, [pc, #184]	; (8002fcc <HAL_RCC_GetSysClockFreq+0xf0>)
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002f16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f18:	220c      	movs	r2, #12
 8002f1a:	4013      	ands	r3, r2
 8002f1c:	2b08      	cmp	r3, #8
 8002f1e:	d006      	beq.n	8002f2e <HAL_RCC_GetSysClockFreq+0x52>
 8002f20:	2b0c      	cmp	r3, #12
 8002f22:	d043      	beq.n	8002fac <HAL_RCC_GetSysClockFreq+0xd0>
 8002f24:	2b04      	cmp	r3, #4
 8002f26:	d144      	bne.n	8002fb2 <HAL_RCC_GetSysClockFreq+0xd6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002f28:	4b29      	ldr	r3, [pc, #164]	; (8002fd0 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002f2a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002f2c:	e044      	b.n	8002fb8 <HAL_RCC_GetSysClockFreq+0xdc>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002f2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f30:	0c9b      	lsrs	r3, r3, #18
 8002f32:	220f      	movs	r2, #15
 8002f34:	4013      	ands	r3, r2
 8002f36:	2214      	movs	r2, #20
 8002f38:	18ba      	adds	r2, r7, r2
 8002f3a:	5cd3      	ldrb	r3, [r2, r3]
 8002f3c:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002f3e:	4b23      	ldr	r3, [pc, #140]	; (8002fcc <HAL_RCC_GetSysClockFreq+0xf0>)
 8002f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f42:	220f      	movs	r2, #15
 8002f44:	4013      	ands	r3, r2
 8002f46:	1d3a      	adds	r2, r7, #4
 8002f48:	5cd3      	ldrb	r3, [r2, r3]
 8002f4a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002f4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f4e:	23c0      	movs	r3, #192	; 0xc0
 8002f50:	025b      	lsls	r3, r3, #9
 8002f52:	401a      	ands	r2, r3
 8002f54:	2380      	movs	r3, #128	; 0x80
 8002f56:	025b      	lsls	r3, r3, #9
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	d109      	bne.n	8002f70 <HAL_RCC_GetSysClockFreq+0x94>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002f5c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002f5e:	481c      	ldr	r0, [pc, #112]	; (8002fd0 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002f60:	f7fd f8d2 	bl	8000108 <__udivsi3>
 8002f64:	0003      	movs	r3, r0
 8002f66:	001a      	movs	r2, r3
 8002f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f6a:	4353      	muls	r3, r2
 8002f6c:	637b      	str	r3, [r7, #52]	; 0x34
 8002f6e:	e01a      	b.n	8002fa6 <HAL_RCC_GetSysClockFreq+0xca>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8002f70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f72:	23c0      	movs	r3, #192	; 0xc0
 8002f74:	025b      	lsls	r3, r3, #9
 8002f76:	401a      	ands	r2, r3
 8002f78:	23c0      	movs	r3, #192	; 0xc0
 8002f7a:	025b      	lsls	r3, r3, #9
 8002f7c:	429a      	cmp	r2, r3
 8002f7e:	d109      	bne.n	8002f94 <HAL_RCC_GetSysClockFreq+0xb8>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002f80:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002f82:	4814      	ldr	r0, [pc, #80]	; (8002fd4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f84:	f7fd f8c0 	bl	8000108 <__udivsi3>
 8002f88:	0003      	movs	r3, r0
 8002f8a:	001a      	movs	r2, r3
 8002f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f8e:	4353      	muls	r3, r2
 8002f90:	637b      	str	r3, [r7, #52]	; 0x34
 8002f92:	e008      	b.n	8002fa6 <HAL_RCC_GetSysClockFreq+0xca>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002f94:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002f96:	480e      	ldr	r0, [pc, #56]	; (8002fd0 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002f98:	f7fd f8b6 	bl	8000108 <__udivsi3>
 8002f9c:	0003      	movs	r3, r0
 8002f9e:	001a      	movs	r2, r3
 8002fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa2:	4353      	muls	r3, r2
 8002fa4:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8002fa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fa8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002faa:	e005      	b.n	8002fb8 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8002fac:	4b09      	ldr	r3, [pc, #36]	; (8002fd4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002fae:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002fb0:	e002      	b.n	8002fb8 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002fb2:	4b07      	ldr	r3, [pc, #28]	; (8002fd0 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002fb4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002fb6:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002fba:	0018      	movs	r0, r3
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	b00f      	add	sp, #60	; 0x3c
 8002fc0:	bd90      	pop	{r4, r7, pc}
 8002fc2:	46c0      	nop			; (mov r8, r8)
 8002fc4:	08004ee4 	.word	0x08004ee4
 8002fc8:	08004ef4 	.word	0x08004ef4
 8002fcc:	40021000 	.word	0x40021000
 8002fd0:	007a1200 	.word	0x007a1200
 8002fd4:	02dc6c00 	.word	0x02dc6c00

08002fd8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002fdc:	4b02      	ldr	r3, [pc, #8]	; (8002fe8 <HAL_RCC_GetHCLKFreq+0x10>)
 8002fde:	681b      	ldr	r3, [r3, #0]
}
 8002fe0:	0018      	movs	r0, r3
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}
 8002fe6:	46c0      	nop			; (mov r8, r8)
 8002fe8:	20000000 	.word	0x20000000

08002fec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002ff0:	f7ff fff2 	bl	8002fd8 <HAL_RCC_GetHCLKFreq>
 8002ff4:	0001      	movs	r1, r0
 8002ff6:	4b06      	ldr	r3, [pc, #24]	; (8003010 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	0a1b      	lsrs	r3, r3, #8
 8002ffc:	2207      	movs	r2, #7
 8002ffe:	4013      	ands	r3, r2
 8003000:	4a04      	ldr	r2, [pc, #16]	; (8003014 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003002:	5cd3      	ldrb	r3, [r2, r3]
 8003004:	40d9      	lsrs	r1, r3
 8003006:	000b      	movs	r3, r1
}    
 8003008:	0018      	movs	r0, r3
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}
 800300e:	46c0      	nop			; (mov r8, r8)
 8003010:	40021000 	.word	0x40021000
 8003014:	08004f98 	.word	0x08004f98

08003018 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b086      	sub	sp, #24
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003020:	2300      	movs	r3, #0
 8003022:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8003024:	2300      	movs	r3, #0
 8003026:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	2380      	movs	r3, #128	; 0x80
 800302e:	025b      	lsls	r3, r3, #9
 8003030:	4013      	ands	r3, r2
 8003032:	d100      	bne.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8003034:	e08f      	b.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8003036:	2317      	movs	r3, #23
 8003038:	18fb      	adds	r3, r7, r3
 800303a:	2200      	movs	r2, #0
 800303c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800303e:	4b6f      	ldr	r3, [pc, #444]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003040:	69da      	ldr	r2, [r3, #28]
 8003042:	2380      	movs	r3, #128	; 0x80
 8003044:	055b      	lsls	r3, r3, #21
 8003046:	4013      	ands	r3, r2
 8003048:	d111      	bne.n	800306e <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800304a:	4b6c      	ldr	r3, [pc, #432]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800304c:	69da      	ldr	r2, [r3, #28]
 800304e:	4b6b      	ldr	r3, [pc, #428]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003050:	2180      	movs	r1, #128	; 0x80
 8003052:	0549      	lsls	r1, r1, #21
 8003054:	430a      	orrs	r2, r1
 8003056:	61da      	str	r2, [r3, #28]
 8003058:	4b68      	ldr	r3, [pc, #416]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800305a:	69da      	ldr	r2, [r3, #28]
 800305c:	2380      	movs	r3, #128	; 0x80
 800305e:	055b      	lsls	r3, r3, #21
 8003060:	4013      	ands	r3, r2
 8003062:	60bb      	str	r3, [r7, #8]
 8003064:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003066:	2317      	movs	r3, #23
 8003068:	18fb      	adds	r3, r7, r3
 800306a:	2201      	movs	r2, #1
 800306c:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800306e:	4b64      	ldr	r3, [pc, #400]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8003070:	681a      	ldr	r2, [r3, #0]
 8003072:	2380      	movs	r3, #128	; 0x80
 8003074:	005b      	lsls	r3, r3, #1
 8003076:	4013      	ands	r3, r2
 8003078:	d11a      	bne.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800307a:	4b61      	ldr	r3, [pc, #388]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 800307c:	681a      	ldr	r2, [r3, #0]
 800307e:	4b60      	ldr	r3, [pc, #384]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8003080:	2180      	movs	r1, #128	; 0x80
 8003082:	0049      	lsls	r1, r1, #1
 8003084:	430a      	orrs	r2, r1
 8003086:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003088:	f7fe f8de 	bl	8001248 <HAL_GetTick>
 800308c:	0003      	movs	r3, r0
 800308e:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003090:	e008      	b.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003092:	f7fe f8d9 	bl	8001248 <HAL_GetTick>
 8003096:	0002      	movs	r2, r0
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	1ad3      	subs	r3, r2, r3
 800309c:	2b64      	cmp	r3, #100	; 0x64
 800309e:	d901      	bls.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 80030a0:	2303      	movs	r3, #3
 80030a2:	e0a6      	b.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0x1da>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030a4:	4b56      	ldr	r3, [pc, #344]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	2380      	movs	r3, #128	; 0x80
 80030aa:	005b      	lsls	r3, r3, #1
 80030ac:	4013      	ands	r3, r2
 80030ae:	d0f0      	beq.n	8003092 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80030b0:	4b52      	ldr	r3, [pc, #328]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80030b2:	6a1a      	ldr	r2, [r3, #32]
 80030b4:	23c0      	movs	r3, #192	; 0xc0
 80030b6:	009b      	lsls	r3, r3, #2
 80030b8:	4013      	ands	r3, r2
 80030ba:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d034      	beq.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x114>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	685a      	ldr	r2, [r3, #4]
 80030c6:	23c0      	movs	r3, #192	; 0xc0
 80030c8:	009b      	lsls	r3, r3, #2
 80030ca:	4013      	ands	r3, r2
 80030cc:	68fa      	ldr	r2, [r7, #12]
 80030ce:	429a      	cmp	r2, r3
 80030d0:	d02c      	beq.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80030d2:	4b4a      	ldr	r3, [pc, #296]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80030d4:	6a1b      	ldr	r3, [r3, #32]
 80030d6:	4a4b      	ldr	r2, [pc, #300]	; (8003204 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 80030d8:	4013      	ands	r3, r2
 80030da:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80030dc:	4b47      	ldr	r3, [pc, #284]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80030de:	6a1a      	ldr	r2, [r3, #32]
 80030e0:	4b46      	ldr	r3, [pc, #280]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80030e2:	2180      	movs	r1, #128	; 0x80
 80030e4:	0249      	lsls	r1, r1, #9
 80030e6:	430a      	orrs	r2, r1
 80030e8:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80030ea:	4b44      	ldr	r3, [pc, #272]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80030ec:	6a1a      	ldr	r2, [r3, #32]
 80030ee:	4b43      	ldr	r3, [pc, #268]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80030f0:	4945      	ldr	r1, [pc, #276]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 80030f2:	400a      	ands	r2, r1
 80030f4:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80030f6:	4b41      	ldr	r3, [pc, #260]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80030f8:	68fa      	ldr	r2, [r7, #12]
 80030fa:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	2201      	movs	r2, #1
 8003100:	4013      	ands	r3, r2
 8003102:	d013      	beq.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003104:	f7fe f8a0 	bl	8001248 <HAL_GetTick>
 8003108:	0003      	movs	r3, r0
 800310a:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800310c:	e009      	b.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800310e:	f7fe f89b 	bl	8001248 <HAL_GetTick>
 8003112:	0002      	movs	r2, r0
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	1ad3      	subs	r3, r2, r3
 8003118:	4a3c      	ldr	r2, [pc, #240]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d901      	bls.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 800311e:	2303      	movs	r3, #3
 8003120:	e067      	b.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0x1da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003122:	4b36      	ldr	r3, [pc, #216]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003124:	6a1b      	ldr	r3, [r3, #32]
 8003126:	2202      	movs	r2, #2
 8003128:	4013      	ands	r3, r2
 800312a:	d0f0      	beq.n	800310e <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800312c:	4b33      	ldr	r3, [pc, #204]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800312e:	6a1b      	ldr	r3, [r3, #32]
 8003130:	4a34      	ldr	r2, [pc, #208]	; (8003204 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8003132:	4013      	ands	r3, r2
 8003134:	0019      	movs	r1, r3
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	685a      	ldr	r2, [r3, #4]
 800313a:	4b30      	ldr	r3, [pc, #192]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800313c:	430a      	orrs	r2, r1
 800313e:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003140:	2317      	movs	r3, #23
 8003142:	18fb      	adds	r3, r7, r3
 8003144:	781b      	ldrb	r3, [r3, #0]
 8003146:	2b01      	cmp	r3, #1
 8003148:	d105      	bne.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800314a:	4b2c      	ldr	r3, [pc, #176]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800314c:	69da      	ldr	r2, [r3, #28]
 800314e:	4b2b      	ldr	r3, [pc, #172]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003150:	492f      	ldr	r1, [pc, #188]	; (8003210 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003152:	400a      	ands	r2, r1
 8003154:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	2201      	movs	r2, #1
 800315c:	4013      	ands	r3, r2
 800315e:	d009      	beq.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003160:	4b26      	ldr	r3, [pc, #152]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003164:	2203      	movs	r2, #3
 8003166:	4393      	bics	r3, r2
 8003168:	0019      	movs	r1, r3
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	689a      	ldr	r2, [r3, #8]
 800316e:	4b23      	ldr	r3, [pc, #140]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003170:	430a      	orrs	r2, r1
 8003172:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	2202      	movs	r2, #2
 800317a:	4013      	ands	r3, r2
 800317c:	d009      	beq.n	8003192 <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800317e:	4b1f      	ldr	r3, [pc, #124]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003182:	4a24      	ldr	r2, [pc, #144]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003184:	4013      	ands	r3, r2
 8003186:	0019      	movs	r1, r3
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	68da      	ldr	r2, [r3, #12]
 800318c:	4b1b      	ldr	r3, [pc, #108]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800318e:	430a      	orrs	r2, r1
 8003190:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	2220      	movs	r2, #32
 8003198:	4013      	ands	r3, r2
 800319a:	d009      	beq.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800319c:	4b17      	ldr	r3, [pc, #92]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800319e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a0:	2210      	movs	r2, #16
 80031a2:	4393      	bics	r3, r2
 80031a4:	0019      	movs	r1, r3
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	691a      	ldr	r2, [r3, #16]
 80031aa:	4b14      	ldr	r3, [pc, #80]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80031ac:	430a      	orrs	r2, r1
 80031ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681a      	ldr	r2, [r3, #0]
 80031b4:	2380      	movs	r3, #128	; 0x80
 80031b6:	029b      	lsls	r3, r3, #10
 80031b8:	4013      	ands	r3, r2
 80031ba:	d009      	beq.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80031bc:	4b0f      	ldr	r3, [pc, #60]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80031be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c0:	2280      	movs	r2, #128	; 0x80
 80031c2:	4393      	bics	r3, r2
 80031c4:	0019      	movs	r1, r3
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	699a      	ldr	r2, [r3, #24]
 80031ca:	4b0c      	ldr	r3, [pc, #48]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80031cc:	430a      	orrs	r2, r1
 80031ce:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	2380      	movs	r3, #128	; 0x80
 80031d6:	00db      	lsls	r3, r3, #3
 80031d8:	4013      	ands	r3, r2
 80031da:	d009      	beq.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80031dc:	4b07      	ldr	r3, [pc, #28]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80031de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e0:	2240      	movs	r2, #64	; 0x40
 80031e2:	4393      	bics	r3, r2
 80031e4:	0019      	movs	r1, r3
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	695a      	ldr	r2, [r3, #20]
 80031ea:	4b04      	ldr	r3, [pc, #16]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80031ec:	430a      	orrs	r2, r1
 80031ee:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80031f0:	2300      	movs	r3, #0
}
 80031f2:	0018      	movs	r0, r3
 80031f4:	46bd      	mov	sp, r7
 80031f6:	b006      	add	sp, #24
 80031f8:	bd80      	pop	{r7, pc}
 80031fa:	46c0      	nop			; (mov r8, r8)
 80031fc:	40021000 	.word	0x40021000
 8003200:	40007000 	.word	0x40007000
 8003204:	fffffcff 	.word	0xfffffcff
 8003208:	fffeffff 	.word	0xfffeffff
 800320c:	00001388 	.word	0x00001388
 8003210:	efffffff 	.word	0xefffffff
 8003214:	fffcffff 	.word	0xfffcffff

08003218 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b082      	sub	sp, #8
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d101      	bne.n	800322a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	e044      	b.n	80032b4 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800322e:	2b00      	cmp	r3, #0
 8003230:	d107      	bne.n	8003242 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2270      	movs	r2, #112	; 0x70
 8003236:	2100      	movs	r1, #0
 8003238:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	0018      	movs	r0, r3
 800323e:	f7fd fe8f 	bl	8000f60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2224      	movs	r2, #36	; 0x24
 8003246:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	681a      	ldr	r2, [r3, #0]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	2101      	movs	r1, #1
 8003254:	438a      	bics	r2, r1
 8003256:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	0018      	movs	r0, r3
 800325c:	f000 fa1c 	bl	8003698 <UART_SetConfig>
 8003260:	0003      	movs	r3, r0
 8003262:	2b01      	cmp	r3, #1
 8003264:	d101      	bne.n	800326a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e024      	b.n	80032b4 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800326e:	2b00      	cmp	r3, #0
 8003270:	d003      	beq.n	800327a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	0018      	movs	r0, r3
 8003276:	f000 fbdb 	bl	8003a30 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	685a      	ldr	r2, [r3, #4]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	490d      	ldr	r1, [pc, #52]	; (80032bc <HAL_UART_Init+0xa4>)
 8003286:	400a      	ands	r2, r1
 8003288:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	689a      	ldr	r2, [r3, #8]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	212a      	movs	r1, #42	; 0x2a
 8003296:	438a      	bics	r2, r1
 8003298:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	2101      	movs	r1, #1
 80032a6:	430a      	orrs	r2, r1
 80032a8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	0018      	movs	r0, r3
 80032ae:	f000 fc73 	bl	8003b98 <UART_CheckIdleState>
 80032b2:	0003      	movs	r3, r0
}
 80032b4:	0018      	movs	r0, r3
 80032b6:	46bd      	mov	sp, r7
 80032b8:	b002      	add	sp, #8
 80032ba:	bd80      	pop	{r7, pc}
 80032bc:	ffffb7ff 	.word	0xffffb7ff

080032c0 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b084      	sub	sp, #16
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	60f8      	str	r0, [r7, #12]
 80032c8:	60b9      	str	r1, [r7, #8]
 80032ca:	1dbb      	adds	r3, r7, #6
 80032cc:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80032d2:	2b20      	cmp	r3, #32
 80032d4:	d000      	beq.n	80032d8 <HAL_UART_Receive_DMA+0x18>
 80032d6:	e07f      	b.n	80033d8 <HAL_UART_Receive_DMA+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d003      	beq.n	80032e6 <HAL_UART_Receive_DMA+0x26>
 80032de:	1dbb      	adds	r3, r7, #6
 80032e0:	881b      	ldrh	r3, [r3, #0]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d101      	bne.n	80032ea <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	e077      	b.n	80033da <HAL_UART_Receive_DMA+0x11a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	689a      	ldr	r2, [r3, #8]
 80032ee:	2380      	movs	r3, #128	; 0x80
 80032f0:	015b      	lsls	r3, r3, #5
 80032f2:	429a      	cmp	r2, r3
 80032f4:	d109      	bne.n	800330a <HAL_UART_Receive_DMA+0x4a>
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	691b      	ldr	r3, [r3, #16]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d105      	bne.n	800330a <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	2201      	movs	r2, #1
 8003302:	4013      	ands	r3, r2
 8003304:	d001      	beq.n	800330a <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	e067      	b.n	80033da <HAL_UART_Receive_DMA+0x11a>
      }
    }

    __HAL_LOCK(huart);
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	2270      	movs	r2, #112	; 0x70
 800330e:	5c9b      	ldrb	r3, [r3, r2]
 8003310:	2b01      	cmp	r3, #1
 8003312:	d101      	bne.n	8003318 <HAL_UART_Receive_DMA+0x58>
 8003314:	2302      	movs	r3, #2
 8003316:	e060      	b.n	80033da <HAL_UART_Receive_DMA+0x11a>
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	2270      	movs	r2, #112	; 0x70
 800331c:	2101      	movs	r1, #1
 800331e:	5499      	strb	r1, [r3, r2]

    huart->pRxBuffPtr = pData;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	68ba      	ldr	r2, [r7, #8]
 8003324:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	1dba      	adds	r2, r7, #6
 800332a:	2158      	movs	r1, #88	; 0x58
 800332c:	8812      	ldrh	r2, [r2, #0]
 800332e:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	2200      	movs	r2, #0
 8003334:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	2222      	movs	r2, #34	; 0x22
 800333a:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmarx != NULL)
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003340:	2b00      	cmp	r3, #0
 8003342:	d02a      	beq.n	800339a <HAL_UART_Receive_DMA+0xda>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003348:	4a26      	ldr	r2, [pc, #152]	; (80033e4 <HAL_UART_Receive_DMA+0x124>)
 800334a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003350:	4a25      	ldr	r2, [pc, #148]	; (80033e8 <HAL_UART_Receive_DMA+0x128>)
 8003352:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003358:	4a24      	ldr	r2, [pc, #144]	; (80033ec <HAL_UART_Receive_DMA+0x12c>)
 800335a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003360:	2200      	movs	r2, #0
 8003362:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	3324      	adds	r3, #36	; 0x24
 800336e:	0019      	movs	r1, r3
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003374:	001a      	movs	r2, r3
 8003376:	1dbb      	adds	r3, r7, #6
 8003378:	881b      	ldrh	r3, [r3, #0]
 800337a:	f7fe f8b7 	bl	80014ec <HAL_DMA_Start_IT>
 800337e:	1e03      	subs	r3, r0, #0
 8003380:	d00b      	beq.n	800339a <HAL_UART_Receive_DMA+0xda>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2210      	movs	r2, #16
 8003386:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	2270      	movs	r2, #112	; 0x70
 800338c:	2100      	movs	r1, #0
 800338e:	5499      	strb	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	2220      	movs	r2, #32
 8003394:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	e01f      	b.n	80033da <HAL_UART_Receive_DMA+0x11a>
      }
    }
    __HAL_UNLOCK(huart);
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	2270      	movs	r2, #112	; 0x70
 800339e:	2100      	movs	r1, #0
 80033a0:	5499      	strb	r1, [r3, r2]

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	681a      	ldr	r2, [r3, #0]
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	2180      	movs	r1, #128	; 0x80
 80033ae:	0049      	lsls	r1, r1, #1
 80033b0:	430a      	orrs	r2, r1
 80033b2:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	689a      	ldr	r2, [r3, #8]
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	2101      	movs	r1, #1
 80033c0:	430a      	orrs	r2, r1
 80033c2:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	689a      	ldr	r2, [r3, #8]
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	2140      	movs	r1, #64	; 0x40
 80033d0:	430a      	orrs	r2, r1
 80033d2:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 80033d4:	2300      	movs	r3, #0
 80033d6:	e000      	b.n	80033da <HAL_UART_Receive_DMA+0x11a>
  }
  else
  {
    return HAL_BUSY;
 80033d8:	2302      	movs	r3, #2
  }
}
 80033da:	0018      	movs	r0, r3
 80033dc:	46bd      	mov	sp, r7
 80033de:	b004      	add	sp, #16
 80033e0:	bd80      	pop	{r7, pc}
 80033e2:	46c0      	nop			; (mov r8, r8)
 80033e4:	08003d89 	.word	0x08003d89
 80033e8:	08003df1 	.word	0x08003df1
 80033ec:	08003e0f 	.word	0x08003e0f

080033f0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b088      	sub	sp, #32
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	69db      	ldr	r3, [r3, #28]
 80033fe:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003410:	69fb      	ldr	r3, [r7, #28]
 8003412:	4a93      	ldr	r2, [pc, #588]	; (8003660 <HAL_UART_IRQHandler+0x270>)
 8003414:	4013      	ands	r3, r2
 8003416:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d112      	bne.n	8003444 <HAL_UART_IRQHandler+0x54>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800341e:	69fb      	ldr	r3, [r7, #28]
 8003420:	2220      	movs	r2, #32
 8003422:	4013      	ands	r3, r2
 8003424:	d00e      	beq.n	8003444 <HAL_UART_IRQHandler+0x54>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003426:	69bb      	ldr	r3, [r7, #24]
 8003428:	2220      	movs	r2, #32
 800342a:	4013      	ands	r3, r2
 800342c:	d00a      	beq.n	8003444 <HAL_UART_IRQHandler+0x54>
    {
      if (huart->RxISR != NULL)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003432:	2b00      	cmp	r3, #0
 8003434:	d100      	bne.n	8003438 <HAL_UART_IRQHandler+0x48>
 8003436:	e10b      	b.n	8003650 <HAL_UART_IRQHandler+0x260>
      {
        huart->RxISR(huart);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800343c:	687a      	ldr	r2, [r7, #4]
 800343e:	0010      	movs	r0, r2
 8003440:	4798      	blx	r3
      }
      return;
 8003442:	e105      	b.n	8003650 <HAL_UART_IRQHandler+0x260>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d100      	bne.n	800344c <HAL_UART_IRQHandler+0x5c>
 800344a:	e0cd      	b.n	80035e8 <HAL_UART_IRQHandler+0x1f8>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	2201      	movs	r2, #1
 8003450:	4013      	ands	r3, r2
 8003452:	d105      	bne.n	8003460 <HAL_UART_IRQHandler+0x70>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8003454:	69ba      	ldr	r2, [r7, #24]
 8003456:	2390      	movs	r3, #144	; 0x90
 8003458:	005b      	lsls	r3, r3, #1
 800345a:	4013      	ands	r3, r2
 800345c:	d100      	bne.n	8003460 <HAL_UART_IRQHandler+0x70>
 800345e:	e0c3      	b.n	80035e8 <HAL_UART_IRQHandler+0x1f8>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003460:	69fb      	ldr	r3, [r7, #28]
 8003462:	2201      	movs	r2, #1
 8003464:	4013      	ands	r3, r2
 8003466:	d00e      	beq.n	8003486 <HAL_UART_IRQHandler+0x96>
 8003468:	69ba      	ldr	r2, [r7, #24]
 800346a:	2380      	movs	r3, #128	; 0x80
 800346c:	005b      	lsls	r3, r3, #1
 800346e:	4013      	ands	r3, r2
 8003470:	d009      	beq.n	8003486 <HAL_UART_IRQHandler+0x96>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	2201      	movs	r2, #1
 8003478:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800347e:	2201      	movs	r2, #1
 8003480:	431a      	orrs	r2, r3
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003486:	69fb      	ldr	r3, [r7, #28]
 8003488:	2202      	movs	r2, #2
 800348a:	4013      	ands	r3, r2
 800348c:	d00d      	beq.n	80034aa <HAL_UART_IRQHandler+0xba>
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	2201      	movs	r2, #1
 8003492:	4013      	ands	r3, r2
 8003494:	d009      	beq.n	80034aa <HAL_UART_IRQHandler+0xba>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	2202      	movs	r2, #2
 800349c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80034a2:	2204      	movs	r2, #4
 80034a4:	431a      	orrs	r2, r3
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80034aa:	69fb      	ldr	r3, [r7, #28]
 80034ac:	2204      	movs	r2, #4
 80034ae:	4013      	ands	r3, r2
 80034b0:	d00d      	beq.n	80034ce <HAL_UART_IRQHandler+0xde>
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	2201      	movs	r2, #1
 80034b6:	4013      	ands	r3, r2
 80034b8:	d009      	beq.n	80034ce <HAL_UART_IRQHandler+0xde>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	2204      	movs	r2, #4
 80034c0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80034c6:	2202      	movs	r2, #2
 80034c8:	431a      	orrs	r2, r3
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80034ce:	69fb      	ldr	r3, [r7, #28]
 80034d0:	2208      	movs	r2, #8
 80034d2:	4013      	ands	r3, r2
 80034d4:	d011      	beq.n	80034fa <HAL_UART_IRQHandler+0x10a>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80034d6:	69bb      	ldr	r3, [r7, #24]
 80034d8:	2220      	movs	r2, #32
 80034da:	4013      	ands	r3, r2
 80034dc:	d103      	bne.n	80034e6 <HAL_UART_IRQHandler+0xf6>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	2201      	movs	r2, #1
 80034e2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80034e4:	d009      	beq.n	80034fa <HAL_UART_IRQHandler+0x10a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	2208      	movs	r2, #8
 80034ec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80034f2:	2208      	movs	r2, #8
 80034f4:	431a      	orrs	r2, r3
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80034fa:	69fa      	ldr	r2, [r7, #28]
 80034fc:	2380      	movs	r3, #128	; 0x80
 80034fe:	011b      	lsls	r3, r3, #4
 8003500:	4013      	ands	r3, r2
 8003502:	d00f      	beq.n	8003524 <HAL_UART_IRQHandler+0x134>
 8003504:	69ba      	ldr	r2, [r7, #24]
 8003506:	2380      	movs	r3, #128	; 0x80
 8003508:	04db      	lsls	r3, r3, #19
 800350a:	4013      	ands	r3, r2
 800350c:	d00a      	beq.n	8003524 <HAL_UART_IRQHandler+0x134>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	2280      	movs	r2, #128	; 0x80
 8003514:	0112      	lsls	r2, r2, #4
 8003516:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800351c:	2220      	movs	r2, #32
 800351e:	431a      	orrs	r2, r3
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003528:	2b00      	cmp	r3, #0
 800352a:	d100      	bne.n	800352e <HAL_UART_IRQHandler+0x13e>
 800352c:	e092      	b.n	8003654 <HAL_UART_IRQHandler+0x264>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800352e:	69fb      	ldr	r3, [r7, #28]
 8003530:	2220      	movs	r2, #32
 8003532:	4013      	ands	r3, r2
 8003534:	d00c      	beq.n	8003550 <HAL_UART_IRQHandler+0x160>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003536:	69bb      	ldr	r3, [r7, #24]
 8003538:	2220      	movs	r2, #32
 800353a:	4013      	ands	r3, r2
 800353c:	d008      	beq.n	8003550 <HAL_UART_IRQHandler+0x160>
      {
        if (huart->RxISR != NULL)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003542:	2b00      	cmp	r3, #0
 8003544:	d004      	beq.n	8003550 <HAL_UART_IRQHandler+0x160>
        {
          huart->RxISR(huart);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800354a:	687a      	ldr	r2, [r7, #4]
 800354c:	0010      	movs	r0, r2
 800354e:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003554:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	2240      	movs	r2, #64	; 0x40
 800355e:	4013      	ands	r3, r2
 8003560:	2b40      	cmp	r3, #64	; 0x40
 8003562:	d003      	beq.n	800356c <HAL_UART_IRQHandler+0x17c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2228      	movs	r2, #40	; 0x28
 8003568:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800356a:	d033      	beq.n	80035d4 <HAL_UART_IRQHandler+0x1e4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	0018      	movs	r0, r3
 8003570:	f000 fbea 	bl	8003d48 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	2240      	movs	r2, #64	; 0x40
 800357c:	4013      	ands	r3, r2
 800357e:	2b40      	cmp	r3, #64	; 0x40
 8003580:	d123      	bne.n	80035ca <HAL_UART_IRQHandler+0x1da>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	689a      	ldr	r2, [r3, #8]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	2140      	movs	r1, #64	; 0x40
 800358e:	438a      	bics	r2, r1
 8003590:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003596:	2b00      	cmp	r3, #0
 8003598:	d012      	beq.n	80035c0 <HAL_UART_IRQHandler+0x1d0>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800359e:	4a31      	ldr	r2, [pc, #196]	; (8003664 <HAL_UART_IRQHandler+0x274>)
 80035a0:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035a6:	0018      	movs	r0, r3
 80035a8:	f7fe f806 	bl	80015b8 <HAL_DMA_Abort_IT>
 80035ac:	1e03      	subs	r3, r0, #0
 80035ae:	d019      	beq.n	80035e4 <HAL_UART_IRQHandler+0x1f4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035ba:	0018      	movs	r0, r3
 80035bc:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035be:	e011      	b.n	80035e4 <HAL_UART_IRQHandler+0x1f4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	0018      	movs	r0, r3
 80035c4:	f000 f860 	bl	8003688 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035c8:	e00c      	b.n	80035e4 <HAL_UART_IRQHandler+0x1f4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	0018      	movs	r0, r3
 80035ce:	f000 f85b 	bl	8003688 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035d2:	e007      	b.n	80035e4 <HAL_UART_IRQHandler+0x1f4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	0018      	movs	r0, r3
 80035d8:	f000 f856 	bl	8003688 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2200      	movs	r2, #0
 80035e0:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 80035e2:	e037      	b.n	8003654 <HAL_UART_IRQHandler+0x264>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035e4:	46c0      	nop			; (mov r8, r8)
    return;
 80035e6:	e035      	b.n	8003654 <HAL_UART_IRQHandler+0x264>

  } /* End if some error occurs */
#if defined(USART_CR1_UESM)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80035e8:	69fa      	ldr	r2, [r7, #28]
 80035ea:	2380      	movs	r3, #128	; 0x80
 80035ec:	035b      	lsls	r3, r3, #13
 80035ee:	4013      	ands	r3, r2
 80035f0:	d00e      	beq.n	8003610 <HAL_UART_IRQHandler+0x220>
 80035f2:	697a      	ldr	r2, [r7, #20]
 80035f4:	2380      	movs	r3, #128	; 0x80
 80035f6:	03db      	lsls	r3, r3, #15
 80035f8:	4013      	ands	r3, r2
 80035fa:	d009      	beq.n	8003610 <HAL_UART_IRQHandler+0x220>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	2280      	movs	r2, #128	; 0x80
 8003602:	0352      	lsls	r2, r2, #13
 8003604:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	0018      	movs	r0, r3
 800360a:	f000 fc70 	bl	8003eee <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800360e:	e024      	b.n	800365a <HAL_UART_IRQHandler+0x26a>
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003610:	69fb      	ldr	r3, [r7, #28]
 8003612:	2280      	movs	r2, #128	; 0x80
 8003614:	4013      	ands	r3, r2
 8003616:	d00d      	beq.n	8003634 <HAL_UART_IRQHandler+0x244>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003618:	69bb      	ldr	r3, [r7, #24]
 800361a:	2280      	movs	r2, #128	; 0x80
 800361c:	4013      	ands	r3, r2
 800361e:	d009      	beq.n	8003634 <HAL_UART_IRQHandler+0x244>
  {
    if (huart->TxISR != NULL)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003624:	2b00      	cmp	r3, #0
 8003626:	d017      	beq.n	8003658 <HAL_UART_IRQHandler+0x268>
    {
      huart->TxISR(huart);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800362c:	687a      	ldr	r2, [r7, #4]
 800362e:	0010      	movs	r0, r2
 8003630:	4798      	blx	r3
    }
    return;
 8003632:	e011      	b.n	8003658 <HAL_UART_IRQHandler+0x268>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003634:	69fb      	ldr	r3, [r7, #28]
 8003636:	2240      	movs	r2, #64	; 0x40
 8003638:	4013      	ands	r3, r2
 800363a:	d00e      	beq.n	800365a <HAL_UART_IRQHandler+0x26a>
 800363c:	69bb      	ldr	r3, [r7, #24]
 800363e:	2240      	movs	r2, #64	; 0x40
 8003640:	4013      	ands	r3, r2
 8003642:	d00a      	beq.n	800365a <HAL_UART_IRQHandler+0x26a>
  {
    UART_EndTransmit_IT(huart);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	0018      	movs	r0, r3
 8003648:	f000 fc37 	bl	8003eba <UART_EndTransmit_IT>
    return;
 800364c:	46c0      	nop			; (mov r8, r8)
 800364e:	e004      	b.n	800365a <HAL_UART_IRQHandler+0x26a>
      return;
 8003650:	46c0      	nop			; (mov r8, r8)
 8003652:	e002      	b.n	800365a <HAL_UART_IRQHandler+0x26a>
    return;
 8003654:	46c0      	nop			; (mov r8, r8)
 8003656:	e000      	b.n	800365a <HAL_UART_IRQHandler+0x26a>
    return;
 8003658:	46c0      	nop			; (mov r8, r8)
  }

}
 800365a:	46bd      	mov	sp, r7
 800365c:	b008      	add	sp, #32
 800365e:	bd80      	pop	{r7, pc}
 8003660:	0000080f 	.word	0x0000080f
 8003664:	08003e8d 	.word	0x08003e8d

08003668 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b082      	sub	sp, #8
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003670:	46c0      	nop			; (mov r8, r8)
 8003672:	46bd      	mov	sp, r7
 8003674:	b002      	add	sp, #8
 8003676:	bd80      	pop	{r7, pc}

08003678 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b082      	sub	sp, #8
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8003680:	46c0      	nop			; (mov r8, r8)
 8003682:	46bd      	mov	sp, r7
 8003684:	b002      	add	sp, #8
 8003686:	bd80      	pop	{r7, pc}

08003688 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b082      	sub	sp, #8
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003690:	46c0      	nop			; (mov r8, r8)
 8003692:	46bd      	mov	sp, r7
 8003694:	b002      	add	sp, #8
 8003696:	bd80      	pop	{r7, pc}

08003698 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b088      	sub	sp, #32
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80036a0:	2300      	movs	r3, #0
 80036a2:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 80036a4:	2317      	movs	r3, #23
 80036a6:	18fb      	adds	r3, r7, r3
 80036a8:	2200      	movs	r2, #0
 80036aa:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	689a      	ldr	r2, [r3, #8]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	691b      	ldr	r3, [r3, #16]
 80036b4:	431a      	orrs	r2, r3
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	695b      	ldr	r3, [r3, #20]
 80036ba:	431a      	orrs	r2, r3
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	69db      	ldr	r3, [r3, #28]
 80036c0:	4313      	orrs	r3, r2
 80036c2:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4ac5      	ldr	r2, [pc, #788]	; (80039e0 <UART_SetConfig+0x348>)
 80036cc:	4013      	ands	r3, r2
 80036ce:	0019      	movs	r1, r3
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	693a      	ldr	r2, [r7, #16]
 80036d6:	430a      	orrs	r2, r1
 80036d8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	4ac0      	ldr	r2, [pc, #768]	; (80039e4 <UART_SetConfig+0x34c>)
 80036e2:	4013      	ands	r3, r2
 80036e4:	0019      	movs	r1, r3
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	68da      	ldr	r2, [r3, #12]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	430a      	orrs	r2, r1
 80036f0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	699b      	ldr	r3, [r3, #24]
 80036f6:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6a1b      	ldr	r3, [r3, #32]
 80036fc:	693a      	ldr	r2, [r7, #16]
 80036fe:	4313      	orrs	r3, r2
 8003700:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	4ab7      	ldr	r2, [pc, #732]	; (80039e8 <UART_SetConfig+0x350>)
 800370a:	4013      	ands	r3, r2
 800370c:	0019      	movs	r1, r3
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	693a      	ldr	r2, [r7, #16]
 8003714:	430a      	orrs	r2, r1
 8003716:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4ab3      	ldr	r2, [pc, #716]	; (80039ec <UART_SetConfig+0x354>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d125      	bne.n	800376e <UART_SetConfig+0xd6>
 8003722:	4bb3      	ldr	r3, [pc, #716]	; (80039f0 <UART_SetConfig+0x358>)
 8003724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003726:	2203      	movs	r2, #3
 8003728:	4013      	ands	r3, r2
 800372a:	2b01      	cmp	r3, #1
 800372c:	d00f      	beq.n	800374e <UART_SetConfig+0xb6>
 800372e:	d304      	bcc.n	800373a <UART_SetConfig+0xa2>
 8003730:	2b02      	cmp	r3, #2
 8003732:	d011      	beq.n	8003758 <UART_SetConfig+0xc0>
 8003734:	2b03      	cmp	r3, #3
 8003736:	d005      	beq.n	8003744 <UART_SetConfig+0xac>
 8003738:	e013      	b.n	8003762 <UART_SetConfig+0xca>
 800373a:	231f      	movs	r3, #31
 800373c:	18fb      	adds	r3, r7, r3
 800373e:	2200      	movs	r2, #0
 8003740:	701a      	strb	r2, [r3, #0]
 8003742:	e064      	b.n	800380e <UART_SetConfig+0x176>
 8003744:	231f      	movs	r3, #31
 8003746:	18fb      	adds	r3, r7, r3
 8003748:	2202      	movs	r2, #2
 800374a:	701a      	strb	r2, [r3, #0]
 800374c:	e05f      	b.n	800380e <UART_SetConfig+0x176>
 800374e:	231f      	movs	r3, #31
 8003750:	18fb      	adds	r3, r7, r3
 8003752:	2204      	movs	r2, #4
 8003754:	701a      	strb	r2, [r3, #0]
 8003756:	e05a      	b.n	800380e <UART_SetConfig+0x176>
 8003758:	231f      	movs	r3, #31
 800375a:	18fb      	adds	r3, r7, r3
 800375c:	2208      	movs	r2, #8
 800375e:	701a      	strb	r2, [r3, #0]
 8003760:	e055      	b.n	800380e <UART_SetConfig+0x176>
 8003762:	231f      	movs	r3, #31
 8003764:	18fb      	adds	r3, r7, r3
 8003766:	2210      	movs	r2, #16
 8003768:	701a      	strb	r2, [r3, #0]
 800376a:	46c0      	nop			; (mov r8, r8)
 800376c:	e04f      	b.n	800380e <UART_SetConfig+0x176>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4aa0      	ldr	r2, [pc, #640]	; (80039f4 <UART_SetConfig+0x35c>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d132      	bne.n	80037de <UART_SetConfig+0x146>
 8003778:	4b9d      	ldr	r3, [pc, #628]	; (80039f0 <UART_SetConfig+0x358>)
 800377a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800377c:	23c0      	movs	r3, #192	; 0xc0
 800377e:	029b      	lsls	r3, r3, #10
 8003780:	4013      	ands	r3, r2
 8003782:	2280      	movs	r2, #128	; 0x80
 8003784:	0252      	lsls	r2, r2, #9
 8003786:	4293      	cmp	r3, r2
 8003788:	d019      	beq.n	80037be <UART_SetConfig+0x126>
 800378a:	2280      	movs	r2, #128	; 0x80
 800378c:	0252      	lsls	r2, r2, #9
 800378e:	4293      	cmp	r3, r2
 8003790:	d802      	bhi.n	8003798 <UART_SetConfig+0x100>
 8003792:	2b00      	cmp	r3, #0
 8003794:	d009      	beq.n	80037aa <UART_SetConfig+0x112>
 8003796:	e01c      	b.n	80037d2 <UART_SetConfig+0x13a>
 8003798:	2280      	movs	r2, #128	; 0x80
 800379a:	0292      	lsls	r2, r2, #10
 800379c:	4293      	cmp	r3, r2
 800379e:	d013      	beq.n	80037c8 <UART_SetConfig+0x130>
 80037a0:	22c0      	movs	r2, #192	; 0xc0
 80037a2:	0292      	lsls	r2, r2, #10
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d005      	beq.n	80037b4 <UART_SetConfig+0x11c>
 80037a8:	e013      	b.n	80037d2 <UART_SetConfig+0x13a>
 80037aa:	231f      	movs	r3, #31
 80037ac:	18fb      	adds	r3, r7, r3
 80037ae:	2200      	movs	r2, #0
 80037b0:	701a      	strb	r2, [r3, #0]
 80037b2:	e02c      	b.n	800380e <UART_SetConfig+0x176>
 80037b4:	231f      	movs	r3, #31
 80037b6:	18fb      	adds	r3, r7, r3
 80037b8:	2202      	movs	r2, #2
 80037ba:	701a      	strb	r2, [r3, #0]
 80037bc:	e027      	b.n	800380e <UART_SetConfig+0x176>
 80037be:	231f      	movs	r3, #31
 80037c0:	18fb      	adds	r3, r7, r3
 80037c2:	2204      	movs	r2, #4
 80037c4:	701a      	strb	r2, [r3, #0]
 80037c6:	e022      	b.n	800380e <UART_SetConfig+0x176>
 80037c8:	231f      	movs	r3, #31
 80037ca:	18fb      	adds	r3, r7, r3
 80037cc:	2208      	movs	r2, #8
 80037ce:	701a      	strb	r2, [r3, #0]
 80037d0:	e01d      	b.n	800380e <UART_SetConfig+0x176>
 80037d2:	231f      	movs	r3, #31
 80037d4:	18fb      	adds	r3, r7, r3
 80037d6:	2210      	movs	r2, #16
 80037d8:	701a      	strb	r2, [r3, #0]
 80037da:	46c0      	nop			; (mov r8, r8)
 80037dc:	e017      	b.n	800380e <UART_SetConfig+0x176>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a85      	ldr	r2, [pc, #532]	; (80039f8 <UART_SetConfig+0x360>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d104      	bne.n	80037f2 <UART_SetConfig+0x15a>
 80037e8:	231f      	movs	r3, #31
 80037ea:	18fb      	adds	r3, r7, r3
 80037ec:	2200      	movs	r2, #0
 80037ee:	701a      	strb	r2, [r3, #0]
 80037f0:	e00d      	b.n	800380e <UART_SetConfig+0x176>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a81      	ldr	r2, [pc, #516]	; (80039fc <UART_SetConfig+0x364>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d104      	bne.n	8003806 <UART_SetConfig+0x16e>
 80037fc:	231f      	movs	r3, #31
 80037fe:	18fb      	adds	r3, r7, r3
 8003800:	2200      	movs	r2, #0
 8003802:	701a      	strb	r2, [r3, #0]
 8003804:	e003      	b.n	800380e <UART_SetConfig+0x176>
 8003806:	231f      	movs	r3, #31
 8003808:	18fb      	adds	r3, r7, r3
 800380a:	2210      	movs	r2, #16
 800380c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	69da      	ldr	r2, [r3, #28]
 8003812:	2380      	movs	r3, #128	; 0x80
 8003814:	021b      	lsls	r3, r3, #8
 8003816:	429a      	cmp	r2, r3
 8003818:	d000      	beq.n	800381c <UART_SetConfig+0x184>
 800381a:	e07d      	b.n	8003918 <UART_SetConfig+0x280>
  {
    switch (clocksource)
 800381c:	231f      	movs	r3, #31
 800381e:	18fb      	adds	r3, r7, r3
 8003820:	781b      	ldrb	r3, [r3, #0]
 8003822:	2b02      	cmp	r3, #2
 8003824:	d01c      	beq.n	8003860 <UART_SetConfig+0x1c8>
 8003826:	dc02      	bgt.n	800382e <UART_SetConfig+0x196>
 8003828:	2b00      	cmp	r3, #0
 800382a:	d005      	beq.n	8003838 <UART_SetConfig+0x1a0>
 800382c:	e04b      	b.n	80038c6 <UART_SetConfig+0x22e>
 800382e:	2b04      	cmp	r3, #4
 8003830:	d025      	beq.n	800387e <UART_SetConfig+0x1e6>
 8003832:	2b08      	cmp	r3, #8
 8003834:	d037      	beq.n	80038a6 <UART_SetConfig+0x20e>
 8003836:	e046      	b.n	80038c6 <UART_SetConfig+0x22e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003838:	f7ff fbd8 	bl	8002fec <HAL_RCC_GetPCLK1Freq>
 800383c:	0003      	movs	r3, r0
 800383e:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	005a      	lsls	r2, r3, #1
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	085b      	lsrs	r3, r3, #1
 800384a:	18d2      	adds	r2, r2, r3
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	0019      	movs	r1, r3
 8003852:	0010      	movs	r0, r2
 8003854:	f7fc fc58 	bl	8000108 <__udivsi3>
 8003858:	0003      	movs	r3, r0
 800385a:	b29b      	uxth	r3, r3
 800385c:	61bb      	str	r3, [r7, #24]
        break;
 800385e:	e037      	b.n	80038d0 <UART_SetConfig+0x238>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	085b      	lsrs	r3, r3, #1
 8003866:	4a66      	ldr	r2, [pc, #408]	; (8003a00 <UART_SetConfig+0x368>)
 8003868:	189a      	adds	r2, r3, r2
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	0019      	movs	r1, r3
 8003870:	0010      	movs	r0, r2
 8003872:	f7fc fc49 	bl	8000108 <__udivsi3>
 8003876:	0003      	movs	r3, r0
 8003878:	b29b      	uxth	r3, r3
 800387a:	61bb      	str	r3, [r7, #24]
        break;
 800387c:	e028      	b.n	80038d0 <UART_SetConfig+0x238>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800387e:	f7ff fb2d 	bl	8002edc <HAL_RCC_GetSysClockFreq>
 8003882:	0003      	movs	r3, r0
 8003884:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	005a      	lsls	r2, r3, #1
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	085b      	lsrs	r3, r3, #1
 8003890:	18d2      	adds	r2, r2, r3
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	0019      	movs	r1, r3
 8003898:	0010      	movs	r0, r2
 800389a:	f7fc fc35 	bl	8000108 <__udivsi3>
 800389e:	0003      	movs	r3, r0
 80038a0:	b29b      	uxth	r3, r3
 80038a2:	61bb      	str	r3, [r7, #24]
        break;
 80038a4:	e014      	b.n	80038d0 <UART_SetConfig+0x238>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	085b      	lsrs	r3, r3, #1
 80038ac:	2280      	movs	r2, #128	; 0x80
 80038ae:	0252      	lsls	r2, r2, #9
 80038b0:	189a      	adds	r2, r3, r2
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	0019      	movs	r1, r3
 80038b8:	0010      	movs	r0, r2
 80038ba:	f7fc fc25 	bl	8000108 <__udivsi3>
 80038be:	0003      	movs	r3, r0
 80038c0:	b29b      	uxth	r3, r3
 80038c2:	61bb      	str	r3, [r7, #24]
        break;
 80038c4:	e004      	b.n	80038d0 <UART_SetConfig+0x238>
      default:
        ret = HAL_ERROR;
 80038c6:	2317      	movs	r3, #23
 80038c8:	18fb      	adds	r3, r7, r3
 80038ca:	2201      	movs	r2, #1
 80038cc:	701a      	strb	r2, [r3, #0]
        break;
 80038ce:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80038d0:	69bb      	ldr	r3, [r7, #24]
 80038d2:	2b0f      	cmp	r3, #15
 80038d4:	d91b      	bls.n	800390e <UART_SetConfig+0x276>
 80038d6:	69bb      	ldr	r3, [r7, #24]
 80038d8:	4a4a      	ldr	r2, [pc, #296]	; (8003a04 <UART_SetConfig+0x36c>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d817      	bhi.n	800390e <UART_SetConfig+0x276>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80038de:	69bb      	ldr	r3, [r7, #24]
 80038e0:	b29a      	uxth	r2, r3
 80038e2:	200a      	movs	r0, #10
 80038e4:	183b      	adds	r3, r7, r0
 80038e6:	210f      	movs	r1, #15
 80038e8:	438a      	bics	r2, r1
 80038ea:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80038ec:	69bb      	ldr	r3, [r7, #24]
 80038ee:	085b      	lsrs	r3, r3, #1
 80038f0:	b29b      	uxth	r3, r3
 80038f2:	2207      	movs	r2, #7
 80038f4:	4013      	ands	r3, r2
 80038f6:	b299      	uxth	r1, r3
 80038f8:	183b      	adds	r3, r7, r0
 80038fa:	183a      	adds	r2, r7, r0
 80038fc:	8812      	ldrh	r2, [r2, #0]
 80038fe:	430a      	orrs	r2, r1
 8003900:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	183a      	adds	r2, r7, r0
 8003908:	8812      	ldrh	r2, [r2, #0]
 800390a:	60da      	str	r2, [r3, #12]
 800390c:	e082      	b.n	8003a14 <UART_SetConfig+0x37c>
    }
    else
    {
      ret = HAL_ERROR;
 800390e:	2317      	movs	r3, #23
 8003910:	18fb      	adds	r3, r7, r3
 8003912:	2201      	movs	r2, #1
 8003914:	701a      	strb	r2, [r3, #0]
 8003916:	e07d      	b.n	8003a14 <UART_SetConfig+0x37c>
    }
  }
  else
  {
    switch (clocksource)
 8003918:	231f      	movs	r3, #31
 800391a:	18fb      	adds	r3, r7, r3
 800391c:	781b      	ldrb	r3, [r3, #0]
 800391e:	2b02      	cmp	r3, #2
 8003920:	d01b      	beq.n	800395a <UART_SetConfig+0x2c2>
 8003922:	dc02      	bgt.n	800392a <UART_SetConfig+0x292>
 8003924:	2b00      	cmp	r3, #0
 8003926:	d005      	beq.n	8003934 <UART_SetConfig+0x29c>
 8003928:	e049      	b.n	80039be <UART_SetConfig+0x326>
 800392a:	2b04      	cmp	r3, #4
 800392c:	d024      	beq.n	8003978 <UART_SetConfig+0x2e0>
 800392e:	2b08      	cmp	r3, #8
 8003930:	d035      	beq.n	800399e <UART_SetConfig+0x306>
 8003932:	e044      	b.n	80039be <UART_SetConfig+0x326>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003934:	f7ff fb5a 	bl	8002fec <HAL_RCC_GetPCLK1Freq>
 8003938:	0003      	movs	r3, r0
 800393a:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	085a      	lsrs	r2, r3, #1
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	18d2      	adds	r2, r2, r3
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	0019      	movs	r1, r3
 800394c:	0010      	movs	r0, r2
 800394e:	f7fc fbdb 	bl	8000108 <__udivsi3>
 8003952:	0003      	movs	r3, r0
 8003954:	b29b      	uxth	r3, r3
 8003956:	61bb      	str	r3, [r7, #24]
        break;
 8003958:	e036      	b.n	80039c8 <UART_SetConfig+0x330>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	085b      	lsrs	r3, r3, #1
 8003960:	4a29      	ldr	r2, [pc, #164]	; (8003a08 <UART_SetConfig+0x370>)
 8003962:	189a      	adds	r2, r3, r2
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	0019      	movs	r1, r3
 800396a:	0010      	movs	r0, r2
 800396c:	f7fc fbcc 	bl	8000108 <__udivsi3>
 8003970:	0003      	movs	r3, r0
 8003972:	b29b      	uxth	r3, r3
 8003974:	61bb      	str	r3, [r7, #24]
        break;
 8003976:	e027      	b.n	80039c8 <UART_SetConfig+0x330>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003978:	f7ff fab0 	bl	8002edc <HAL_RCC_GetSysClockFreq>
 800397c:	0003      	movs	r3, r0
 800397e:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	085a      	lsrs	r2, r3, #1
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	18d2      	adds	r2, r2, r3
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	0019      	movs	r1, r3
 8003990:	0010      	movs	r0, r2
 8003992:	f7fc fbb9 	bl	8000108 <__udivsi3>
 8003996:	0003      	movs	r3, r0
 8003998:	b29b      	uxth	r3, r3
 800399a:	61bb      	str	r3, [r7, #24]
        break;
 800399c:	e014      	b.n	80039c8 <UART_SetConfig+0x330>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	085b      	lsrs	r3, r3, #1
 80039a4:	2280      	movs	r2, #128	; 0x80
 80039a6:	0212      	lsls	r2, r2, #8
 80039a8:	189a      	adds	r2, r3, r2
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	0019      	movs	r1, r3
 80039b0:	0010      	movs	r0, r2
 80039b2:	f7fc fba9 	bl	8000108 <__udivsi3>
 80039b6:	0003      	movs	r3, r0
 80039b8:	b29b      	uxth	r3, r3
 80039ba:	61bb      	str	r3, [r7, #24]
        break;
 80039bc:	e004      	b.n	80039c8 <UART_SetConfig+0x330>
      default:
        ret = HAL_ERROR;
 80039be:	2317      	movs	r3, #23
 80039c0:	18fb      	adds	r3, r7, r3
 80039c2:	2201      	movs	r2, #1
 80039c4:	701a      	strb	r2, [r3, #0]
        break;
 80039c6:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80039c8:	69bb      	ldr	r3, [r7, #24]
 80039ca:	2b0f      	cmp	r3, #15
 80039cc:	d91e      	bls.n	8003a0c <UART_SetConfig+0x374>
 80039ce:	69bb      	ldr	r3, [r7, #24]
 80039d0:	4a0c      	ldr	r2, [pc, #48]	; (8003a04 <UART_SetConfig+0x36c>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d81a      	bhi.n	8003a0c <UART_SetConfig+0x374>
    {
      huart->Instance->BRR = usartdiv;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	69ba      	ldr	r2, [r7, #24]
 80039dc:	60da      	str	r2, [r3, #12]
 80039de:	e019      	b.n	8003a14 <UART_SetConfig+0x37c>
 80039e0:	efff69f3 	.word	0xefff69f3
 80039e4:	ffffcfff 	.word	0xffffcfff
 80039e8:	fffff4ff 	.word	0xfffff4ff
 80039ec:	40013800 	.word	0x40013800
 80039f0:	40021000 	.word	0x40021000
 80039f4:	40004400 	.word	0x40004400
 80039f8:	40004800 	.word	0x40004800
 80039fc:	40004c00 	.word	0x40004c00
 8003a00:	00f42400 	.word	0x00f42400
 8003a04:	0000ffff 	.word	0x0000ffff
 8003a08:	007a1200 	.word	0x007a1200
    }
    else
    {
      ret = HAL_ERROR;
 8003a0c:	2317      	movs	r3, #23
 8003a0e:	18fb      	adds	r3, r7, r3
 8003a10:	2201      	movs	r2, #1
 8003a12:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2200      	movs	r2, #0
 8003a18:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003a20:	2317      	movs	r3, #23
 8003a22:	18fb      	adds	r3, r7, r3
 8003a24:	781b      	ldrb	r3, [r3, #0]
}
 8003a26:	0018      	movs	r0, r3
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	b008      	add	sp, #32
 8003a2c:	bd80      	pop	{r7, pc}
 8003a2e:	46c0      	nop			; (mov r8, r8)

08003a30 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b082      	sub	sp, #8
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a3c:	2201      	movs	r2, #1
 8003a3e:	4013      	ands	r3, r2
 8003a40:	d00b      	beq.n	8003a5a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	4a4a      	ldr	r2, [pc, #296]	; (8003b74 <UART_AdvFeatureConfig+0x144>)
 8003a4a:	4013      	ands	r3, r2
 8003a4c:	0019      	movs	r1, r3
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	430a      	orrs	r2, r1
 8003a58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a5e:	2202      	movs	r2, #2
 8003a60:	4013      	ands	r3, r2
 8003a62:	d00b      	beq.n	8003a7c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	4a43      	ldr	r2, [pc, #268]	; (8003b78 <UART_AdvFeatureConfig+0x148>)
 8003a6c:	4013      	ands	r3, r2
 8003a6e:	0019      	movs	r1, r3
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	430a      	orrs	r2, r1
 8003a7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a80:	2204      	movs	r2, #4
 8003a82:	4013      	ands	r3, r2
 8003a84:	d00b      	beq.n	8003a9e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	4a3b      	ldr	r2, [pc, #236]	; (8003b7c <UART_AdvFeatureConfig+0x14c>)
 8003a8e:	4013      	ands	r3, r2
 8003a90:	0019      	movs	r1, r3
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	430a      	orrs	r2, r1
 8003a9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa2:	2208      	movs	r2, #8
 8003aa4:	4013      	ands	r3, r2
 8003aa6:	d00b      	beq.n	8003ac0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	4a34      	ldr	r2, [pc, #208]	; (8003b80 <UART_AdvFeatureConfig+0x150>)
 8003ab0:	4013      	ands	r3, r2
 8003ab2:	0019      	movs	r1, r3
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	430a      	orrs	r2, r1
 8003abe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac4:	2210      	movs	r2, #16
 8003ac6:	4013      	ands	r3, r2
 8003ac8:	d00b      	beq.n	8003ae2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	689b      	ldr	r3, [r3, #8]
 8003ad0:	4a2c      	ldr	r2, [pc, #176]	; (8003b84 <UART_AdvFeatureConfig+0x154>)
 8003ad2:	4013      	ands	r3, r2
 8003ad4:	0019      	movs	r1, r3
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	430a      	orrs	r2, r1
 8003ae0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae6:	2220      	movs	r2, #32
 8003ae8:	4013      	ands	r3, r2
 8003aea:	d00b      	beq.n	8003b04 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	4a25      	ldr	r2, [pc, #148]	; (8003b88 <UART_AdvFeatureConfig+0x158>)
 8003af4:	4013      	ands	r3, r2
 8003af6:	0019      	movs	r1, r3
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	430a      	orrs	r2, r1
 8003b02:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b08:	2240      	movs	r2, #64	; 0x40
 8003b0a:	4013      	ands	r3, r2
 8003b0c:	d01d      	beq.n	8003b4a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	4a1d      	ldr	r2, [pc, #116]	; (8003b8c <UART_AdvFeatureConfig+0x15c>)
 8003b16:	4013      	ands	r3, r2
 8003b18:	0019      	movs	r1, r3
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	430a      	orrs	r2, r1
 8003b24:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b2a:	2380      	movs	r3, #128	; 0x80
 8003b2c:	035b      	lsls	r3, r3, #13
 8003b2e:	429a      	cmp	r2, r3
 8003b30:	d10b      	bne.n	8003b4a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	4a15      	ldr	r2, [pc, #84]	; (8003b90 <UART_AdvFeatureConfig+0x160>)
 8003b3a:	4013      	ands	r3, r2
 8003b3c:	0019      	movs	r1, r3
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	430a      	orrs	r2, r1
 8003b48:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b4e:	2280      	movs	r2, #128	; 0x80
 8003b50:	4013      	ands	r3, r2
 8003b52:	d00b      	beq.n	8003b6c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	4a0e      	ldr	r2, [pc, #56]	; (8003b94 <UART_AdvFeatureConfig+0x164>)
 8003b5c:	4013      	ands	r3, r2
 8003b5e:	0019      	movs	r1, r3
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	430a      	orrs	r2, r1
 8003b6a:	605a      	str	r2, [r3, #4]
  }
}
 8003b6c:	46c0      	nop			; (mov r8, r8)
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	b002      	add	sp, #8
 8003b72:	bd80      	pop	{r7, pc}
 8003b74:	fffdffff 	.word	0xfffdffff
 8003b78:	fffeffff 	.word	0xfffeffff
 8003b7c:	fffbffff 	.word	0xfffbffff
 8003b80:	ffff7fff 	.word	0xffff7fff
 8003b84:	ffffefff 	.word	0xffffefff
 8003b88:	ffffdfff 	.word	0xffffdfff
 8003b8c:	ffefffff 	.word	0xffefffff
 8003b90:	ff9fffff 	.word	0xff9fffff
 8003b94:	fff7ffff 	.word	0xfff7ffff

08003b98 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b086      	sub	sp, #24
 8003b9c:	af02      	add	r7, sp, #8
 8003b9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003ba6:	f7fd fb4f 	bl	8001248 <HAL_GetTick>
 8003baa:	0003      	movs	r3, r0
 8003bac:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	2208      	movs	r2, #8
 8003bb6:	4013      	ands	r3, r2
 8003bb8:	2b08      	cmp	r3, #8
 8003bba:	d10d      	bne.n	8003bd8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003bbc:	68fa      	ldr	r2, [r7, #12]
 8003bbe:	2380      	movs	r3, #128	; 0x80
 8003bc0:	0399      	lsls	r1, r3, #14
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	4b16      	ldr	r3, [pc, #88]	; (8003c20 <UART_CheckIdleState+0x88>)
 8003bc6:	9300      	str	r3, [sp, #0]
 8003bc8:	0013      	movs	r3, r2
 8003bca:	2200      	movs	r2, #0
 8003bcc:	f000 f82a 	bl	8003c24 <UART_WaitOnFlagUntilTimeout>
 8003bd0:	1e03      	subs	r3, r0, #0
 8003bd2:	d001      	beq.n	8003bd8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003bd4:	2303      	movs	r3, #3
 8003bd6:	e01f      	b.n	8003c18 <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	2204      	movs	r2, #4
 8003be0:	4013      	ands	r3, r2
 8003be2:	2b04      	cmp	r3, #4
 8003be4:	d10d      	bne.n	8003c02 <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003be6:	68fa      	ldr	r2, [r7, #12]
 8003be8:	2380      	movs	r3, #128	; 0x80
 8003bea:	03d9      	lsls	r1, r3, #15
 8003bec:	6878      	ldr	r0, [r7, #4]
 8003bee:	4b0c      	ldr	r3, [pc, #48]	; (8003c20 <UART_CheckIdleState+0x88>)
 8003bf0:	9300      	str	r3, [sp, #0]
 8003bf2:	0013      	movs	r3, r2
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	f000 f815 	bl	8003c24 <UART_WaitOnFlagUntilTimeout>
 8003bfa:	1e03      	subs	r3, r0, #0
 8003bfc:	d001      	beq.n	8003c02 <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003bfe:	2303      	movs	r3, #3
 8003c00:	e00a      	b.n	8003c18 <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2220      	movs	r2, #32
 8003c06:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2220      	movs	r2, #32
 8003c0c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2270      	movs	r2, #112	; 0x70
 8003c12:	2100      	movs	r1, #0
 8003c14:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003c16:	2300      	movs	r3, #0
}
 8003c18:	0018      	movs	r0, r3
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	b004      	add	sp, #16
 8003c1e:	bd80      	pop	{r7, pc}
 8003c20:	01ffffff 	.word	0x01ffffff

08003c24 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b084      	sub	sp, #16
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	60f8      	str	r0, [r7, #12]
 8003c2c:	60b9      	str	r1, [r7, #8]
 8003c2e:	603b      	str	r3, [r7, #0]
 8003c30:	1dfb      	adds	r3, r7, #7
 8003c32:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c34:	e05d      	b.n	8003cf2 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c36:	69bb      	ldr	r3, [r7, #24]
 8003c38:	3301      	adds	r3, #1
 8003c3a:	d05a      	beq.n	8003cf2 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c3c:	f7fd fb04 	bl	8001248 <HAL_GetTick>
 8003c40:	0002      	movs	r2, r0
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	1ad3      	subs	r3, r2, r3
 8003c46:	69ba      	ldr	r2, [r7, #24]
 8003c48:	429a      	cmp	r2, r3
 8003c4a:	d302      	bcc.n	8003c52 <UART_WaitOnFlagUntilTimeout+0x2e>
 8003c4c:	69bb      	ldr	r3, [r7, #24]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d11b      	bne.n	8003c8a <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	492f      	ldr	r1, [pc, #188]	; (8003d1c <UART_WaitOnFlagUntilTimeout+0xf8>)
 8003c5e:	400a      	ands	r2, r1
 8003c60:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	689a      	ldr	r2, [r3, #8]
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	2101      	movs	r1, #1
 8003c6e:	438a      	bics	r2, r1
 8003c70:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	2220      	movs	r2, #32
 8003c76:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2220      	movs	r2, #32
 8003c7c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	2270      	movs	r2, #112	; 0x70
 8003c82:	2100      	movs	r1, #0
 8003c84:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003c86:	2303      	movs	r3, #3
 8003c88:	e043      	b.n	8003d12 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	2204      	movs	r2, #4
 8003c92:	4013      	ands	r3, r2
 8003c94:	d02d      	beq.n	8003cf2 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	69da      	ldr	r2, [r3, #28]
 8003c9c:	2380      	movs	r3, #128	; 0x80
 8003c9e:	011b      	lsls	r3, r3, #4
 8003ca0:	401a      	ands	r2, r3
 8003ca2:	2380      	movs	r3, #128	; 0x80
 8003ca4:	011b      	lsls	r3, r3, #4
 8003ca6:	429a      	cmp	r2, r3
 8003ca8:	d123      	bne.n	8003cf2 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	2280      	movs	r2, #128	; 0x80
 8003cb0:	0112      	lsls	r2, r2, #4
 8003cb2:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	681a      	ldr	r2, [r3, #0]
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4917      	ldr	r1, [pc, #92]	; (8003d1c <UART_WaitOnFlagUntilTimeout+0xf8>)
 8003cc0:	400a      	ands	r2, r1
 8003cc2:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	689a      	ldr	r2, [r3, #8]
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	2101      	movs	r1, #1
 8003cd0:	438a      	bics	r2, r1
 8003cd2:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	2220      	movs	r2, #32
 8003cd8:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	2220      	movs	r2, #32
 8003cde:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	2220      	movs	r2, #32
 8003ce4:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2270      	movs	r2, #112	; 0x70
 8003cea:	2100      	movs	r1, #0
 8003cec:	5499      	strb	r1, [r3, r2]
          
          return HAL_TIMEOUT;
 8003cee:	2303      	movs	r3, #3
 8003cf0:	e00f      	b.n	8003d12 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	69db      	ldr	r3, [r3, #28]
 8003cf8:	68ba      	ldr	r2, [r7, #8]
 8003cfa:	4013      	ands	r3, r2
 8003cfc:	68ba      	ldr	r2, [r7, #8]
 8003cfe:	1ad3      	subs	r3, r2, r3
 8003d00:	425a      	negs	r2, r3
 8003d02:	4153      	adcs	r3, r2
 8003d04:	b2db      	uxtb	r3, r3
 8003d06:	001a      	movs	r2, r3
 8003d08:	1dfb      	adds	r3, r7, #7
 8003d0a:	781b      	ldrb	r3, [r3, #0]
 8003d0c:	429a      	cmp	r2, r3
 8003d0e:	d092      	beq.n	8003c36 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003d10:	2300      	movs	r3, #0
}
 8003d12:	0018      	movs	r0, r3
 8003d14:	46bd      	mov	sp, r7
 8003d16:	b004      	add	sp, #16
 8003d18:	bd80      	pop	{r7, pc}
 8003d1a:	46c0      	nop			; (mov r8, r8)
 8003d1c:	fffffe5f 	.word	0xfffffe5f

08003d20 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b082      	sub	sp, #8
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	681a      	ldr	r2, [r3, #0]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	21c0      	movs	r1, #192	; 0xc0
 8003d34:	438a      	bics	r2, r1
 8003d36:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2220      	movs	r2, #32
 8003d3c:	675a      	str	r2, [r3, #116]	; 0x74
}
 8003d3e:	46c0      	nop			; (mov r8, r8)
 8003d40:	46bd      	mov	sp, r7
 8003d42:	b002      	add	sp, #8
 8003d44:	bd80      	pop	{r7, pc}
	...

08003d48 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b082      	sub	sp, #8
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	681a      	ldr	r2, [r3, #0]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	490a      	ldr	r1, [pc, #40]	; (8003d84 <UART_EndRxTransfer+0x3c>)
 8003d5c:	400a      	ands	r2, r1
 8003d5e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	689a      	ldr	r2, [r3, #8]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	2101      	movs	r1, #1
 8003d6c:	438a      	bics	r2, r1
 8003d6e:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2220      	movs	r2, #32
 8003d74:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	661a      	str	r2, [r3, #96]	; 0x60
}
 8003d7c:	46c0      	nop			; (mov r8, r8)
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	b002      	add	sp, #8
 8003d82:	bd80      	pop	{r7, pc}
 8003d84:	fffffedf 	.word	0xfffffedf

08003d88 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b084      	sub	sp, #16
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d94:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	699b      	ldr	r3, [r3, #24]
 8003d9a:	2b20      	cmp	r3, #32
 8003d9c:	d01e      	beq.n	8003ddc <UART_DMAReceiveCplt+0x54>
  {
    huart->RxXferCount = 0U;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	225a      	movs	r2, #90	; 0x5a
 8003da2:	2100      	movs	r1, #0
 8003da4:	5299      	strh	r1, [r3, r2]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	681a      	ldr	r2, [r3, #0]
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	490e      	ldr	r1, [pc, #56]	; (8003dec <UART_DMAReceiveCplt+0x64>)
 8003db2:	400a      	ands	r2, r1
 8003db4:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	689a      	ldr	r2, [r3, #8]
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	2101      	movs	r1, #1
 8003dc2:	438a      	bics	r2, r1
 8003dc4:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	689a      	ldr	r2, [r3, #8]
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	2140      	movs	r1, #64	; 0x40
 8003dd2:	438a      	bics	r2, r1
 8003dd4:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	2220      	movs	r2, #32
 8003dda:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	0018      	movs	r0, r3
 8003de0:	f7fc fe70 	bl	8000ac4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003de4:	46c0      	nop			; (mov r8, r8)
 8003de6:	46bd      	mov	sp, r7
 8003de8:	b004      	add	sp, #16
 8003dea:	bd80      	pop	{r7, pc}
 8003dec:	fffffeff 	.word	0xfffffeff

08003df0 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b084      	sub	sp, #16
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dfc:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	0018      	movs	r0, r3
 8003e02:	f7ff fc39 	bl	8003678 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e06:	46c0      	nop			; (mov r8, r8)
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	b004      	add	sp, #16
 8003e0c:	bd80      	pop	{r7, pc}

08003e0e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003e0e:	b580      	push	{r7, lr}
 8003e10:	b086      	sub	sp, #24
 8003e12:	af00      	add	r7, sp, #0
 8003e14:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e1a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e20:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8003e22:	697b      	ldr	r3, [r7, #20]
 8003e24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e26:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	2280      	movs	r2, #128	; 0x80
 8003e30:	4013      	ands	r3, r2
 8003e32:	2b80      	cmp	r3, #128	; 0x80
 8003e34:	d10a      	bne.n	8003e4c <UART_DMAError+0x3e>
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	2b21      	cmp	r3, #33	; 0x21
 8003e3a:	d107      	bne.n	8003e4c <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8003e3c:	697b      	ldr	r3, [r7, #20]
 8003e3e:	2252      	movs	r2, #82	; 0x52
 8003e40:	2100      	movs	r1, #0
 8003e42:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	0018      	movs	r0, r3
 8003e48:	f7ff ff6a 	bl	8003d20 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	689b      	ldr	r3, [r3, #8]
 8003e52:	2240      	movs	r2, #64	; 0x40
 8003e54:	4013      	ands	r3, r2
 8003e56:	2b40      	cmp	r3, #64	; 0x40
 8003e58:	d10a      	bne.n	8003e70 <UART_DMAError+0x62>
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	2b22      	cmp	r3, #34	; 0x22
 8003e5e:	d107      	bne.n	8003e70 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	225a      	movs	r2, #90	; 0x5a
 8003e64:	2100      	movs	r1, #0
 8003e66:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	0018      	movs	r0, r3
 8003e6c:	f7ff ff6c 	bl	8003d48 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e74:	2210      	movs	r2, #16
 8003e76:	431a      	orrs	r2, r3
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	67da      	str	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	0018      	movs	r0, r3
 8003e80:	f7ff fc02 	bl	8003688 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e84:	46c0      	nop			; (mov r8, r8)
 8003e86:	46bd      	mov	sp, r7
 8003e88:	b006      	add	sp, #24
 8003e8a:	bd80      	pop	{r7, pc}

08003e8c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b084      	sub	sp, #16
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e98:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	225a      	movs	r2, #90	; 0x5a
 8003e9e:	2100      	movs	r1, #0
 8003ea0:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	2252      	movs	r2, #82	; 0x52
 8003ea6:	2100      	movs	r1, #0
 8003ea8:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	0018      	movs	r0, r3
 8003eae:	f7ff fbeb 	bl	8003688 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003eb2:	46c0      	nop			; (mov r8, r8)
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	b004      	add	sp, #16
 8003eb8:	bd80      	pop	{r7, pc}

08003eba <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003eba:	b580      	push	{r7, lr}
 8003ebc:	b082      	sub	sp, #8
 8003ebe:	af00      	add	r7, sp, #0
 8003ec0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	681a      	ldr	r2, [r3, #0]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	2140      	movs	r1, #64	; 0x40
 8003ece:	438a      	bics	r2, r1
 8003ed0:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2220      	movs	r2, #32
 8003ed6:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2200      	movs	r2, #0
 8003edc:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	0018      	movs	r0, r3
 8003ee2:	f7ff fbc1 	bl	8003668 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003ee6:	46c0      	nop			; (mov r8, r8)
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	b002      	add	sp, #8
 8003eec:	bd80      	pop	{r7, pc}

08003eee <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003eee:	b580      	push	{r7, lr}
 8003ef0:	b082      	sub	sp, #8
 8003ef2:	af00      	add	r7, sp, #0
 8003ef4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003ef6:	46c0      	nop			; (mov r8, r8)
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	b002      	add	sp, #8
 8003efc:	bd80      	pop	{r7, pc}

08003efe <ssd1306_Reset>:
#include "ssd1306.h"

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8003efe:	b580      	push	{r7, lr}
 8003f00:	af00      	add	r7, sp, #0
	/* for I2C - do nothing */
}
 8003f02:	46c0      	nop			; (mov r8, r8)
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bd80      	pop	{r7, pc}

08003f08 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b086      	sub	sp, #24
 8003f0c:	af04      	add	r7, sp, #16
 8003f0e:	0002      	movs	r2, r0
 8003f10:	1dfb      	adds	r3, r7, #7
 8003f12:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8003f14:	4808      	ldr	r0, [pc, #32]	; (8003f38 <ssd1306_WriteCommand+0x30>)
 8003f16:	2301      	movs	r3, #1
 8003f18:	425b      	negs	r3, r3
 8003f1a:	9302      	str	r3, [sp, #8]
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	9301      	str	r3, [sp, #4]
 8003f20:	1dfb      	adds	r3, r7, #7
 8003f22:	9300      	str	r3, [sp, #0]
 8003f24:	2301      	movs	r3, #1
 8003f26:	2200      	movs	r2, #0
 8003f28:	2178      	movs	r1, #120	; 0x78
 8003f2a:	f7fd febb 	bl	8001ca4 <HAL_I2C_Mem_Write>
}
 8003f2e:	46c0      	nop			; (mov r8, r8)
 8003f30:	46bd      	mov	sp, r7
 8003f32:	b002      	add	sp, #8
 8003f34:	bd80      	pop	{r7, pc}
 8003f36:	46c0      	nop			; (mov r8, r8)
 8003f38:	200004b8 	.word	0x200004b8

08003f3c <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b086      	sub	sp, #24
 8003f40:	af04      	add	r7, sp, #16
 8003f42:	6078      	str	r0, [r7, #4]
 8003f44:	6039      	str	r1, [r7, #0]
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	b29b      	uxth	r3, r3
 8003f4a:	4808      	ldr	r0, [pc, #32]	; (8003f6c <ssd1306_WriteData+0x30>)
 8003f4c:	2201      	movs	r2, #1
 8003f4e:	4252      	negs	r2, r2
 8003f50:	9202      	str	r2, [sp, #8]
 8003f52:	9301      	str	r3, [sp, #4]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	9300      	str	r3, [sp, #0]
 8003f58:	2301      	movs	r3, #1
 8003f5a:	2240      	movs	r2, #64	; 0x40
 8003f5c:	2178      	movs	r1, #120	; 0x78
 8003f5e:	f7fd fea1 	bl	8001ca4 <HAL_I2C_Mem_Write>
}
 8003f62:	46c0      	nop			; (mov r8, r8)
 8003f64:	46bd      	mov	sp, r7
 8003f66:	b002      	add	sp, #8
 8003f68:	bd80      	pop	{r7, pc}
 8003f6a:	46c0      	nop			; (mov r8, r8)
 8003f6c:	200004b8 	.word	0x200004b8

08003f70 <ssd1306_Init>:

// Screen object
static SSD1306_t SSD1306;

// Initialize the oled screen
void ssd1306_Init(void) {
 8003f70:	b580      	push	{r7, lr}
 8003f72:	af00      	add	r7, sp, #0
	// Reset OLED
	ssd1306_Reset();
 8003f74:	f7ff ffc3 	bl	8003efe <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8003f78:	2064      	movs	r0, #100	; 0x64
 8003f7a:	f7fd f96f 	bl	800125c <HAL_Delay>
    
    // Init OLED
    ssd1306_WriteCommand(0xAE); //display off
 8003f7e:	20ae      	movs	r0, #174	; 0xae
 8003f80:	f7ff ffc2 	bl	8003f08 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode   
 8003f84:	2020      	movs	r0, #32
 8003f86:	f7ff ffbf 	bl	8003f08 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); // 00,Horizontal Addressing Mode; 01,Vertical Addressing Mode;
 8003f8a:	2010      	movs	r0, #16
 8003f8c:	f7ff ffbc 	bl	8003f08 <ssd1306_WriteCommand>
                                // 10,Page Addressing Mode (RESET); 11,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8003f90:	20b0      	movs	r0, #176	; 0xb0
 8003f92:	f7ff ffb9 	bl	8003f08 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8003f96:	20c8      	movs	r0, #200	; 0xc8
 8003f98:	f7ff ffb6 	bl	8003f08 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8003f9c:	2000      	movs	r0, #0
 8003f9e:	f7ff ffb3 	bl	8003f08 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8003fa2:	2010      	movs	r0, #16
 8003fa4:	f7ff ffb0 	bl	8003f08 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8003fa8:	2040      	movs	r0, #64	; 0x40
 8003faa:	f7ff ffad 	bl	8003f08 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x81); //--set contrast control register - CHECK
 8003fae:	2081      	movs	r0, #129	; 0x81
 8003fb0:	f7ff ffaa 	bl	8003f08 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xFF);
 8003fb4:	20ff      	movs	r0, #255	; 0xff
 8003fb6:	f7ff ffa7 	bl	8003f08 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8003fba:	20a1      	movs	r0, #161	; 0xa1
 8003fbc:	f7ff ffa4 	bl	8003f08 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8003fc0:	20a6      	movs	r0, #166	; 0xa6
 8003fc2:	f7ff ffa1 	bl	8003f08 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8003fc6:	20a8      	movs	r0, #168	; 0xa8
 8003fc8:	f7ff ff9e 	bl	8003f08 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); //
 8003fcc:	203f      	movs	r0, #63	; 0x3f
 8003fce:	f7ff ff9b 	bl	8003f08 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8003fd2:	20a4      	movs	r0, #164	; 0xa4
 8003fd4:	f7ff ff98 	bl	8003f08 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8003fd8:	20d3      	movs	r0, #211	; 0xd3
 8003fda:	f7ff ff95 	bl	8003f08 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8003fde:	2000      	movs	r0, #0
 8003fe0:	f7ff ff92 	bl	8003f08 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8003fe4:	20d5      	movs	r0, #213	; 0xd5
 8003fe6:	f7ff ff8f 	bl	8003f08 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8003fea:	20f0      	movs	r0, #240	; 0xf0
 8003fec:	f7ff ff8c 	bl	8003f08 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8003ff0:	20d9      	movs	r0, #217	; 0xd9
 8003ff2:	f7ff ff89 	bl	8003f08 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8003ff6:	2022      	movs	r0, #34	; 0x22
 8003ff8:	f7ff ff86 	bl	8003f08 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8003ffc:	20da      	movs	r0, #218	; 0xda
 8003ffe:	f7ff ff83 	bl	8003f08 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
 8004002:	2012      	movs	r0, #18
 8004004:	f7ff ff80 	bl	8003f08 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8004008:	20db      	movs	r0, #219	; 0xdb
 800400a:	f7ff ff7d 	bl	8003f08 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 800400e:	2020      	movs	r0, #32
 8004010:	f7ff ff7a 	bl	8003f08 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8004014:	208d      	movs	r0, #141	; 0x8d
 8004016:	f7ff ff77 	bl	8003f08 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 800401a:	2014      	movs	r0, #20
 800401c:	f7ff ff74 	bl	8003f08 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xAF); //--turn on SSD1306 panel
 8004020:	20af      	movs	r0, #175	; 0xaf
 8004022:	f7ff ff71 	bl	8003f08 <ssd1306_WriteCommand>

    // Clear screen
    ssd1306_Fill(Black);
 8004026:	2000      	movs	r0, #0
 8004028:	f000 f810 	bl	800404c <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 800402c:	f000 f832 	bl	8004094 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8004030:	4b05      	ldr	r3, [pc, #20]	; (8004048 <ssd1306_Init+0xd8>)
 8004032:	2200      	movs	r2, #0
 8004034:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8004036:	4b04      	ldr	r3, [pc, #16]	; (8004048 <ssd1306_Init+0xd8>)
 8004038:	2200      	movs	r2, #0
 800403a:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 800403c:	4b02      	ldr	r3, [pc, #8]	; (8004048 <ssd1306_Init+0xd8>)
 800403e:	2201      	movs	r2, #1
 8004040:	715a      	strb	r2, [r3, #5]
}
 8004042:	46c0      	nop			; (mov r8, r8)
 8004044:	46bd      	mov	sp, r7
 8004046:	bd80      	pop	{r7, pc}
 8004048:	200004a8 	.word	0x200004a8

0800404c <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 800404c:	b580      	push	{r7, lr}
 800404e:	b084      	sub	sp, #16
 8004050:	af00      	add	r7, sp, #0
 8004052:	0002      	movs	r2, r0
 8004054:	1dfb      	adds	r3, r7, #7
 8004056:	701a      	strb	r2, [r3, #0]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8004058:	2300      	movs	r3, #0
 800405a:	60fb      	str	r3, [r7, #12]
 800405c:	e00e      	b.n	800407c <ssd1306_Fill+0x30>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 800405e:	1dfb      	adds	r3, r7, #7
 8004060:	781b      	ldrb	r3, [r3, #0]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d101      	bne.n	800406a <ssd1306_Fill+0x1e>
 8004066:	2100      	movs	r1, #0
 8004068:	e000      	b.n	800406c <ssd1306_Fill+0x20>
 800406a:	21ff      	movs	r1, #255	; 0xff
 800406c:	4a07      	ldr	r2, [pc, #28]	; (800408c <ssd1306_Fill+0x40>)
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	18d3      	adds	r3, r2, r3
 8004072:	1c0a      	adds	r2, r1, #0
 8004074:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	3301      	adds	r3, #1
 800407a:	60fb      	str	r3, [r7, #12]
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	4a04      	ldr	r2, [pc, #16]	; (8004090 <ssd1306_Fill+0x44>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d9ec      	bls.n	800405e <ssd1306_Fill+0x12>
    }
}
 8004084:	46c0      	nop			; (mov r8, r8)
 8004086:	46bd      	mov	sp, r7
 8004088:	b004      	add	sp, #16
 800408a:	bd80      	pop	{r7, pc}
 800408c:	200000a8 	.word	0x200000a8
 8004090:	000003ff 	.word	0x000003ff

08004094 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 8004094:	b580      	push	{r7, lr}
 8004096:	b082      	sub	sp, #8
 8004098:	af00      	add	r7, sp, #0
    uint8_t i;
    for(i = 0; i < 8; i++) {
 800409a:	1dfb      	adds	r3, r7, #7
 800409c:	2200      	movs	r2, #0
 800409e:	701a      	strb	r2, [r3, #0]
 80040a0:	e01a      	b.n	80040d8 <ssd1306_UpdateScreen+0x44>
        ssd1306_WriteCommand(0xB0 + i);
 80040a2:	1dfb      	adds	r3, r7, #7
 80040a4:	781b      	ldrb	r3, [r3, #0]
 80040a6:	3b50      	subs	r3, #80	; 0x50
 80040a8:	b2db      	uxtb	r3, r3
 80040aa:	0018      	movs	r0, r3
 80040ac:	f7ff ff2c 	bl	8003f08 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 80040b0:	2000      	movs	r0, #0
 80040b2:	f7ff ff29 	bl	8003f08 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 80040b6:	2010      	movs	r0, #16
 80040b8:	f7ff ff26 	bl	8003f08 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80040bc:	1dfb      	adds	r3, r7, #7
 80040be:	781b      	ldrb	r3, [r3, #0]
 80040c0:	01da      	lsls	r2, r3, #7
 80040c2:	4b09      	ldr	r3, [pc, #36]	; (80040e8 <ssd1306_UpdateScreen+0x54>)
 80040c4:	18d3      	adds	r3, r2, r3
 80040c6:	2180      	movs	r1, #128	; 0x80
 80040c8:	0018      	movs	r0, r3
 80040ca:	f7ff ff37 	bl	8003f3c <ssd1306_WriteData>
    for(i = 0; i < 8; i++) {
 80040ce:	1dfb      	adds	r3, r7, #7
 80040d0:	781a      	ldrb	r2, [r3, #0]
 80040d2:	1dfb      	adds	r3, r7, #7
 80040d4:	3201      	adds	r2, #1
 80040d6:	701a      	strb	r2, [r3, #0]
 80040d8:	1dfb      	adds	r3, r7, #7
 80040da:	781b      	ldrb	r3, [r3, #0]
 80040dc:	2b07      	cmp	r3, #7
 80040de:	d9e0      	bls.n	80040a2 <ssd1306_UpdateScreen+0xe>
    }
}
 80040e0:	46c0      	nop			; (mov r8, r8)
 80040e2:	46bd      	mov	sp, r7
 80040e4:	b002      	add	sp, #8
 80040e6:	bd80      	pop	{r7, pc}
 80040e8:	200000a8 	.word	0x200000a8

080040ec <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80040ec:	b590      	push	{r4, r7, lr}
 80040ee:	b083      	sub	sp, #12
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	0004      	movs	r4, r0
 80040f4:	0008      	movs	r0, r1
 80040f6:	0011      	movs	r1, r2
 80040f8:	1dfb      	adds	r3, r7, #7
 80040fa:	1c22      	adds	r2, r4, #0
 80040fc:	701a      	strb	r2, [r3, #0]
 80040fe:	1dbb      	adds	r3, r7, #6
 8004100:	1c02      	adds	r2, r0, #0
 8004102:	701a      	strb	r2, [r3, #0]
 8004104:	1d7b      	adds	r3, r7, #5
 8004106:	1c0a      	adds	r2, r1, #0
 8004108:	701a      	strb	r2, [r3, #0]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800410a:	1dfb      	adds	r3, r7, #7
 800410c:	781b      	ldrb	r3, [r3, #0]
 800410e:	b25b      	sxtb	r3, r3
 8004110:	2b00      	cmp	r3, #0
 8004112:	db52      	blt.n	80041ba <ssd1306_DrawPixel+0xce>
 8004114:	1dbb      	adds	r3, r7, #6
 8004116:	781b      	ldrb	r3, [r3, #0]
 8004118:	2b3f      	cmp	r3, #63	; 0x3f
 800411a:	d84e      	bhi.n	80041ba <ssd1306_DrawPixel+0xce>
        // Don't write outside the buffer
        return;
    }
    
    // Check if pixel should be inverted
    if(SSD1306.Inverted) {
 800411c:	4b29      	ldr	r3, [pc, #164]	; (80041c4 <ssd1306_DrawPixel+0xd8>)
 800411e:	791b      	ldrb	r3, [r3, #4]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d006      	beq.n	8004132 <ssd1306_DrawPixel+0x46>
        color = (SSD1306_COLOR)!color;
 8004124:	1d7b      	adds	r3, r7, #5
 8004126:	781b      	ldrb	r3, [r3, #0]
 8004128:	425a      	negs	r2, r3
 800412a:	4153      	adcs	r3, r2
 800412c:	b2da      	uxtb	r2, r3
 800412e:	1d7b      	adds	r3, r7, #5
 8004130:	701a      	strb	r2, [r3, #0]
    }
    
    // Draw in the right color
    if(color == White) {
 8004132:	1d7b      	adds	r3, r7, #5
 8004134:	781b      	ldrb	r3, [r3, #0]
 8004136:	2b01      	cmp	r3, #1
 8004138:	d11e      	bne.n	8004178 <ssd1306_DrawPixel+0x8c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800413a:	1dfb      	adds	r3, r7, #7
 800413c:	781a      	ldrb	r2, [r3, #0]
 800413e:	1dbb      	adds	r3, r7, #6
 8004140:	781b      	ldrb	r3, [r3, #0]
 8004142:	08db      	lsrs	r3, r3, #3
 8004144:	b2d8      	uxtb	r0, r3
 8004146:	0003      	movs	r3, r0
 8004148:	01db      	lsls	r3, r3, #7
 800414a:	18d3      	adds	r3, r2, r3
 800414c:	4a1e      	ldr	r2, [pc, #120]	; (80041c8 <ssd1306_DrawPixel+0xdc>)
 800414e:	5cd3      	ldrb	r3, [r2, r3]
 8004150:	b25a      	sxtb	r2, r3
 8004152:	1dbb      	adds	r3, r7, #6
 8004154:	781b      	ldrb	r3, [r3, #0]
 8004156:	2107      	movs	r1, #7
 8004158:	400b      	ands	r3, r1
 800415a:	2101      	movs	r1, #1
 800415c:	4099      	lsls	r1, r3
 800415e:	000b      	movs	r3, r1
 8004160:	b25b      	sxtb	r3, r3
 8004162:	4313      	orrs	r3, r2
 8004164:	b259      	sxtb	r1, r3
 8004166:	1dfb      	adds	r3, r7, #7
 8004168:	781a      	ldrb	r2, [r3, #0]
 800416a:	0003      	movs	r3, r0
 800416c:	01db      	lsls	r3, r3, #7
 800416e:	18d3      	adds	r3, r2, r3
 8004170:	b2c9      	uxtb	r1, r1
 8004172:	4a15      	ldr	r2, [pc, #84]	; (80041c8 <ssd1306_DrawPixel+0xdc>)
 8004174:	54d1      	strb	r1, [r2, r3]
 8004176:	e021      	b.n	80041bc <ssd1306_DrawPixel+0xd0>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8004178:	1dfb      	adds	r3, r7, #7
 800417a:	781a      	ldrb	r2, [r3, #0]
 800417c:	1dbb      	adds	r3, r7, #6
 800417e:	781b      	ldrb	r3, [r3, #0]
 8004180:	08db      	lsrs	r3, r3, #3
 8004182:	b2d8      	uxtb	r0, r3
 8004184:	0003      	movs	r3, r0
 8004186:	01db      	lsls	r3, r3, #7
 8004188:	18d3      	adds	r3, r2, r3
 800418a:	4a0f      	ldr	r2, [pc, #60]	; (80041c8 <ssd1306_DrawPixel+0xdc>)
 800418c:	5cd3      	ldrb	r3, [r2, r3]
 800418e:	b25b      	sxtb	r3, r3
 8004190:	1dba      	adds	r2, r7, #6
 8004192:	7812      	ldrb	r2, [r2, #0]
 8004194:	2107      	movs	r1, #7
 8004196:	400a      	ands	r2, r1
 8004198:	2101      	movs	r1, #1
 800419a:	4091      	lsls	r1, r2
 800419c:	000a      	movs	r2, r1
 800419e:	b252      	sxtb	r2, r2
 80041a0:	43d2      	mvns	r2, r2
 80041a2:	b252      	sxtb	r2, r2
 80041a4:	4013      	ands	r3, r2
 80041a6:	b259      	sxtb	r1, r3
 80041a8:	1dfb      	adds	r3, r7, #7
 80041aa:	781a      	ldrb	r2, [r3, #0]
 80041ac:	0003      	movs	r3, r0
 80041ae:	01db      	lsls	r3, r3, #7
 80041b0:	18d3      	adds	r3, r2, r3
 80041b2:	b2c9      	uxtb	r1, r1
 80041b4:	4a04      	ldr	r2, [pc, #16]	; (80041c8 <ssd1306_DrawPixel+0xdc>)
 80041b6:	54d1      	strb	r1, [r2, r3]
 80041b8:	e000      	b.n	80041bc <ssd1306_DrawPixel+0xd0>
        return;
 80041ba:	46c0      	nop			; (mov r8, r8)
    }
}
 80041bc:	46bd      	mov	sp, r7
 80041be:	b003      	add	sp, #12
 80041c0:	bd90      	pop	{r4, r7, pc}
 80041c2:	46c0      	nop			; (mov r8, r8)
 80041c4:	200004a8 	.word	0x200004a8
 80041c8:	200000a8 	.word	0x200000a8

080041cc <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch         => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color     => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 80041cc:	b590      	push	{r4, r7, lr}
 80041ce:	b089      	sub	sp, #36	; 0x24
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	0004      	movs	r4, r0
 80041d4:	1d38      	adds	r0, r7, #4
 80041d6:	6001      	str	r1, [r0, #0]
 80041d8:	6042      	str	r2, [r0, #4]
 80041da:	0019      	movs	r1, r3
 80041dc:	230f      	movs	r3, #15
 80041de:	18fb      	adds	r3, r7, r3
 80041e0:	1c22      	adds	r2, r4, #0
 80041e2:	701a      	strb	r2, [r3, #0]
 80041e4:	230e      	movs	r3, #14
 80041e6:	18fb      	adds	r3, r7, r3
 80041e8:	1c0a      	adds	r2, r1, #0
 80041ea:	701a      	strb	r2, [r3, #0]
    uint32_t i, b, j;
    
    // Check remaining space on current line
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 80041ec:	4b3e      	ldr	r3, [pc, #248]	; (80042e8 <ssd1306_WriteChar+0x11c>)
 80041ee:	881b      	ldrh	r3, [r3, #0]
 80041f0:	001a      	movs	r2, r3
 80041f2:	1d3b      	adds	r3, r7, #4
 80041f4:	781b      	ldrb	r3, [r3, #0]
 80041f6:	18d3      	adds	r3, r2, r3
 80041f8:	2b7f      	cmp	r3, #127	; 0x7f
 80041fa:	dc07      	bgt.n	800420c <ssd1306_WriteChar+0x40>
        SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 80041fc:	4b3a      	ldr	r3, [pc, #232]	; (80042e8 <ssd1306_WriteChar+0x11c>)
 80041fe:	885b      	ldrh	r3, [r3, #2]
 8004200:	001a      	movs	r2, r3
 8004202:	1d3b      	adds	r3, r7, #4
 8004204:	785b      	ldrb	r3, [r3, #1]
 8004206:	18d3      	adds	r3, r2, r3
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8004208:	2b3f      	cmp	r3, #63	; 0x3f
 800420a:	dd01      	ble.n	8004210 <ssd1306_WriteChar+0x44>
    {
        // Not enough space on current line
        return 0;
 800420c:	2300      	movs	r3, #0
 800420e:	e066      	b.n	80042de <ssd1306_WriteChar+0x112>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8004210:	2300      	movs	r3, #0
 8004212:	61fb      	str	r3, [r7, #28]
 8004214:	e051      	b.n	80042ba <ssd1306_WriteChar+0xee>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8004216:	1d3b      	adds	r3, r7, #4
 8004218:	685a      	ldr	r2, [r3, #4]
 800421a:	230f      	movs	r3, #15
 800421c:	18fb      	adds	r3, r7, r3
 800421e:	781b      	ldrb	r3, [r3, #0]
 8004220:	3b20      	subs	r3, #32
 8004222:	1d39      	adds	r1, r7, #4
 8004224:	7849      	ldrb	r1, [r1, #1]
 8004226:	434b      	muls	r3, r1
 8004228:	0019      	movs	r1, r3
 800422a:	69fb      	ldr	r3, [r7, #28]
 800422c:	18cb      	adds	r3, r1, r3
 800422e:	005b      	lsls	r3, r3, #1
 8004230:	18d3      	adds	r3, r2, r3
 8004232:	881b      	ldrh	r3, [r3, #0]
 8004234:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8004236:	2300      	movs	r3, #0
 8004238:	61bb      	str	r3, [r7, #24]
 800423a:	e035      	b.n	80042a8 <ssd1306_WriteChar+0xdc>
            if((b << j) & 0x8000)  {
 800423c:	697a      	ldr	r2, [r7, #20]
 800423e:	69bb      	ldr	r3, [r7, #24]
 8004240:	409a      	lsls	r2, r3
 8004242:	2380      	movs	r3, #128	; 0x80
 8004244:	021b      	lsls	r3, r3, #8
 8004246:	4013      	ands	r3, r2
 8004248:	d014      	beq.n	8004274 <ssd1306_WriteChar+0xa8>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800424a:	4b27      	ldr	r3, [pc, #156]	; (80042e8 <ssd1306_WriteChar+0x11c>)
 800424c:	881b      	ldrh	r3, [r3, #0]
 800424e:	b2da      	uxtb	r2, r3
 8004250:	69bb      	ldr	r3, [r7, #24]
 8004252:	b2db      	uxtb	r3, r3
 8004254:	18d3      	adds	r3, r2, r3
 8004256:	b2d8      	uxtb	r0, r3
 8004258:	4b23      	ldr	r3, [pc, #140]	; (80042e8 <ssd1306_WriteChar+0x11c>)
 800425a:	885b      	ldrh	r3, [r3, #2]
 800425c:	b2da      	uxtb	r2, r3
 800425e:	69fb      	ldr	r3, [r7, #28]
 8004260:	b2db      	uxtb	r3, r3
 8004262:	18d3      	adds	r3, r2, r3
 8004264:	b2d9      	uxtb	r1, r3
 8004266:	230e      	movs	r3, #14
 8004268:	18fb      	adds	r3, r7, r3
 800426a:	781b      	ldrb	r3, [r3, #0]
 800426c:	001a      	movs	r2, r3
 800426e:	f7ff ff3d 	bl	80040ec <ssd1306_DrawPixel>
 8004272:	e016      	b.n	80042a2 <ssd1306_WriteChar+0xd6>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8004274:	4b1c      	ldr	r3, [pc, #112]	; (80042e8 <ssd1306_WriteChar+0x11c>)
 8004276:	881b      	ldrh	r3, [r3, #0]
 8004278:	b2da      	uxtb	r2, r3
 800427a:	69bb      	ldr	r3, [r7, #24]
 800427c:	b2db      	uxtb	r3, r3
 800427e:	18d3      	adds	r3, r2, r3
 8004280:	b2d8      	uxtb	r0, r3
 8004282:	4b19      	ldr	r3, [pc, #100]	; (80042e8 <ssd1306_WriteChar+0x11c>)
 8004284:	885b      	ldrh	r3, [r3, #2]
 8004286:	b2da      	uxtb	r2, r3
 8004288:	69fb      	ldr	r3, [r7, #28]
 800428a:	b2db      	uxtb	r3, r3
 800428c:	18d3      	adds	r3, r2, r3
 800428e:	b2d9      	uxtb	r1, r3
 8004290:	230e      	movs	r3, #14
 8004292:	18fb      	adds	r3, r7, r3
 8004294:	781b      	ldrb	r3, [r3, #0]
 8004296:	425a      	negs	r2, r3
 8004298:	4153      	adcs	r3, r2
 800429a:	b2db      	uxtb	r3, r3
 800429c:	001a      	movs	r2, r3
 800429e:	f7ff ff25 	bl	80040ec <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 80042a2:	69bb      	ldr	r3, [r7, #24]
 80042a4:	3301      	adds	r3, #1
 80042a6:	61bb      	str	r3, [r7, #24]
 80042a8:	1d3b      	adds	r3, r7, #4
 80042aa:	781b      	ldrb	r3, [r3, #0]
 80042ac:	001a      	movs	r2, r3
 80042ae:	69bb      	ldr	r3, [r7, #24]
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d3c3      	bcc.n	800423c <ssd1306_WriteChar+0x70>
    for(i = 0; i < Font.FontHeight; i++) {
 80042b4:	69fb      	ldr	r3, [r7, #28]
 80042b6:	3301      	adds	r3, #1
 80042b8:	61fb      	str	r3, [r7, #28]
 80042ba:	1d3b      	adds	r3, r7, #4
 80042bc:	785b      	ldrb	r3, [r3, #1]
 80042be:	001a      	movs	r2, r3
 80042c0:	69fb      	ldr	r3, [r7, #28]
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d3a7      	bcc.n	8004216 <ssd1306_WriteChar+0x4a>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 80042c6:	4b08      	ldr	r3, [pc, #32]	; (80042e8 <ssd1306_WriteChar+0x11c>)
 80042c8:	881a      	ldrh	r2, [r3, #0]
 80042ca:	1d3b      	adds	r3, r7, #4
 80042cc:	781b      	ldrb	r3, [r3, #0]
 80042ce:	b29b      	uxth	r3, r3
 80042d0:	18d3      	adds	r3, r2, r3
 80042d2:	b29a      	uxth	r2, r3
 80042d4:	4b04      	ldr	r3, [pc, #16]	; (80042e8 <ssd1306_WriteChar+0x11c>)
 80042d6:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 80042d8:	230f      	movs	r3, #15
 80042da:	18fb      	adds	r3, r7, r3
 80042dc:	781b      	ldrb	r3, [r3, #0]
}
 80042de:	0018      	movs	r0, r3
 80042e0:	46bd      	mov	sp, r7
 80042e2:	b009      	add	sp, #36	; 0x24
 80042e4:	bd90      	pop	{r4, r7, pc}
 80042e6:	46c0      	nop			; (mov r8, r8)
 80042e8:	200004a8 	.word	0x200004a8

080042ec <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b084      	sub	sp, #16
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	60f8      	str	r0, [r7, #12]
 80042f4:	1d38      	adds	r0, r7, #4
 80042f6:	6001      	str	r1, [r0, #0]
 80042f8:	6042      	str	r2, [r0, #4]
 80042fa:	001a      	movs	r2, r3
 80042fc:	1cfb      	adds	r3, r7, #3
 80042fe:	701a      	strb	r2, [r3, #0]
    // Write until null-byte
    while (*str) {
 8004300:	e014      	b.n	800432c <ssd1306_WriteString+0x40>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	7818      	ldrb	r0, [r3, #0]
 8004306:	1cfb      	adds	r3, r7, #3
 8004308:	781b      	ldrb	r3, [r3, #0]
 800430a:	1d3a      	adds	r2, r7, #4
 800430c:	6811      	ldr	r1, [r2, #0]
 800430e:	6852      	ldr	r2, [r2, #4]
 8004310:	f7ff ff5c 	bl	80041cc <ssd1306_WriteChar>
 8004314:	0003      	movs	r3, r0
 8004316:	001a      	movs	r2, r3
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	781b      	ldrb	r3, [r3, #0]
 800431c:	429a      	cmp	r2, r3
 800431e:	d002      	beq.n	8004326 <ssd1306_WriteString+0x3a>
            // Char could not be written
            return *str;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	781b      	ldrb	r3, [r3, #0]
 8004324:	e008      	b.n	8004338 <ssd1306_WriteString+0x4c>
        }
        
        // Next char
        str++;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	3301      	adds	r3, #1
 800432a:	60fb      	str	r3, [r7, #12]
    while (*str) {
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	781b      	ldrb	r3, [r3, #0]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d1e6      	bne.n	8004302 <ssd1306_WriteString+0x16>
    }
    
    // Everything ok
    return *str;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	781b      	ldrb	r3, [r3, #0]
}
 8004338:	0018      	movs	r0, r3
 800433a:	46bd      	mov	sp, r7
 800433c:	b004      	add	sp, #16
 800433e:	bd80      	pop	{r7, pc}

08004340 <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8004340:	b580      	push	{r7, lr}
 8004342:	b082      	sub	sp, #8
 8004344:	af00      	add	r7, sp, #0
 8004346:	0002      	movs	r2, r0
 8004348:	1dfb      	adds	r3, r7, #7
 800434a:	701a      	strb	r2, [r3, #0]
 800434c:	1dbb      	adds	r3, r7, #6
 800434e:	1c0a      	adds	r2, r1, #0
 8004350:	701a      	strb	r2, [r3, #0]
    SSD1306.CurrentX = x;
 8004352:	1dfb      	adds	r3, r7, #7
 8004354:	781b      	ldrb	r3, [r3, #0]
 8004356:	b29a      	uxth	r2, r3
 8004358:	4b05      	ldr	r3, [pc, #20]	; (8004370 <ssd1306_SetCursor+0x30>)
 800435a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 800435c:	1dbb      	adds	r3, r7, #6
 800435e:	781b      	ldrb	r3, [r3, #0]
 8004360:	b29a      	uxth	r2, r3
 8004362:	4b03      	ldr	r3, [pc, #12]	; (8004370 <ssd1306_SetCursor+0x30>)
 8004364:	805a      	strh	r2, [r3, #2]
}
 8004366:	46c0      	nop			; (mov r8, r8)
 8004368:	46bd      	mov	sp, r7
 800436a:	b002      	add	sp, #8
 800436c:	bd80      	pop	{r7, pc}
 800436e:	46c0      	nop			; (mov r8, r8)
 8004370:	200004a8 	.word	0x200004a8

08004374 <ssd1306_TestBorder>:
#include "ssd1306.h"
#include <string.h>

void ssd1306_TestBorder() {
 8004374:	b590      	push	{r4, r7, lr}
 8004376:	b085      	sub	sp, #20
 8004378:	af00      	add	r7, sp, #0
    ssd1306_Fill(Black);
 800437a:	2000      	movs	r0, #0
 800437c:	f7ff fe66 	bl	800404c <ssd1306_Fill>
   
    uint32_t start = HAL_GetTick();
 8004380:	f7fc ff62 	bl	8001248 <HAL_GetTick>
 8004384:	0003      	movs	r3, r0
 8004386:	60bb      	str	r3, [r7, #8]
    uint32_t end = start;
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	607b      	str	r3, [r7, #4]
    uint8_t x = 0;
 800438c:	230f      	movs	r3, #15
 800438e:	18fb      	adds	r3, r7, r3
 8004390:	2200      	movs	r2, #0
 8004392:	701a      	strb	r2, [r3, #0]
    uint8_t y = 0;
 8004394:	230e      	movs	r3, #14
 8004396:	18fb      	adds	r3, r7, r3
 8004398:	2200      	movs	r2, #0
 800439a:	701a      	strb	r2, [r3, #0]
    do {
        ssd1306_DrawPixel(x, y, Black);
 800439c:	240e      	movs	r4, #14
 800439e:	193b      	adds	r3, r7, r4
 80043a0:	7819      	ldrb	r1, [r3, #0]
 80043a2:	230f      	movs	r3, #15
 80043a4:	18fb      	adds	r3, r7, r3
 80043a6:	781b      	ldrb	r3, [r3, #0]
 80043a8:	2200      	movs	r2, #0
 80043aa:	0018      	movs	r0, r3
 80043ac:	f7ff fe9e 	bl	80040ec <ssd1306_DrawPixel>

        if((y == 0) && (x < 127))
 80043b0:	193b      	adds	r3, r7, r4
 80043b2:	781b      	ldrb	r3, [r3, #0]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d10b      	bne.n	80043d0 <ssd1306_TestBorder+0x5c>
 80043b8:	230f      	movs	r3, #15
 80043ba:	18fb      	adds	r3, r7, r3
 80043bc:	781b      	ldrb	r3, [r3, #0]
 80043be:	2b7e      	cmp	r3, #126	; 0x7e
 80043c0:	d806      	bhi.n	80043d0 <ssd1306_TestBorder+0x5c>
            x++;
 80043c2:	210f      	movs	r1, #15
 80043c4:	187b      	adds	r3, r7, r1
 80043c6:	781a      	ldrb	r2, [r3, #0]
 80043c8:	187b      	adds	r3, r7, r1
 80043ca:	3201      	adds	r2, #1
 80043cc:	701a      	strb	r2, [r3, #0]
 80043ce:	e027      	b.n	8004420 <ssd1306_TestBorder+0xac>
        else if((x == 127) && (y < 63))
 80043d0:	230f      	movs	r3, #15
 80043d2:	18fb      	adds	r3, r7, r3
 80043d4:	781b      	ldrb	r3, [r3, #0]
 80043d6:	2b7f      	cmp	r3, #127	; 0x7f
 80043d8:	d10b      	bne.n	80043f2 <ssd1306_TestBorder+0x7e>
 80043da:	230e      	movs	r3, #14
 80043dc:	18fb      	adds	r3, r7, r3
 80043de:	781b      	ldrb	r3, [r3, #0]
 80043e0:	2b3e      	cmp	r3, #62	; 0x3e
 80043e2:	d806      	bhi.n	80043f2 <ssd1306_TestBorder+0x7e>
            y++;
 80043e4:	210e      	movs	r1, #14
 80043e6:	187b      	adds	r3, r7, r1
 80043e8:	781a      	ldrb	r2, [r3, #0]
 80043ea:	187b      	adds	r3, r7, r1
 80043ec:	3201      	adds	r2, #1
 80043ee:	701a      	strb	r2, [r3, #0]
 80043f0:	e016      	b.n	8004420 <ssd1306_TestBorder+0xac>
        else if((y == 63) && (x > 0)) 
 80043f2:	230e      	movs	r3, #14
 80043f4:	18fb      	adds	r3, r7, r3
 80043f6:	781b      	ldrb	r3, [r3, #0]
 80043f8:	2b3f      	cmp	r3, #63	; 0x3f
 80043fa:	d10b      	bne.n	8004414 <ssd1306_TestBorder+0xa0>
 80043fc:	230f      	movs	r3, #15
 80043fe:	18fb      	adds	r3, r7, r3
 8004400:	781b      	ldrb	r3, [r3, #0]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d006      	beq.n	8004414 <ssd1306_TestBorder+0xa0>
            x--;
 8004406:	210f      	movs	r1, #15
 8004408:	187b      	adds	r3, r7, r1
 800440a:	781a      	ldrb	r2, [r3, #0]
 800440c:	187b      	adds	r3, r7, r1
 800440e:	3a01      	subs	r2, #1
 8004410:	701a      	strb	r2, [r3, #0]
 8004412:	e005      	b.n	8004420 <ssd1306_TestBorder+0xac>
        else
            y--;
 8004414:	210e      	movs	r1, #14
 8004416:	187b      	adds	r3, r7, r1
 8004418:	781a      	ldrb	r2, [r3, #0]
 800441a:	187b      	adds	r3, r7, r1
 800441c:	3a01      	subs	r2, #1
 800441e:	701a      	strb	r2, [r3, #0]

        ssd1306_DrawPixel(x, y, White);
 8004420:	230e      	movs	r3, #14
 8004422:	18fb      	adds	r3, r7, r3
 8004424:	7819      	ldrb	r1, [r3, #0]
 8004426:	230f      	movs	r3, #15
 8004428:	18fb      	adds	r3, r7, r3
 800442a:	781b      	ldrb	r3, [r3, #0]
 800442c:	2201      	movs	r2, #1
 800442e:	0018      	movs	r0, r3
 8004430:	f7ff fe5c 	bl	80040ec <ssd1306_DrawPixel>
        ssd1306_UpdateScreen();
 8004434:	f7ff fe2e 	bl	8004094 <ssd1306_UpdateScreen>
    
        HAL_Delay(5);
 8004438:	2005      	movs	r0, #5
 800443a:	f7fc ff0f 	bl	800125c <HAL_Delay>
        end = HAL_GetTick();
 800443e:	f7fc ff03 	bl	8001248 <HAL_GetTick>
 8004442:	0003      	movs	r3, r0
 8004444:	607b      	str	r3, [r7, #4]
    } while((end - start) < 8000);
 8004446:	687a      	ldr	r2, [r7, #4]
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	1ad3      	subs	r3, r2, r3
 800444c:	4a05      	ldr	r2, [pc, #20]	; (8004464 <ssd1306_TestBorder+0xf0>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d9a4      	bls.n	800439c <ssd1306_TestBorder+0x28>
   
    HAL_Delay(1000);
 8004452:	23fa      	movs	r3, #250	; 0xfa
 8004454:	009b      	lsls	r3, r3, #2
 8004456:	0018      	movs	r0, r3
 8004458:	f7fc ff00 	bl	800125c <HAL_Delay>
}
 800445c:	46c0      	nop			; (mov r8, r8)
 800445e:	46bd      	mov	sp, r7
 8004460:	b005      	add	sp, #20
 8004462:	bd90      	pop	{r4, r7, pc}
 8004464:	00001f3f 	.word	0x00001f3f

08004468 <ssd1306_TestFonts>:

void ssd1306_TestFonts() {
 8004468:	b580      	push	{r7, lr}
 800446a:	af00      	add	r7, sp, #0
    ssd1306_Fill(Black);
 800446c:	2000      	movs	r0, #0
 800446e:	f7ff fded 	bl	800404c <ssd1306_Fill>
    ssd1306_SetCursor(2, 0);
 8004472:	2100      	movs	r1, #0
 8004474:	2002      	movs	r0, #2
 8004476:	f7ff ff63 	bl	8004340 <ssd1306_SetCursor>
    ssd1306_WriteString("Font 16x26", Font_16x26, White);
 800447a:	4a11      	ldr	r2, [pc, #68]	; (80044c0 <ssd1306_TestFonts+0x58>)
 800447c:	4811      	ldr	r0, [pc, #68]	; (80044c4 <ssd1306_TestFonts+0x5c>)
 800447e:	2301      	movs	r3, #1
 8004480:	6811      	ldr	r1, [r2, #0]
 8004482:	6852      	ldr	r2, [r2, #4]
 8004484:	f7ff ff32 	bl	80042ec <ssd1306_WriteString>
    ssd1306_SetCursor(2, 26);
 8004488:	211a      	movs	r1, #26
 800448a:	2002      	movs	r0, #2
 800448c:	f7ff ff58 	bl	8004340 <ssd1306_SetCursor>
    ssd1306_WriteString("Font 11x18", Font_11x18, White);
 8004490:	4a0d      	ldr	r2, [pc, #52]	; (80044c8 <ssd1306_TestFonts+0x60>)
 8004492:	480e      	ldr	r0, [pc, #56]	; (80044cc <ssd1306_TestFonts+0x64>)
 8004494:	2301      	movs	r3, #1
 8004496:	6811      	ldr	r1, [r2, #0]
 8004498:	6852      	ldr	r2, [r2, #4]
 800449a:	f7ff ff27 	bl	80042ec <ssd1306_WriteString>
    ssd1306_SetCursor(2, 26+18);
 800449e:	212c      	movs	r1, #44	; 0x2c
 80044a0:	2002      	movs	r0, #2
 80044a2:	f7ff ff4d 	bl	8004340 <ssd1306_SetCursor>
    ssd1306_WriteString("Font 7x10", Font_7x10, White);
 80044a6:	4a0a      	ldr	r2, [pc, #40]	; (80044d0 <ssd1306_TestFonts+0x68>)
 80044a8:	480a      	ldr	r0, [pc, #40]	; (80044d4 <ssd1306_TestFonts+0x6c>)
 80044aa:	2301      	movs	r3, #1
 80044ac:	6811      	ldr	r1, [r2, #0]
 80044ae:	6852      	ldr	r2, [r2, #4]
 80044b0:	f7ff ff1c 	bl	80042ec <ssd1306_WriteString>
    ssd1306_UpdateScreen();
 80044b4:	f7ff fdee 	bl	8004094 <ssd1306_UpdateScreen>
}
 80044b8:	46c0      	nop			; (mov r8, r8)
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}
 80044be:	46c0      	nop			; (mov r8, r8)
 80044c0:	2000001c 	.word	0x2000001c
 80044c4:	08004f04 	.word	0x08004f04
 80044c8:	20000014 	.word	0x20000014
 80044cc:	08004f10 	.word	0x08004f10
 80044d0:	2000000c 	.word	0x2000000c
 80044d4:	08004f1c 	.word	0x08004f1c

080044d8 <ssd1306_TestFPS>:

void ssd1306_TestFPS() {
 80044d8:	b5b0      	push	{r4, r5, r7, lr}
 80044da:	b098      	sub	sp, #96	; 0x60
 80044dc:	af00      	add	r7, sp, #0
    ssd1306_Fill(White);
 80044de:	2001      	movs	r0, #1
 80044e0:	f7ff fdb4 	bl	800404c <ssd1306_Fill>
   
    uint32_t start = HAL_GetTick();
 80044e4:	f7fc feb0 	bl	8001248 <HAL_GetTick>
 80044e8:	0003      	movs	r3, r0
 80044ea:	65bb      	str	r3, [r7, #88]	; 0x58
    uint32_t end = start;
 80044ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80044ee:	657b      	str	r3, [r7, #84]	; 0x54
    int fps = 0;
 80044f0:	2300      	movs	r3, #0
 80044f2:	65fb      	str	r3, [r7, #92]	; 0x5c
    char message[] = "ABCDEFGHIJK";
 80044f4:	2344      	movs	r3, #68	; 0x44
 80044f6:	18fb      	adds	r3, r7, r3
 80044f8:	4a3c      	ldr	r2, [pc, #240]	; (80045ec <ssd1306_TestFPS+0x114>)
 80044fa:	ca13      	ldmia	r2!, {r0, r1, r4}
 80044fc:	c313      	stmia	r3!, {r0, r1, r4}
   
    ssd1306_SetCursor(2,0);
 80044fe:	2100      	movs	r1, #0
 8004500:	2002      	movs	r0, #2
 8004502:	f7ff ff1d 	bl	8004340 <ssd1306_SetCursor>
    ssd1306_WriteString("Testing...", Font_11x18, Black);
 8004506:	4a3a      	ldr	r2, [pc, #232]	; (80045f0 <ssd1306_TestFPS+0x118>)
 8004508:	483a      	ldr	r0, [pc, #232]	; (80045f4 <ssd1306_TestFPS+0x11c>)
 800450a:	2300      	movs	r3, #0
 800450c:	6811      	ldr	r1, [r2, #0]
 800450e:	6852      	ldr	r2, [r2, #4]
 8004510:	f7ff feec 	bl	80042ec <ssd1306_WriteString>
   
    do {
        ssd1306_SetCursor(2, 18);
 8004514:	2112      	movs	r1, #18
 8004516:	2002      	movs	r0, #2
 8004518:	f7ff ff12 	bl	8004340 <ssd1306_SetCursor>
        ssd1306_WriteString(message, Font_11x18, Black);
 800451c:	4a34      	ldr	r2, [pc, #208]	; (80045f0 <ssd1306_TestFPS+0x118>)
 800451e:	2444      	movs	r4, #68	; 0x44
 8004520:	1938      	adds	r0, r7, r4
 8004522:	2300      	movs	r3, #0
 8004524:	6811      	ldr	r1, [r2, #0]
 8004526:	6852      	ldr	r2, [r2, #4]
 8004528:	f7ff fee0 	bl	80042ec <ssd1306_WriteString>
        ssd1306_UpdateScreen();
 800452c:	f7ff fdb2 	bl	8004094 <ssd1306_UpdateScreen>
       
        char ch = message[0];
 8004530:	2553      	movs	r5, #83	; 0x53
 8004532:	197b      	adds	r3, r7, r5
 8004534:	193a      	adds	r2, r7, r4
 8004536:	7812      	ldrb	r2, [r2, #0]
 8004538:	701a      	strb	r2, [r3, #0]
        memmove(message, message+1, sizeof(message)-2);
 800453a:	193b      	adds	r3, r7, r4
 800453c:	3301      	adds	r3, #1
 800453e:	1938      	adds	r0, r7, r4
 8004540:	220a      	movs	r2, #10
 8004542:	0019      	movs	r1, r3
 8004544:	f000 f89c 	bl	8004680 <memmove>
        message[sizeof(message)-2] = ch;
 8004548:	193b      	adds	r3, r7, r4
 800454a:	197a      	adds	r2, r7, r5
 800454c:	7812      	ldrb	r2, [r2, #0]
 800454e:	729a      	strb	r2, [r3, #10]

        fps++;
 8004550:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004552:	3301      	adds	r3, #1
 8004554:	65fb      	str	r3, [r7, #92]	; 0x5c
        end = HAL_GetTick();
 8004556:	f7fc fe77 	bl	8001248 <HAL_GetTick>
 800455a:	0003      	movs	r3, r0
 800455c:	657b      	str	r3, [r7, #84]	; 0x54
    } while((end - start) < 5000);
 800455e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004560:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004562:	1ad3      	subs	r3, r2, r3
 8004564:	4a24      	ldr	r2, [pc, #144]	; (80045f8 <ssd1306_TestFPS+0x120>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d9d4      	bls.n	8004514 <ssd1306_TestFPS+0x3c>
   
    HAL_Delay(1000);
 800456a:	23fa      	movs	r3, #250	; 0xfa
 800456c:	009b      	lsls	r3, r3, #2
 800456e:	0018      	movs	r0, r3
 8004570:	f7fc fe74 	bl	800125c <HAL_Delay>

    char buff[64];
    fps = (float)fps / ((end - start) / 1000.0);
 8004574:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8004576:	f7fb fe53 	bl	8000220 <__aeabi_i2f>
 800457a:	1c03      	adds	r3, r0, #0
 800457c:	1c18      	adds	r0, r3, #0
 800457e:	f7fc fa03 	bl	8000988 <__aeabi_f2d>
 8004582:	0004      	movs	r4, r0
 8004584:	000d      	movs	r5, r1
 8004586:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004588:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800458a:	1ad3      	subs	r3, r2, r3
 800458c:	0018      	movs	r0, r3
 800458e:	f7fc f9c9 	bl	8000924 <__aeabi_ui2d>
 8004592:	2200      	movs	r2, #0
 8004594:	4b19      	ldr	r3, [pc, #100]	; (80045fc <ssd1306_TestFPS+0x124>)
 8004596:	f7fb fe8d 	bl	80002b4 <__aeabi_ddiv>
 800459a:	0002      	movs	r2, r0
 800459c:	000b      	movs	r3, r1
 800459e:	0020      	movs	r0, r4
 80045a0:	0029      	movs	r1, r5
 80045a2:	f7fb fe87 	bl	80002b4 <__aeabi_ddiv>
 80045a6:	0003      	movs	r3, r0
 80045a8:	000c      	movs	r4, r1
 80045aa:	0018      	movs	r0, r3
 80045ac:	0021      	movs	r1, r4
 80045ae:	f7fc f983 	bl	80008b8 <__aeabi_d2iz>
 80045b2:	0003      	movs	r3, r0
 80045b4:	65fb      	str	r3, [r7, #92]	; 0x5c
    snprintf(buff, sizeof(buff), "~%d FPS", fps);
 80045b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80045b8:	4a11      	ldr	r2, [pc, #68]	; (8004600 <ssd1306_TestFPS+0x128>)
 80045ba:	1d38      	adds	r0, r7, #4
 80045bc:	2140      	movs	r1, #64	; 0x40
 80045be:	f000 f87b 	bl	80046b8 <sniprintf>
   
    ssd1306_Fill(White);
 80045c2:	2001      	movs	r0, #1
 80045c4:	f7ff fd42 	bl	800404c <ssd1306_Fill>
    ssd1306_SetCursor(2, 18);
 80045c8:	2112      	movs	r1, #18
 80045ca:	2002      	movs	r0, #2
 80045cc:	f7ff feb8 	bl	8004340 <ssd1306_SetCursor>
    ssd1306_WriteString(buff, Font_11x18, Black);
 80045d0:	4a07      	ldr	r2, [pc, #28]	; (80045f0 <ssd1306_TestFPS+0x118>)
 80045d2:	1d38      	adds	r0, r7, #4
 80045d4:	2300      	movs	r3, #0
 80045d6:	6811      	ldr	r1, [r2, #0]
 80045d8:	6852      	ldr	r2, [r2, #4]
 80045da:	f7ff fe87 	bl	80042ec <ssd1306_WriteString>
    ssd1306_UpdateScreen();
 80045de:	f7ff fd59 	bl	8004094 <ssd1306_UpdateScreen>
}
 80045e2:	46c0      	nop			; (mov r8, r8)
 80045e4:	46bd      	mov	sp, r7
 80045e6:	b018      	add	sp, #96	; 0x60
 80045e8:	bdb0      	pop	{r4, r5, r7, pc}
 80045ea:	46c0      	nop			; (mov r8, r8)
 80045ec:	08004f3c 	.word	0x08004f3c
 80045f0:	20000014 	.word	0x20000014
 80045f4:	08004f28 	.word	0x08004f28
 80045f8:	00001387 	.word	0x00001387
 80045fc:	408f4000 	.word	0x408f4000
 8004600:	08004f34 	.word	0x08004f34

08004604 <ssd1306_TestAll>:

void ssd1306_TestAll() {
 8004604:	b580      	push	{r7, lr}
 8004606:	af00      	add	r7, sp, #0
    ssd1306_Init();
 8004608:	f7ff fcb2 	bl	8003f70 <ssd1306_Init>
    ssd1306_TestFPS();
 800460c:	f7ff ff64 	bl	80044d8 <ssd1306_TestFPS>
    HAL_Delay(3000);
 8004610:	4b05      	ldr	r3, [pc, #20]	; (8004628 <ssd1306_TestAll+0x24>)
 8004612:	0018      	movs	r0, r3
 8004614:	f7fc fe22 	bl	800125c <HAL_Delay>
    ssd1306_TestBorder();
 8004618:	f7ff feac 	bl	8004374 <ssd1306_TestBorder>
    ssd1306_TestFonts();
 800461c:	f7ff ff24 	bl	8004468 <ssd1306_TestFonts>
}
 8004620:	46c0      	nop			; (mov r8, r8)
 8004622:	46bd      	mov	sp, r7
 8004624:	bd80      	pop	{r7, pc}
 8004626:	46c0      	nop			; (mov r8, r8)
 8004628:	00000bb8 	.word	0x00000bb8

0800462c <__errno>:
 800462c:	4b01      	ldr	r3, [pc, #4]	; (8004634 <__errno+0x8>)
 800462e:	6818      	ldr	r0, [r3, #0]
 8004630:	4770      	bx	lr
 8004632:	46c0      	nop			; (mov r8, r8)
 8004634:	20000024 	.word	0x20000024

08004638 <__libc_init_array>:
 8004638:	b570      	push	{r4, r5, r6, lr}
 800463a:	2600      	movs	r6, #0
 800463c:	4d0c      	ldr	r5, [pc, #48]	; (8004670 <__libc_init_array+0x38>)
 800463e:	4c0d      	ldr	r4, [pc, #52]	; (8004674 <__libc_init_array+0x3c>)
 8004640:	1b64      	subs	r4, r4, r5
 8004642:	10a4      	asrs	r4, r4, #2
 8004644:	42a6      	cmp	r6, r4
 8004646:	d109      	bne.n	800465c <__libc_init_array+0x24>
 8004648:	2600      	movs	r6, #0
 800464a:	f000 fc3b 	bl	8004ec4 <_init>
 800464e:	4d0a      	ldr	r5, [pc, #40]	; (8004678 <__libc_init_array+0x40>)
 8004650:	4c0a      	ldr	r4, [pc, #40]	; (800467c <__libc_init_array+0x44>)
 8004652:	1b64      	subs	r4, r4, r5
 8004654:	10a4      	asrs	r4, r4, #2
 8004656:	42a6      	cmp	r6, r4
 8004658:	d105      	bne.n	8004666 <__libc_init_array+0x2e>
 800465a:	bd70      	pop	{r4, r5, r6, pc}
 800465c:	00b3      	lsls	r3, r6, #2
 800465e:	58eb      	ldr	r3, [r5, r3]
 8004660:	4798      	blx	r3
 8004662:	3601      	adds	r6, #1
 8004664:	e7ee      	b.n	8004644 <__libc_init_array+0xc>
 8004666:	00b3      	lsls	r3, r6, #2
 8004668:	58eb      	ldr	r3, [r5, r3]
 800466a:	4798      	blx	r3
 800466c:	3601      	adds	r6, #1
 800466e:	e7f2      	b.n	8004656 <__libc_init_array+0x1e>
 8004670:	080077e8 	.word	0x080077e8
 8004674:	080077e8 	.word	0x080077e8
 8004678:	080077e8 	.word	0x080077e8
 800467c:	080077ec 	.word	0x080077ec

08004680 <memmove>:
 8004680:	b510      	push	{r4, lr}
 8004682:	4288      	cmp	r0, r1
 8004684:	d902      	bls.n	800468c <memmove+0xc>
 8004686:	188b      	adds	r3, r1, r2
 8004688:	4298      	cmp	r0, r3
 800468a:	d303      	bcc.n	8004694 <memmove+0x14>
 800468c:	2300      	movs	r3, #0
 800468e:	e007      	b.n	80046a0 <memmove+0x20>
 8004690:	5c8b      	ldrb	r3, [r1, r2]
 8004692:	5483      	strb	r3, [r0, r2]
 8004694:	3a01      	subs	r2, #1
 8004696:	d2fb      	bcs.n	8004690 <memmove+0x10>
 8004698:	bd10      	pop	{r4, pc}
 800469a:	5ccc      	ldrb	r4, [r1, r3]
 800469c:	54c4      	strb	r4, [r0, r3]
 800469e:	3301      	adds	r3, #1
 80046a0:	429a      	cmp	r2, r3
 80046a2:	d1fa      	bne.n	800469a <memmove+0x1a>
 80046a4:	e7f8      	b.n	8004698 <memmove+0x18>

080046a6 <memset>:
 80046a6:	0003      	movs	r3, r0
 80046a8:	1812      	adds	r2, r2, r0
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d100      	bne.n	80046b0 <memset+0xa>
 80046ae:	4770      	bx	lr
 80046b0:	7019      	strb	r1, [r3, #0]
 80046b2:	3301      	adds	r3, #1
 80046b4:	e7f9      	b.n	80046aa <memset+0x4>
	...

080046b8 <sniprintf>:
 80046b8:	b40c      	push	{r2, r3}
 80046ba:	b530      	push	{r4, r5, lr}
 80046bc:	4b16      	ldr	r3, [pc, #88]	; (8004718 <sniprintf+0x60>)
 80046be:	b09d      	sub	sp, #116	; 0x74
 80046c0:	1e0c      	subs	r4, r1, #0
 80046c2:	681d      	ldr	r5, [r3, #0]
 80046c4:	da08      	bge.n	80046d8 <sniprintf+0x20>
 80046c6:	238b      	movs	r3, #139	; 0x8b
 80046c8:	2001      	movs	r0, #1
 80046ca:	602b      	str	r3, [r5, #0]
 80046cc:	4240      	negs	r0, r0
 80046ce:	b01d      	add	sp, #116	; 0x74
 80046d0:	bc30      	pop	{r4, r5}
 80046d2:	bc08      	pop	{r3}
 80046d4:	b002      	add	sp, #8
 80046d6:	4718      	bx	r3
 80046d8:	2382      	movs	r3, #130	; 0x82
 80046da:	a902      	add	r1, sp, #8
 80046dc:	009b      	lsls	r3, r3, #2
 80046de:	818b      	strh	r3, [r1, #12]
 80046e0:	2300      	movs	r3, #0
 80046e2:	9002      	str	r0, [sp, #8]
 80046e4:	6108      	str	r0, [r1, #16]
 80046e6:	429c      	cmp	r4, r3
 80046e8:	d000      	beq.n	80046ec <sniprintf+0x34>
 80046ea:	1e63      	subs	r3, r4, #1
 80046ec:	608b      	str	r3, [r1, #8]
 80046ee:	614b      	str	r3, [r1, #20]
 80046f0:	2301      	movs	r3, #1
 80046f2:	425b      	negs	r3, r3
 80046f4:	81cb      	strh	r3, [r1, #14]
 80046f6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80046f8:	ab21      	add	r3, sp, #132	; 0x84
 80046fa:	0028      	movs	r0, r5
 80046fc:	9301      	str	r3, [sp, #4]
 80046fe:	f000 f86f 	bl	80047e0 <_svfiprintf_r>
 8004702:	1c43      	adds	r3, r0, #1
 8004704:	da01      	bge.n	800470a <sniprintf+0x52>
 8004706:	238b      	movs	r3, #139	; 0x8b
 8004708:	602b      	str	r3, [r5, #0]
 800470a:	2c00      	cmp	r4, #0
 800470c:	d0df      	beq.n	80046ce <sniprintf+0x16>
 800470e:	2300      	movs	r3, #0
 8004710:	9a02      	ldr	r2, [sp, #8]
 8004712:	7013      	strb	r3, [r2, #0]
 8004714:	e7db      	b.n	80046ce <sniprintf+0x16>
 8004716:	46c0      	nop			; (mov r8, r8)
 8004718:	20000024 	.word	0x20000024

0800471c <__ssputs_r>:
 800471c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800471e:	688e      	ldr	r6, [r1, #8]
 8004720:	b085      	sub	sp, #20
 8004722:	0007      	movs	r7, r0
 8004724:	000c      	movs	r4, r1
 8004726:	9203      	str	r2, [sp, #12]
 8004728:	9301      	str	r3, [sp, #4]
 800472a:	429e      	cmp	r6, r3
 800472c:	d83c      	bhi.n	80047a8 <__ssputs_r+0x8c>
 800472e:	2390      	movs	r3, #144	; 0x90
 8004730:	898a      	ldrh	r2, [r1, #12]
 8004732:	00db      	lsls	r3, r3, #3
 8004734:	421a      	tst	r2, r3
 8004736:	d034      	beq.n	80047a2 <__ssputs_r+0x86>
 8004738:	2503      	movs	r5, #3
 800473a:	6909      	ldr	r1, [r1, #16]
 800473c:	6823      	ldr	r3, [r4, #0]
 800473e:	1a5b      	subs	r3, r3, r1
 8004740:	9302      	str	r3, [sp, #8]
 8004742:	6963      	ldr	r3, [r4, #20]
 8004744:	9802      	ldr	r0, [sp, #8]
 8004746:	435d      	muls	r5, r3
 8004748:	0feb      	lsrs	r3, r5, #31
 800474a:	195d      	adds	r5, r3, r5
 800474c:	9b01      	ldr	r3, [sp, #4]
 800474e:	106d      	asrs	r5, r5, #1
 8004750:	3301      	adds	r3, #1
 8004752:	181b      	adds	r3, r3, r0
 8004754:	42ab      	cmp	r3, r5
 8004756:	d900      	bls.n	800475a <__ssputs_r+0x3e>
 8004758:	001d      	movs	r5, r3
 800475a:	0553      	lsls	r3, r2, #21
 800475c:	d532      	bpl.n	80047c4 <__ssputs_r+0xa8>
 800475e:	0029      	movs	r1, r5
 8004760:	0038      	movs	r0, r7
 8004762:	f000 fb0f 	bl	8004d84 <_malloc_r>
 8004766:	1e06      	subs	r6, r0, #0
 8004768:	d109      	bne.n	800477e <__ssputs_r+0x62>
 800476a:	230c      	movs	r3, #12
 800476c:	603b      	str	r3, [r7, #0]
 800476e:	2340      	movs	r3, #64	; 0x40
 8004770:	2001      	movs	r0, #1
 8004772:	89a2      	ldrh	r2, [r4, #12]
 8004774:	4240      	negs	r0, r0
 8004776:	4313      	orrs	r3, r2
 8004778:	81a3      	strh	r3, [r4, #12]
 800477a:	b005      	add	sp, #20
 800477c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800477e:	9a02      	ldr	r2, [sp, #8]
 8004780:	6921      	ldr	r1, [r4, #16]
 8004782:	f000 faac 	bl	8004cde <memcpy>
 8004786:	89a3      	ldrh	r3, [r4, #12]
 8004788:	4a14      	ldr	r2, [pc, #80]	; (80047dc <__ssputs_r+0xc0>)
 800478a:	401a      	ands	r2, r3
 800478c:	2380      	movs	r3, #128	; 0x80
 800478e:	4313      	orrs	r3, r2
 8004790:	81a3      	strh	r3, [r4, #12]
 8004792:	9b02      	ldr	r3, [sp, #8]
 8004794:	6126      	str	r6, [r4, #16]
 8004796:	18f6      	adds	r6, r6, r3
 8004798:	6026      	str	r6, [r4, #0]
 800479a:	6165      	str	r5, [r4, #20]
 800479c:	9e01      	ldr	r6, [sp, #4]
 800479e:	1aed      	subs	r5, r5, r3
 80047a0:	60a5      	str	r5, [r4, #8]
 80047a2:	9b01      	ldr	r3, [sp, #4]
 80047a4:	429e      	cmp	r6, r3
 80047a6:	d900      	bls.n	80047aa <__ssputs_r+0x8e>
 80047a8:	9e01      	ldr	r6, [sp, #4]
 80047aa:	0032      	movs	r2, r6
 80047ac:	9903      	ldr	r1, [sp, #12]
 80047ae:	6820      	ldr	r0, [r4, #0]
 80047b0:	f7ff ff66 	bl	8004680 <memmove>
 80047b4:	68a3      	ldr	r3, [r4, #8]
 80047b6:	2000      	movs	r0, #0
 80047b8:	1b9b      	subs	r3, r3, r6
 80047ba:	60a3      	str	r3, [r4, #8]
 80047bc:	6823      	ldr	r3, [r4, #0]
 80047be:	199e      	adds	r6, r3, r6
 80047c0:	6026      	str	r6, [r4, #0]
 80047c2:	e7da      	b.n	800477a <__ssputs_r+0x5e>
 80047c4:	002a      	movs	r2, r5
 80047c6:	0038      	movs	r0, r7
 80047c8:	f000 fb3a 	bl	8004e40 <_realloc_r>
 80047cc:	1e06      	subs	r6, r0, #0
 80047ce:	d1e0      	bne.n	8004792 <__ssputs_r+0x76>
 80047d0:	6921      	ldr	r1, [r4, #16]
 80047d2:	0038      	movs	r0, r7
 80047d4:	f000 fa8c 	bl	8004cf0 <_free_r>
 80047d8:	e7c7      	b.n	800476a <__ssputs_r+0x4e>
 80047da:	46c0      	nop			; (mov r8, r8)
 80047dc:	fffffb7f 	.word	0xfffffb7f

080047e0 <_svfiprintf_r>:
 80047e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80047e2:	b0a1      	sub	sp, #132	; 0x84
 80047e4:	9003      	str	r0, [sp, #12]
 80047e6:	001d      	movs	r5, r3
 80047e8:	898b      	ldrh	r3, [r1, #12]
 80047ea:	000f      	movs	r7, r1
 80047ec:	0016      	movs	r6, r2
 80047ee:	061b      	lsls	r3, r3, #24
 80047f0:	d511      	bpl.n	8004816 <_svfiprintf_r+0x36>
 80047f2:	690b      	ldr	r3, [r1, #16]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d10e      	bne.n	8004816 <_svfiprintf_r+0x36>
 80047f8:	2140      	movs	r1, #64	; 0x40
 80047fa:	f000 fac3 	bl	8004d84 <_malloc_r>
 80047fe:	6038      	str	r0, [r7, #0]
 8004800:	6138      	str	r0, [r7, #16]
 8004802:	2800      	cmp	r0, #0
 8004804:	d105      	bne.n	8004812 <_svfiprintf_r+0x32>
 8004806:	230c      	movs	r3, #12
 8004808:	9a03      	ldr	r2, [sp, #12]
 800480a:	3801      	subs	r0, #1
 800480c:	6013      	str	r3, [r2, #0]
 800480e:	b021      	add	sp, #132	; 0x84
 8004810:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004812:	2340      	movs	r3, #64	; 0x40
 8004814:	617b      	str	r3, [r7, #20]
 8004816:	2300      	movs	r3, #0
 8004818:	ac08      	add	r4, sp, #32
 800481a:	6163      	str	r3, [r4, #20]
 800481c:	3320      	adds	r3, #32
 800481e:	7663      	strb	r3, [r4, #25]
 8004820:	3310      	adds	r3, #16
 8004822:	76a3      	strb	r3, [r4, #26]
 8004824:	9507      	str	r5, [sp, #28]
 8004826:	0035      	movs	r5, r6
 8004828:	782b      	ldrb	r3, [r5, #0]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d001      	beq.n	8004832 <_svfiprintf_r+0x52>
 800482e:	2b25      	cmp	r3, #37	; 0x25
 8004830:	d146      	bne.n	80048c0 <_svfiprintf_r+0xe0>
 8004832:	1bab      	subs	r3, r5, r6
 8004834:	9305      	str	r3, [sp, #20]
 8004836:	d00c      	beq.n	8004852 <_svfiprintf_r+0x72>
 8004838:	0032      	movs	r2, r6
 800483a:	0039      	movs	r1, r7
 800483c:	9803      	ldr	r0, [sp, #12]
 800483e:	f7ff ff6d 	bl	800471c <__ssputs_r>
 8004842:	1c43      	adds	r3, r0, #1
 8004844:	d100      	bne.n	8004848 <_svfiprintf_r+0x68>
 8004846:	e0ae      	b.n	80049a6 <_svfiprintf_r+0x1c6>
 8004848:	6962      	ldr	r2, [r4, #20]
 800484a:	9b05      	ldr	r3, [sp, #20]
 800484c:	4694      	mov	ip, r2
 800484e:	4463      	add	r3, ip
 8004850:	6163      	str	r3, [r4, #20]
 8004852:	782b      	ldrb	r3, [r5, #0]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d100      	bne.n	800485a <_svfiprintf_r+0x7a>
 8004858:	e0a5      	b.n	80049a6 <_svfiprintf_r+0x1c6>
 800485a:	2201      	movs	r2, #1
 800485c:	2300      	movs	r3, #0
 800485e:	4252      	negs	r2, r2
 8004860:	6062      	str	r2, [r4, #4]
 8004862:	a904      	add	r1, sp, #16
 8004864:	3254      	adds	r2, #84	; 0x54
 8004866:	1852      	adds	r2, r2, r1
 8004868:	1c6e      	adds	r6, r5, #1
 800486a:	6023      	str	r3, [r4, #0]
 800486c:	60e3      	str	r3, [r4, #12]
 800486e:	60a3      	str	r3, [r4, #8]
 8004870:	7013      	strb	r3, [r2, #0]
 8004872:	65a3      	str	r3, [r4, #88]	; 0x58
 8004874:	7831      	ldrb	r1, [r6, #0]
 8004876:	2205      	movs	r2, #5
 8004878:	4853      	ldr	r0, [pc, #332]	; (80049c8 <_svfiprintf_r+0x1e8>)
 800487a:	f000 fa25 	bl	8004cc8 <memchr>
 800487e:	1c75      	adds	r5, r6, #1
 8004880:	2800      	cmp	r0, #0
 8004882:	d11f      	bne.n	80048c4 <_svfiprintf_r+0xe4>
 8004884:	6822      	ldr	r2, [r4, #0]
 8004886:	06d3      	lsls	r3, r2, #27
 8004888:	d504      	bpl.n	8004894 <_svfiprintf_r+0xb4>
 800488a:	2353      	movs	r3, #83	; 0x53
 800488c:	a904      	add	r1, sp, #16
 800488e:	185b      	adds	r3, r3, r1
 8004890:	2120      	movs	r1, #32
 8004892:	7019      	strb	r1, [r3, #0]
 8004894:	0713      	lsls	r3, r2, #28
 8004896:	d504      	bpl.n	80048a2 <_svfiprintf_r+0xc2>
 8004898:	2353      	movs	r3, #83	; 0x53
 800489a:	a904      	add	r1, sp, #16
 800489c:	185b      	adds	r3, r3, r1
 800489e:	212b      	movs	r1, #43	; 0x2b
 80048a0:	7019      	strb	r1, [r3, #0]
 80048a2:	7833      	ldrb	r3, [r6, #0]
 80048a4:	2b2a      	cmp	r3, #42	; 0x2a
 80048a6:	d016      	beq.n	80048d6 <_svfiprintf_r+0xf6>
 80048a8:	0035      	movs	r5, r6
 80048aa:	2100      	movs	r1, #0
 80048ac:	200a      	movs	r0, #10
 80048ae:	68e3      	ldr	r3, [r4, #12]
 80048b0:	782a      	ldrb	r2, [r5, #0]
 80048b2:	1c6e      	adds	r6, r5, #1
 80048b4:	3a30      	subs	r2, #48	; 0x30
 80048b6:	2a09      	cmp	r2, #9
 80048b8:	d94e      	bls.n	8004958 <_svfiprintf_r+0x178>
 80048ba:	2900      	cmp	r1, #0
 80048bc:	d018      	beq.n	80048f0 <_svfiprintf_r+0x110>
 80048be:	e010      	b.n	80048e2 <_svfiprintf_r+0x102>
 80048c0:	3501      	adds	r5, #1
 80048c2:	e7b1      	b.n	8004828 <_svfiprintf_r+0x48>
 80048c4:	4b40      	ldr	r3, [pc, #256]	; (80049c8 <_svfiprintf_r+0x1e8>)
 80048c6:	6822      	ldr	r2, [r4, #0]
 80048c8:	1ac0      	subs	r0, r0, r3
 80048ca:	2301      	movs	r3, #1
 80048cc:	4083      	lsls	r3, r0
 80048ce:	4313      	orrs	r3, r2
 80048d0:	6023      	str	r3, [r4, #0]
 80048d2:	002e      	movs	r6, r5
 80048d4:	e7ce      	b.n	8004874 <_svfiprintf_r+0x94>
 80048d6:	9b07      	ldr	r3, [sp, #28]
 80048d8:	1d19      	adds	r1, r3, #4
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	9107      	str	r1, [sp, #28]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	db01      	blt.n	80048e6 <_svfiprintf_r+0x106>
 80048e2:	930b      	str	r3, [sp, #44]	; 0x2c
 80048e4:	e004      	b.n	80048f0 <_svfiprintf_r+0x110>
 80048e6:	425b      	negs	r3, r3
 80048e8:	60e3      	str	r3, [r4, #12]
 80048ea:	2302      	movs	r3, #2
 80048ec:	4313      	orrs	r3, r2
 80048ee:	6023      	str	r3, [r4, #0]
 80048f0:	782b      	ldrb	r3, [r5, #0]
 80048f2:	2b2e      	cmp	r3, #46	; 0x2e
 80048f4:	d10a      	bne.n	800490c <_svfiprintf_r+0x12c>
 80048f6:	786b      	ldrb	r3, [r5, #1]
 80048f8:	2b2a      	cmp	r3, #42	; 0x2a
 80048fa:	d135      	bne.n	8004968 <_svfiprintf_r+0x188>
 80048fc:	9b07      	ldr	r3, [sp, #28]
 80048fe:	3502      	adds	r5, #2
 8004900:	1d1a      	adds	r2, r3, #4
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	9207      	str	r2, [sp, #28]
 8004906:	2b00      	cmp	r3, #0
 8004908:	db2b      	blt.n	8004962 <_svfiprintf_r+0x182>
 800490a:	9309      	str	r3, [sp, #36]	; 0x24
 800490c:	4e2f      	ldr	r6, [pc, #188]	; (80049cc <_svfiprintf_r+0x1ec>)
 800490e:	7829      	ldrb	r1, [r5, #0]
 8004910:	2203      	movs	r2, #3
 8004912:	0030      	movs	r0, r6
 8004914:	f000 f9d8 	bl	8004cc8 <memchr>
 8004918:	2800      	cmp	r0, #0
 800491a:	d006      	beq.n	800492a <_svfiprintf_r+0x14a>
 800491c:	2340      	movs	r3, #64	; 0x40
 800491e:	1b80      	subs	r0, r0, r6
 8004920:	4083      	lsls	r3, r0
 8004922:	6822      	ldr	r2, [r4, #0]
 8004924:	3501      	adds	r5, #1
 8004926:	4313      	orrs	r3, r2
 8004928:	6023      	str	r3, [r4, #0]
 800492a:	7829      	ldrb	r1, [r5, #0]
 800492c:	2206      	movs	r2, #6
 800492e:	4828      	ldr	r0, [pc, #160]	; (80049d0 <_svfiprintf_r+0x1f0>)
 8004930:	1c6e      	adds	r6, r5, #1
 8004932:	7621      	strb	r1, [r4, #24]
 8004934:	f000 f9c8 	bl	8004cc8 <memchr>
 8004938:	2800      	cmp	r0, #0
 800493a:	d03c      	beq.n	80049b6 <_svfiprintf_r+0x1d6>
 800493c:	4b25      	ldr	r3, [pc, #148]	; (80049d4 <_svfiprintf_r+0x1f4>)
 800493e:	2b00      	cmp	r3, #0
 8004940:	d125      	bne.n	800498e <_svfiprintf_r+0x1ae>
 8004942:	2207      	movs	r2, #7
 8004944:	9b07      	ldr	r3, [sp, #28]
 8004946:	3307      	adds	r3, #7
 8004948:	4393      	bics	r3, r2
 800494a:	3308      	adds	r3, #8
 800494c:	9307      	str	r3, [sp, #28]
 800494e:	6963      	ldr	r3, [r4, #20]
 8004950:	9a04      	ldr	r2, [sp, #16]
 8004952:	189b      	adds	r3, r3, r2
 8004954:	6163      	str	r3, [r4, #20]
 8004956:	e766      	b.n	8004826 <_svfiprintf_r+0x46>
 8004958:	4343      	muls	r3, r0
 800495a:	2101      	movs	r1, #1
 800495c:	189b      	adds	r3, r3, r2
 800495e:	0035      	movs	r5, r6
 8004960:	e7a6      	b.n	80048b0 <_svfiprintf_r+0xd0>
 8004962:	2301      	movs	r3, #1
 8004964:	425b      	negs	r3, r3
 8004966:	e7d0      	b.n	800490a <_svfiprintf_r+0x12a>
 8004968:	2300      	movs	r3, #0
 800496a:	200a      	movs	r0, #10
 800496c:	001a      	movs	r2, r3
 800496e:	3501      	adds	r5, #1
 8004970:	6063      	str	r3, [r4, #4]
 8004972:	7829      	ldrb	r1, [r5, #0]
 8004974:	1c6e      	adds	r6, r5, #1
 8004976:	3930      	subs	r1, #48	; 0x30
 8004978:	2909      	cmp	r1, #9
 800497a:	d903      	bls.n	8004984 <_svfiprintf_r+0x1a4>
 800497c:	2b00      	cmp	r3, #0
 800497e:	d0c5      	beq.n	800490c <_svfiprintf_r+0x12c>
 8004980:	9209      	str	r2, [sp, #36]	; 0x24
 8004982:	e7c3      	b.n	800490c <_svfiprintf_r+0x12c>
 8004984:	4342      	muls	r2, r0
 8004986:	2301      	movs	r3, #1
 8004988:	1852      	adds	r2, r2, r1
 800498a:	0035      	movs	r5, r6
 800498c:	e7f1      	b.n	8004972 <_svfiprintf_r+0x192>
 800498e:	ab07      	add	r3, sp, #28
 8004990:	9300      	str	r3, [sp, #0]
 8004992:	003a      	movs	r2, r7
 8004994:	4b10      	ldr	r3, [pc, #64]	; (80049d8 <_svfiprintf_r+0x1f8>)
 8004996:	0021      	movs	r1, r4
 8004998:	9803      	ldr	r0, [sp, #12]
 800499a:	e000      	b.n	800499e <_svfiprintf_r+0x1be>
 800499c:	bf00      	nop
 800499e:	9004      	str	r0, [sp, #16]
 80049a0:	9b04      	ldr	r3, [sp, #16]
 80049a2:	3301      	adds	r3, #1
 80049a4:	d1d3      	bne.n	800494e <_svfiprintf_r+0x16e>
 80049a6:	89bb      	ldrh	r3, [r7, #12]
 80049a8:	980d      	ldr	r0, [sp, #52]	; 0x34
 80049aa:	065b      	lsls	r3, r3, #25
 80049ac:	d400      	bmi.n	80049b0 <_svfiprintf_r+0x1d0>
 80049ae:	e72e      	b.n	800480e <_svfiprintf_r+0x2e>
 80049b0:	2001      	movs	r0, #1
 80049b2:	4240      	negs	r0, r0
 80049b4:	e72b      	b.n	800480e <_svfiprintf_r+0x2e>
 80049b6:	ab07      	add	r3, sp, #28
 80049b8:	9300      	str	r3, [sp, #0]
 80049ba:	003a      	movs	r2, r7
 80049bc:	4b06      	ldr	r3, [pc, #24]	; (80049d8 <_svfiprintf_r+0x1f8>)
 80049be:	0021      	movs	r1, r4
 80049c0:	9803      	ldr	r0, [sp, #12]
 80049c2:	f000 f879 	bl	8004ab8 <_printf_i>
 80049c6:	e7ea      	b.n	800499e <_svfiprintf_r+0x1be>
 80049c8:	080077b4 	.word	0x080077b4
 80049cc:	080077ba 	.word	0x080077ba
 80049d0:	080077be 	.word	0x080077be
 80049d4:	00000000 	.word	0x00000000
 80049d8:	0800471d 	.word	0x0800471d

080049dc <_printf_common>:
 80049dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80049de:	0015      	movs	r5, r2
 80049e0:	9301      	str	r3, [sp, #4]
 80049e2:	688a      	ldr	r2, [r1, #8]
 80049e4:	690b      	ldr	r3, [r1, #16]
 80049e6:	9000      	str	r0, [sp, #0]
 80049e8:	000c      	movs	r4, r1
 80049ea:	4293      	cmp	r3, r2
 80049ec:	da00      	bge.n	80049f0 <_printf_common+0x14>
 80049ee:	0013      	movs	r3, r2
 80049f0:	0022      	movs	r2, r4
 80049f2:	602b      	str	r3, [r5, #0]
 80049f4:	3243      	adds	r2, #67	; 0x43
 80049f6:	7812      	ldrb	r2, [r2, #0]
 80049f8:	2a00      	cmp	r2, #0
 80049fa:	d001      	beq.n	8004a00 <_printf_common+0x24>
 80049fc:	3301      	adds	r3, #1
 80049fe:	602b      	str	r3, [r5, #0]
 8004a00:	6823      	ldr	r3, [r4, #0]
 8004a02:	069b      	lsls	r3, r3, #26
 8004a04:	d502      	bpl.n	8004a0c <_printf_common+0x30>
 8004a06:	682b      	ldr	r3, [r5, #0]
 8004a08:	3302      	adds	r3, #2
 8004a0a:	602b      	str	r3, [r5, #0]
 8004a0c:	2706      	movs	r7, #6
 8004a0e:	6823      	ldr	r3, [r4, #0]
 8004a10:	401f      	ands	r7, r3
 8004a12:	d027      	beq.n	8004a64 <_printf_common+0x88>
 8004a14:	0023      	movs	r3, r4
 8004a16:	3343      	adds	r3, #67	; 0x43
 8004a18:	781b      	ldrb	r3, [r3, #0]
 8004a1a:	1e5a      	subs	r2, r3, #1
 8004a1c:	4193      	sbcs	r3, r2
 8004a1e:	6822      	ldr	r2, [r4, #0]
 8004a20:	0692      	lsls	r2, r2, #26
 8004a22:	d430      	bmi.n	8004a86 <_printf_common+0xaa>
 8004a24:	0022      	movs	r2, r4
 8004a26:	9901      	ldr	r1, [sp, #4]
 8004a28:	3243      	adds	r2, #67	; 0x43
 8004a2a:	9800      	ldr	r0, [sp, #0]
 8004a2c:	9e08      	ldr	r6, [sp, #32]
 8004a2e:	47b0      	blx	r6
 8004a30:	1c43      	adds	r3, r0, #1
 8004a32:	d025      	beq.n	8004a80 <_printf_common+0xa4>
 8004a34:	2306      	movs	r3, #6
 8004a36:	6820      	ldr	r0, [r4, #0]
 8004a38:	682a      	ldr	r2, [r5, #0]
 8004a3a:	68e1      	ldr	r1, [r4, #12]
 8004a3c:	4003      	ands	r3, r0
 8004a3e:	2500      	movs	r5, #0
 8004a40:	2b04      	cmp	r3, #4
 8004a42:	d103      	bne.n	8004a4c <_printf_common+0x70>
 8004a44:	1a8d      	subs	r5, r1, r2
 8004a46:	43eb      	mvns	r3, r5
 8004a48:	17db      	asrs	r3, r3, #31
 8004a4a:	401d      	ands	r5, r3
 8004a4c:	68a3      	ldr	r3, [r4, #8]
 8004a4e:	6922      	ldr	r2, [r4, #16]
 8004a50:	4293      	cmp	r3, r2
 8004a52:	dd01      	ble.n	8004a58 <_printf_common+0x7c>
 8004a54:	1a9b      	subs	r3, r3, r2
 8004a56:	18ed      	adds	r5, r5, r3
 8004a58:	2700      	movs	r7, #0
 8004a5a:	42bd      	cmp	r5, r7
 8004a5c:	d120      	bne.n	8004aa0 <_printf_common+0xc4>
 8004a5e:	2000      	movs	r0, #0
 8004a60:	e010      	b.n	8004a84 <_printf_common+0xa8>
 8004a62:	3701      	adds	r7, #1
 8004a64:	68e3      	ldr	r3, [r4, #12]
 8004a66:	682a      	ldr	r2, [r5, #0]
 8004a68:	1a9b      	subs	r3, r3, r2
 8004a6a:	42bb      	cmp	r3, r7
 8004a6c:	ddd2      	ble.n	8004a14 <_printf_common+0x38>
 8004a6e:	0022      	movs	r2, r4
 8004a70:	2301      	movs	r3, #1
 8004a72:	3219      	adds	r2, #25
 8004a74:	9901      	ldr	r1, [sp, #4]
 8004a76:	9800      	ldr	r0, [sp, #0]
 8004a78:	9e08      	ldr	r6, [sp, #32]
 8004a7a:	47b0      	blx	r6
 8004a7c:	1c43      	adds	r3, r0, #1
 8004a7e:	d1f0      	bne.n	8004a62 <_printf_common+0x86>
 8004a80:	2001      	movs	r0, #1
 8004a82:	4240      	negs	r0, r0
 8004a84:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004a86:	2030      	movs	r0, #48	; 0x30
 8004a88:	18e1      	adds	r1, r4, r3
 8004a8a:	3143      	adds	r1, #67	; 0x43
 8004a8c:	7008      	strb	r0, [r1, #0]
 8004a8e:	0021      	movs	r1, r4
 8004a90:	1c5a      	adds	r2, r3, #1
 8004a92:	3145      	adds	r1, #69	; 0x45
 8004a94:	7809      	ldrb	r1, [r1, #0]
 8004a96:	18a2      	adds	r2, r4, r2
 8004a98:	3243      	adds	r2, #67	; 0x43
 8004a9a:	3302      	adds	r3, #2
 8004a9c:	7011      	strb	r1, [r2, #0]
 8004a9e:	e7c1      	b.n	8004a24 <_printf_common+0x48>
 8004aa0:	0022      	movs	r2, r4
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	321a      	adds	r2, #26
 8004aa6:	9901      	ldr	r1, [sp, #4]
 8004aa8:	9800      	ldr	r0, [sp, #0]
 8004aaa:	9e08      	ldr	r6, [sp, #32]
 8004aac:	47b0      	blx	r6
 8004aae:	1c43      	adds	r3, r0, #1
 8004ab0:	d0e6      	beq.n	8004a80 <_printf_common+0xa4>
 8004ab2:	3701      	adds	r7, #1
 8004ab4:	e7d1      	b.n	8004a5a <_printf_common+0x7e>
	...

08004ab8 <_printf_i>:
 8004ab8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004aba:	b089      	sub	sp, #36	; 0x24
 8004abc:	9204      	str	r2, [sp, #16]
 8004abe:	000a      	movs	r2, r1
 8004ac0:	3243      	adds	r2, #67	; 0x43
 8004ac2:	9305      	str	r3, [sp, #20]
 8004ac4:	9003      	str	r0, [sp, #12]
 8004ac6:	9202      	str	r2, [sp, #8]
 8004ac8:	7e0a      	ldrb	r2, [r1, #24]
 8004aca:	000c      	movs	r4, r1
 8004acc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004ace:	2a6e      	cmp	r2, #110	; 0x6e
 8004ad0:	d100      	bne.n	8004ad4 <_printf_i+0x1c>
 8004ad2:	e086      	b.n	8004be2 <_printf_i+0x12a>
 8004ad4:	d81f      	bhi.n	8004b16 <_printf_i+0x5e>
 8004ad6:	2a63      	cmp	r2, #99	; 0x63
 8004ad8:	d033      	beq.n	8004b42 <_printf_i+0x8a>
 8004ada:	d808      	bhi.n	8004aee <_printf_i+0x36>
 8004adc:	2a00      	cmp	r2, #0
 8004ade:	d100      	bne.n	8004ae2 <_printf_i+0x2a>
 8004ae0:	e08c      	b.n	8004bfc <_printf_i+0x144>
 8004ae2:	2a58      	cmp	r2, #88	; 0x58
 8004ae4:	d04d      	beq.n	8004b82 <_printf_i+0xca>
 8004ae6:	0025      	movs	r5, r4
 8004ae8:	3542      	adds	r5, #66	; 0x42
 8004aea:	702a      	strb	r2, [r5, #0]
 8004aec:	e030      	b.n	8004b50 <_printf_i+0x98>
 8004aee:	2a64      	cmp	r2, #100	; 0x64
 8004af0:	d001      	beq.n	8004af6 <_printf_i+0x3e>
 8004af2:	2a69      	cmp	r2, #105	; 0x69
 8004af4:	d1f7      	bne.n	8004ae6 <_printf_i+0x2e>
 8004af6:	6819      	ldr	r1, [r3, #0]
 8004af8:	6825      	ldr	r5, [r4, #0]
 8004afa:	1d0a      	adds	r2, r1, #4
 8004afc:	0628      	lsls	r0, r5, #24
 8004afe:	d529      	bpl.n	8004b54 <_printf_i+0x9c>
 8004b00:	6808      	ldr	r0, [r1, #0]
 8004b02:	601a      	str	r2, [r3, #0]
 8004b04:	2800      	cmp	r0, #0
 8004b06:	da03      	bge.n	8004b10 <_printf_i+0x58>
 8004b08:	232d      	movs	r3, #45	; 0x2d
 8004b0a:	9a02      	ldr	r2, [sp, #8]
 8004b0c:	4240      	negs	r0, r0
 8004b0e:	7013      	strb	r3, [r2, #0]
 8004b10:	4e6b      	ldr	r6, [pc, #428]	; (8004cc0 <_printf_i+0x208>)
 8004b12:	270a      	movs	r7, #10
 8004b14:	e04f      	b.n	8004bb6 <_printf_i+0xfe>
 8004b16:	2a73      	cmp	r2, #115	; 0x73
 8004b18:	d074      	beq.n	8004c04 <_printf_i+0x14c>
 8004b1a:	d808      	bhi.n	8004b2e <_printf_i+0x76>
 8004b1c:	2a6f      	cmp	r2, #111	; 0x6f
 8004b1e:	d01f      	beq.n	8004b60 <_printf_i+0xa8>
 8004b20:	2a70      	cmp	r2, #112	; 0x70
 8004b22:	d1e0      	bne.n	8004ae6 <_printf_i+0x2e>
 8004b24:	2220      	movs	r2, #32
 8004b26:	6809      	ldr	r1, [r1, #0]
 8004b28:	430a      	orrs	r2, r1
 8004b2a:	6022      	str	r2, [r4, #0]
 8004b2c:	e003      	b.n	8004b36 <_printf_i+0x7e>
 8004b2e:	2a75      	cmp	r2, #117	; 0x75
 8004b30:	d016      	beq.n	8004b60 <_printf_i+0xa8>
 8004b32:	2a78      	cmp	r2, #120	; 0x78
 8004b34:	d1d7      	bne.n	8004ae6 <_printf_i+0x2e>
 8004b36:	0022      	movs	r2, r4
 8004b38:	2178      	movs	r1, #120	; 0x78
 8004b3a:	3245      	adds	r2, #69	; 0x45
 8004b3c:	7011      	strb	r1, [r2, #0]
 8004b3e:	4e61      	ldr	r6, [pc, #388]	; (8004cc4 <_printf_i+0x20c>)
 8004b40:	e022      	b.n	8004b88 <_printf_i+0xd0>
 8004b42:	0025      	movs	r5, r4
 8004b44:	681a      	ldr	r2, [r3, #0]
 8004b46:	3542      	adds	r5, #66	; 0x42
 8004b48:	1d11      	adds	r1, r2, #4
 8004b4a:	6019      	str	r1, [r3, #0]
 8004b4c:	6813      	ldr	r3, [r2, #0]
 8004b4e:	702b      	strb	r3, [r5, #0]
 8004b50:	2301      	movs	r3, #1
 8004b52:	e065      	b.n	8004c20 <_printf_i+0x168>
 8004b54:	6808      	ldr	r0, [r1, #0]
 8004b56:	601a      	str	r2, [r3, #0]
 8004b58:	0669      	lsls	r1, r5, #25
 8004b5a:	d5d3      	bpl.n	8004b04 <_printf_i+0x4c>
 8004b5c:	b200      	sxth	r0, r0
 8004b5e:	e7d1      	b.n	8004b04 <_printf_i+0x4c>
 8004b60:	6819      	ldr	r1, [r3, #0]
 8004b62:	6825      	ldr	r5, [r4, #0]
 8004b64:	1d08      	adds	r0, r1, #4
 8004b66:	6018      	str	r0, [r3, #0]
 8004b68:	6808      	ldr	r0, [r1, #0]
 8004b6a:	062e      	lsls	r6, r5, #24
 8004b6c:	d505      	bpl.n	8004b7a <_printf_i+0xc2>
 8004b6e:	4e54      	ldr	r6, [pc, #336]	; (8004cc0 <_printf_i+0x208>)
 8004b70:	2708      	movs	r7, #8
 8004b72:	2a6f      	cmp	r2, #111	; 0x6f
 8004b74:	d01b      	beq.n	8004bae <_printf_i+0xf6>
 8004b76:	270a      	movs	r7, #10
 8004b78:	e019      	b.n	8004bae <_printf_i+0xf6>
 8004b7a:	066d      	lsls	r5, r5, #25
 8004b7c:	d5f7      	bpl.n	8004b6e <_printf_i+0xb6>
 8004b7e:	b280      	uxth	r0, r0
 8004b80:	e7f5      	b.n	8004b6e <_printf_i+0xb6>
 8004b82:	3145      	adds	r1, #69	; 0x45
 8004b84:	4e4e      	ldr	r6, [pc, #312]	; (8004cc0 <_printf_i+0x208>)
 8004b86:	700a      	strb	r2, [r1, #0]
 8004b88:	6818      	ldr	r0, [r3, #0]
 8004b8a:	6822      	ldr	r2, [r4, #0]
 8004b8c:	1d01      	adds	r1, r0, #4
 8004b8e:	6800      	ldr	r0, [r0, #0]
 8004b90:	6019      	str	r1, [r3, #0]
 8004b92:	0615      	lsls	r5, r2, #24
 8004b94:	d521      	bpl.n	8004bda <_printf_i+0x122>
 8004b96:	07d3      	lsls	r3, r2, #31
 8004b98:	d502      	bpl.n	8004ba0 <_printf_i+0xe8>
 8004b9a:	2320      	movs	r3, #32
 8004b9c:	431a      	orrs	r2, r3
 8004b9e:	6022      	str	r2, [r4, #0]
 8004ba0:	2710      	movs	r7, #16
 8004ba2:	2800      	cmp	r0, #0
 8004ba4:	d103      	bne.n	8004bae <_printf_i+0xf6>
 8004ba6:	2320      	movs	r3, #32
 8004ba8:	6822      	ldr	r2, [r4, #0]
 8004baa:	439a      	bics	r2, r3
 8004bac:	6022      	str	r2, [r4, #0]
 8004bae:	0023      	movs	r3, r4
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	3343      	adds	r3, #67	; 0x43
 8004bb4:	701a      	strb	r2, [r3, #0]
 8004bb6:	6863      	ldr	r3, [r4, #4]
 8004bb8:	60a3      	str	r3, [r4, #8]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	db58      	blt.n	8004c70 <_printf_i+0x1b8>
 8004bbe:	2204      	movs	r2, #4
 8004bc0:	6821      	ldr	r1, [r4, #0]
 8004bc2:	4391      	bics	r1, r2
 8004bc4:	6021      	str	r1, [r4, #0]
 8004bc6:	2800      	cmp	r0, #0
 8004bc8:	d154      	bne.n	8004c74 <_printf_i+0x1bc>
 8004bca:	9d02      	ldr	r5, [sp, #8]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d05a      	beq.n	8004c86 <_printf_i+0x1ce>
 8004bd0:	0025      	movs	r5, r4
 8004bd2:	7833      	ldrb	r3, [r6, #0]
 8004bd4:	3542      	adds	r5, #66	; 0x42
 8004bd6:	702b      	strb	r3, [r5, #0]
 8004bd8:	e055      	b.n	8004c86 <_printf_i+0x1ce>
 8004bda:	0655      	lsls	r5, r2, #25
 8004bdc:	d5db      	bpl.n	8004b96 <_printf_i+0xde>
 8004bde:	b280      	uxth	r0, r0
 8004be0:	e7d9      	b.n	8004b96 <_printf_i+0xde>
 8004be2:	681a      	ldr	r2, [r3, #0]
 8004be4:	680d      	ldr	r5, [r1, #0]
 8004be6:	1d10      	adds	r0, r2, #4
 8004be8:	6949      	ldr	r1, [r1, #20]
 8004bea:	6018      	str	r0, [r3, #0]
 8004bec:	6813      	ldr	r3, [r2, #0]
 8004bee:	062e      	lsls	r6, r5, #24
 8004bf0:	d501      	bpl.n	8004bf6 <_printf_i+0x13e>
 8004bf2:	6019      	str	r1, [r3, #0]
 8004bf4:	e002      	b.n	8004bfc <_printf_i+0x144>
 8004bf6:	066d      	lsls	r5, r5, #25
 8004bf8:	d5fb      	bpl.n	8004bf2 <_printf_i+0x13a>
 8004bfa:	8019      	strh	r1, [r3, #0]
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	9d02      	ldr	r5, [sp, #8]
 8004c00:	6123      	str	r3, [r4, #16]
 8004c02:	e04f      	b.n	8004ca4 <_printf_i+0x1ec>
 8004c04:	681a      	ldr	r2, [r3, #0]
 8004c06:	1d11      	adds	r1, r2, #4
 8004c08:	6019      	str	r1, [r3, #0]
 8004c0a:	6815      	ldr	r5, [r2, #0]
 8004c0c:	2100      	movs	r1, #0
 8004c0e:	6862      	ldr	r2, [r4, #4]
 8004c10:	0028      	movs	r0, r5
 8004c12:	f000 f859 	bl	8004cc8 <memchr>
 8004c16:	2800      	cmp	r0, #0
 8004c18:	d001      	beq.n	8004c1e <_printf_i+0x166>
 8004c1a:	1b40      	subs	r0, r0, r5
 8004c1c:	6060      	str	r0, [r4, #4]
 8004c1e:	6863      	ldr	r3, [r4, #4]
 8004c20:	6123      	str	r3, [r4, #16]
 8004c22:	2300      	movs	r3, #0
 8004c24:	9a02      	ldr	r2, [sp, #8]
 8004c26:	7013      	strb	r3, [r2, #0]
 8004c28:	e03c      	b.n	8004ca4 <_printf_i+0x1ec>
 8004c2a:	6923      	ldr	r3, [r4, #16]
 8004c2c:	002a      	movs	r2, r5
 8004c2e:	9904      	ldr	r1, [sp, #16]
 8004c30:	9803      	ldr	r0, [sp, #12]
 8004c32:	9d05      	ldr	r5, [sp, #20]
 8004c34:	47a8      	blx	r5
 8004c36:	1c43      	adds	r3, r0, #1
 8004c38:	d03e      	beq.n	8004cb8 <_printf_i+0x200>
 8004c3a:	6823      	ldr	r3, [r4, #0]
 8004c3c:	079b      	lsls	r3, r3, #30
 8004c3e:	d415      	bmi.n	8004c6c <_printf_i+0x1b4>
 8004c40:	9b07      	ldr	r3, [sp, #28]
 8004c42:	68e0      	ldr	r0, [r4, #12]
 8004c44:	4298      	cmp	r0, r3
 8004c46:	da39      	bge.n	8004cbc <_printf_i+0x204>
 8004c48:	0018      	movs	r0, r3
 8004c4a:	e037      	b.n	8004cbc <_printf_i+0x204>
 8004c4c:	0022      	movs	r2, r4
 8004c4e:	2301      	movs	r3, #1
 8004c50:	3219      	adds	r2, #25
 8004c52:	9904      	ldr	r1, [sp, #16]
 8004c54:	9803      	ldr	r0, [sp, #12]
 8004c56:	9e05      	ldr	r6, [sp, #20]
 8004c58:	47b0      	blx	r6
 8004c5a:	1c43      	adds	r3, r0, #1
 8004c5c:	d02c      	beq.n	8004cb8 <_printf_i+0x200>
 8004c5e:	3501      	adds	r5, #1
 8004c60:	68e3      	ldr	r3, [r4, #12]
 8004c62:	9a07      	ldr	r2, [sp, #28]
 8004c64:	1a9b      	subs	r3, r3, r2
 8004c66:	42ab      	cmp	r3, r5
 8004c68:	dcf0      	bgt.n	8004c4c <_printf_i+0x194>
 8004c6a:	e7e9      	b.n	8004c40 <_printf_i+0x188>
 8004c6c:	2500      	movs	r5, #0
 8004c6e:	e7f7      	b.n	8004c60 <_printf_i+0x1a8>
 8004c70:	2800      	cmp	r0, #0
 8004c72:	d0ad      	beq.n	8004bd0 <_printf_i+0x118>
 8004c74:	9d02      	ldr	r5, [sp, #8]
 8004c76:	0039      	movs	r1, r7
 8004c78:	f7fb facc 	bl	8000214 <__aeabi_uidivmod>
 8004c7c:	5c73      	ldrb	r3, [r6, r1]
 8004c7e:	3d01      	subs	r5, #1
 8004c80:	702b      	strb	r3, [r5, #0]
 8004c82:	2800      	cmp	r0, #0
 8004c84:	d1f7      	bne.n	8004c76 <_printf_i+0x1be>
 8004c86:	2f08      	cmp	r7, #8
 8004c88:	d109      	bne.n	8004c9e <_printf_i+0x1e6>
 8004c8a:	6823      	ldr	r3, [r4, #0]
 8004c8c:	07db      	lsls	r3, r3, #31
 8004c8e:	d506      	bpl.n	8004c9e <_printf_i+0x1e6>
 8004c90:	6863      	ldr	r3, [r4, #4]
 8004c92:	6922      	ldr	r2, [r4, #16]
 8004c94:	4293      	cmp	r3, r2
 8004c96:	dc02      	bgt.n	8004c9e <_printf_i+0x1e6>
 8004c98:	2330      	movs	r3, #48	; 0x30
 8004c9a:	3d01      	subs	r5, #1
 8004c9c:	702b      	strb	r3, [r5, #0]
 8004c9e:	9b02      	ldr	r3, [sp, #8]
 8004ca0:	1b5b      	subs	r3, r3, r5
 8004ca2:	6123      	str	r3, [r4, #16]
 8004ca4:	9b05      	ldr	r3, [sp, #20]
 8004ca6:	aa07      	add	r2, sp, #28
 8004ca8:	9300      	str	r3, [sp, #0]
 8004caa:	0021      	movs	r1, r4
 8004cac:	9b04      	ldr	r3, [sp, #16]
 8004cae:	9803      	ldr	r0, [sp, #12]
 8004cb0:	f7ff fe94 	bl	80049dc <_printf_common>
 8004cb4:	1c43      	adds	r3, r0, #1
 8004cb6:	d1b8      	bne.n	8004c2a <_printf_i+0x172>
 8004cb8:	2001      	movs	r0, #1
 8004cba:	4240      	negs	r0, r0
 8004cbc:	b009      	add	sp, #36	; 0x24
 8004cbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004cc0:	080077c5 	.word	0x080077c5
 8004cc4:	080077d6 	.word	0x080077d6

08004cc8 <memchr>:
 8004cc8:	b2c9      	uxtb	r1, r1
 8004cca:	1882      	adds	r2, r0, r2
 8004ccc:	4290      	cmp	r0, r2
 8004cce:	d101      	bne.n	8004cd4 <memchr+0xc>
 8004cd0:	2000      	movs	r0, #0
 8004cd2:	4770      	bx	lr
 8004cd4:	7803      	ldrb	r3, [r0, #0]
 8004cd6:	428b      	cmp	r3, r1
 8004cd8:	d0fb      	beq.n	8004cd2 <memchr+0xa>
 8004cda:	3001      	adds	r0, #1
 8004cdc:	e7f6      	b.n	8004ccc <memchr+0x4>

08004cde <memcpy>:
 8004cde:	2300      	movs	r3, #0
 8004ce0:	b510      	push	{r4, lr}
 8004ce2:	429a      	cmp	r2, r3
 8004ce4:	d100      	bne.n	8004ce8 <memcpy+0xa>
 8004ce6:	bd10      	pop	{r4, pc}
 8004ce8:	5ccc      	ldrb	r4, [r1, r3]
 8004cea:	54c4      	strb	r4, [r0, r3]
 8004cec:	3301      	adds	r3, #1
 8004cee:	e7f8      	b.n	8004ce2 <memcpy+0x4>

08004cf0 <_free_r>:
 8004cf0:	b570      	push	{r4, r5, r6, lr}
 8004cf2:	0005      	movs	r5, r0
 8004cf4:	2900      	cmp	r1, #0
 8004cf6:	d010      	beq.n	8004d1a <_free_r+0x2a>
 8004cf8:	1f0c      	subs	r4, r1, #4
 8004cfa:	6823      	ldr	r3, [r4, #0]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	da00      	bge.n	8004d02 <_free_r+0x12>
 8004d00:	18e4      	adds	r4, r4, r3
 8004d02:	0028      	movs	r0, r5
 8004d04:	f000 f8d4 	bl	8004eb0 <__malloc_lock>
 8004d08:	4a1d      	ldr	r2, [pc, #116]	; (8004d80 <_free_r+0x90>)
 8004d0a:	6813      	ldr	r3, [r2, #0]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d105      	bne.n	8004d1c <_free_r+0x2c>
 8004d10:	6063      	str	r3, [r4, #4]
 8004d12:	6014      	str	r4, [r2, #0]
 8004d14:	0028      	movs	r0, r5
 8004d16:	f000 f8cc 	bl	8004eb2 <__malloc_unlock>
 8004d1a:	bd70      	pop	{r4, r5, r6, pc}
 8004d1c:	42a3      	cmp	r3, r4
 8004d1e:	d909      	bls.n	8004d34 <_free_r+0x44>
 8004d20:	6821      	ldr	r1, [r4, #0]
 8004d22:	1860      	adds	r0, r4, r1
 8004d24:	4283      	cmp	r3, r0
 8004d26:	d1f3      	bne.n	8004d10 <_free_r+0x20>
 8004d28:	6818      	ldr	r0, [r3, #0]
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	1841      	adds	r1, r0, r1
 8004d2e:	6021      	str	r1, [r4, #0]
 8004d30:	e7ee      	b.n	8004d10 <_free_r+0x20>
 8004d32:	0013      	movs	r3, r2
 8004d34:	685a      	ldr	r2, [r3, #4]
 8004d36:	2a00      	cmp	r2, #0
 8004d38:	d001      	beq.n	8004d3e <_free_r+0x4e>
 8004d3a:	42a2      	cmp	r2, r4
 8004d3c:	d9f9      	bls.n	8004d32 <_free_r+0x42>
 8004d3e:	6819      	ldr	r1, [r3, #0]
 8004d40:	1858      	adds	r0, r3, r1
 8004d42:	42a0      	cmp	r0, r4
 8004d44:	d10b      	bne.n	8004d5e <_free_r+0x6e>
 8004d46:	6820      	ldr	r0, [r4, #0]
 8004d48:	1809      	adds	r1, r1, r0
 8004d4a:	1858      	adds	r0, r3, r1
 8004d4c:	6019      	str	r1, [r3, #0]
 8004d4e:	4282      	cmp	r2, r0
 8004d50:	d1e0      	bne.n	8004d14 <_free_r+0x24>
 8004d52:	6810      	ldr	r0, [r2, #0]
 8004d54:	6852      	ldr	r2, [r2, #4]
 8004d56:	1841      	adds	r1, r0, r1
 8004d58:	6019      	str	r1, [r3, #0]
 8004d5a:	605a      	str	r2, [r3, #4]
 8004d5c:	e7da      	b.n	8004d14 <_free_r+0x24>
 8004d5e:	42a0      	cmp	r0, r4
 8004d60:	d902      	bls.n	8004d68 <_free_r+0x78>
 8004d62:	230c      	movs	r3, #12
 8004d64:	602b      	str	r3, [r5, #0]
 8004d66:	e7d5      	b.n	8004d14 <_free_r+0x24>
 8004d68:	6821      	ldr	r1, [r4, #0]
 8004d6a:	1860      	adds	r0, r4, r1
 8004d6c:	4282      	cmp	r2, r0
 8004d6e:	d103      	bne.n	8004d78 <_free_r+0x88>
 8004d70:	6810      	ldr	r0, [r2, #0]
 8004d72:	6852      	ldr	r2, [r2, #4]
 8004d74:	1841      	adds	r1, r0, r1
 8004d76:	6021      	str	r1, [r4, #0]
 8004d78:	6062      	str	r2, [r4, #4]
 8004d7a:	605c      	str	r4, [r3, #4]
 8004d7c:	e7ca      	b.n	8004d14 <_free_r+0x24>
 8004d7e:	46c0      	nop			; (mov r8, r8)
 8004d80:	200004b0 	.word	0x200004b0

08004d84 <_malloc_r>:
 8004d84:	2303      	movs	r3, #3
 8004d86:	b570      	push	{r4, r5, r6, lr}
 8004d88:	1ccd      	adds	r5, r1, #3
 8004d8a:	439d      	bics	r5, r3
 8004d8c:	3508      	adds	r5, #8
 8004d8e:	0006      	movs	r6, r0
 8004d90:	2d0c      	cmp	r5, #12
 8004d92:	d21e      	bcs.n	8004dd2 <_malloc_r+0x4e>
 8004d94:	250c      	movs	r5, #12
 8004d96:	42a9      	cmp	r1, r5
 8004d98:	d81d      	bhi.n	8004dd6 <_malloc_r+0x52>
 8004d9a:	0030      	movs	r0, r6
 8004d9c:	f000 f888 	bl	8004eb0 <__malloc_lock>
 8004da0:	4a25      	ldr	r2, [pc, #148]	; (8004e38 <_malloc_r+0xb4>)
 8004da2:	6814      	ldr	r4, [r2, #0]
 8004da4:	0021      	movs	r1, r4
 8004da6:	2900      	cmp	r1, #0
 8004da8:	d119      	bne.n	8004dde <_malloc_r+0x5a>
 8004daa:	4c24      	ldr	r4, [pc, #144]	; (8004e3c <_malloc_r+0xb8>)
 8004dac:	6823      	ldr	r3, [r4, #0]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d103      	bne.n	8004dba <_malloc_r+0x36>
 8004db2:	0030      	movs	r0, r6
 8004db4:	f000 f86a 	bl	8004e8c <_sbrk_r>
 8004db8:	6020      	str	r0, [r4, #0]
 8004dba:	0029      	movs	r1, r5
 8004dbc:	0030      	movs	r0, r6
 8004dbe:	f000 f865 	bl	8004e8c <_sbrk_r>
 8004dc2:	1c43      	adds	r3, r0, #1
 8004dc4:	d12b      	bne.n	8004e1e <_malloc_r+0x9a>
 8004dc6:	230c      	movs	r3, #12
 8004dc8:	0030      	movs	r0, r6
 8004dca:	6033      	str	r3, [r6, #0]
 8004dcc:	f000 f871 	bl	8004eb2 <__malloc_unlock>
 8004dd0:	e003      	b.n	8004dda <_malloc_r+0x56>
 8004dd2:	2d00      	cmp	r5, #0
 8004dd4:	dadf      	bge.n	8004d96 <_malloc_r+0x12>
 8004dd6:	230c      	movs	r3, #12
 8004dd8:	6033      	str	r3, [r6, #0]
 8004dda:	2000      	movs	r0, #0
 8004ddc:	bd70      	pop	{r4, r5, r6, pc}
 8004dde:	680b      	ldr	r3, [r1, #0]
 8004de0:	1b5b      	subs	r3, r3, r5
 8004de2:	d419      	bmi.n	8004e18 <_malloc_r+0x94>
 8004de4:	2b0b      	cmp	r3, #11
 8004de6:	d903      	bls.n	8004df0 <_malloc_r+0x6c>
 8004de8:	600b      	str	r3, [r1, #0]
 8004dea:	18cc      	adds	r4, r1, r3
 8004dec:	6025      	str	r5, [r4, #0]
 8004dee:	e003      	b.n	8004df8 <_malloc_r+0x74>
 8004df0:	684b      	ldr	r3, [r1, #4]
 8004df2:	428c      	cmp	r4, r1
 8004df4:	d10d      	bne.n	8004e12 <_malloc_r+0x8e>
 8004df6:	6013      	str	r3, [r2, #0]
 8004df8:	0030      	movs	r0, r6
 8004dfa:	f000 f85a 	bl	8004eb2 <__malloc_unlock>
 8004dfe:	0020      	movs	r0, r4
 8004e00:	2207      	movs	r2, #7
 8004e02:	300b      	adds	r0, #11
 8004e04:	1d23      	adds	r3, r4, #4
 8004e06:	4390      	bics	r0, r2
 8004e08:	1ac3      	subs	r3, r0, r3
 8004e0a:	d0e7      	beq.n	8004ddc <_malloc_r+0x58>
 8004e0c:	425a      	negs	r2, r3
 8004e0e:	50e2      	str	r2, [r4, r3]
 8004e10:	e7e4      	b.n	8004ddc <_malloc_r+0x58>
 8004e12:	6063      	str	r3, [r4, #4]
 8004e14:	000c      	movs	r4, r1
 8004e16:	e7ef      	b.n	8004df8 <_malloc_r+0x74>
 8004e18:	000c      	movs	r4, r1
 8004e1a:	6849      	ldr	r1, [r1, #4]
 8004e1c:	e7c3      	b.n	8004da6 <_malloc_r+0x22>
 8004e1e:	2303      	movs	r3, #3
 8004e20:	1cc4      	adds	r4, r0, #3
 8004e22:	439c      	bics	r4, r3
 8004e24:	42a0      	cmp	r0, r4
 8004e26:	d0e1      	beq.n	8004dec <_malloc_r+0x68>
 8004e28:	1a21      	subs	r1, r4, r0
 8004e2a:	0030      	movs	r0, r6
 8004e2c:	f000 f82e 	bl	8004e8c <_sbrk_r>
 8004e30:	1c43      	adds	r3, r0, #1
 8004e32:	d1db      	bne.n	8004dec <_malloc_r+0x68>
 8004e34:	e7c7      	b.n	8004dc6 <_malloc_r+0x42>
 8004e36:	46c0      	nop			; (mov r8, r8)
 8004e38:	200004b0 	.word	0x200004b0
 8004e3c:	200004b4 	.word	0x200004b4

08004e40 <_realloc_r>:
 8004e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e42:	0007      	movs	r7, r0
 8004e44:	000d      	movs	r5, r1
 8004e46:	0016      	movs	r6, r2
 8004e48:	2900      	cmp	r1, #0
 8004e4a:	d105      	bne.n	8004e58 <_realloc_r+0x18>
 8004e4c:	0011      	movs	r1, r2
 8004e4e:	f7ff ff99 	bl	8004d84 <_malloc_r>
 8004e52:	0004      	movs	r4, r0
 8004e54:	0020      	movs	r0, r4
 8004e56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e58:	2a00      	cmp	r2, #0
 8004e5a:	d103      	bne.n	8004e64 <_realloc_r+0x24>
 8004e5c:	f7ff ff48 	bl	8004cf0 <_free_r>
 8004e60:	0034      	movs	r4, r6
 8004e62:	e7f7      	b.n	8004e54 <_realloc_r+0x14>
 8004e64:	f000 f826 	bl	8004eb4 <_malloc_usable_size_r>
 8004e68:	002c      	movs	r4, r5
 8004e6a:	42b0      	cmp	r0, r6
 8004e6c:	d2f2      	bcs.n	8004e54 <_realloc_r+0x14>
 8004e6e:	0031      	movs	r1, r6
 8004e70:	0038      	movs	r0, r7
 8004e72:	f7ff ff87 	bl	8004d84 <_malloc_r>
 8004e76:	1e04      	subs	r4, r0, #0
 8004e78:	d0ec      	beq.n	8004e54 <_realloc_r+0x14>
 8004e7a:	0029      	movs	r1, r5
 8004e7c:	0032      	movs	r2, r6
 8004e7e:	f7ff ff2e 	bl	8004cde <memcpy>
 8004e82:	0029      	movs	r1, r5
 8004e84:	0038      	movs	r0, r7
 8004e86:	f7ff ff33 	bl	8004cf0 <_free_r>
 8004e8a:	e7e3      	b.n	8004e54 <_realloc_r+0x14>

08004e8c <_sbrk_r>:
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	b570      	push	{r4, r5, r6, lr}
 8004e90:	4c06      	ldr	r4, [pc, #24]	; (8004eac <_sbrk_r+0x20>)
 8004e92:	0005      	movs	r5, r0
 8004e94:	0008      	movs	r0, r1
 8004e96:	6023      	str	r3, [r4, #0]
 8004e98:	f7fc f916 	bl	80010c8 <_sbrk>
 8004e9c:	1c43      	adds	r3, r0, #1
 8004e9e:	d103      	bne.n	8004ea8 <_sbrk_r+0x1c>
 8004ea0:	6823      	ldr	r3, [r4, #0]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d000      	beq.n	8004ea8 <_sbrk_r+0x1c>
 8004ea6:	602b      	str	r3, [r5, #0]
 8004ea8:	bd70      	pop	{r4, r5, r6, pc}
 8004eaa:	46c0      	nop			; (mov r8, r8)
 8004eac:	200005cc 	.word	0x200005cc

08004eb0 <__malloc_lock>:
 8004eb0:	4770      	bx	lr

08004eb2 <__malloc_unlock>:
 8004eb2:	4770      	bx	lr

08004eb4 <_malloc_usable_size_r>:
 8004eb4:	1f0b      	subs	r3, r1, #4
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	1f18      	subs	r0, r3, #4
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	da01      	bge.n	8004ec2 <_malloc_usable_size_r+0xe>
 8004ebe:	580b      	ldr	r3, [r1, r0]
 8004ec0:	18c0      	adds	r0, r0, r3
 8004ec2:	4770      	bx	lr

08004ec4 <_init>:
 8004ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ec6:	46c0      	nop			; (mov r8, r8)
 8004ec8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004eca:	bc08      	pop	{r3}
 8004ecc:	469e      	mov	lr, r3
 8004ece:	4770      	bx	lr

08004ed0 <_fini>:
 8004ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ed2:	46c0      	nop			; (mov r8, r8)
 8004ed4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ed6:	bc08      	pop	{r3}
 8004ed8:	469e      	mov	lr, r3
 8004eda:	4770      	bx	lr

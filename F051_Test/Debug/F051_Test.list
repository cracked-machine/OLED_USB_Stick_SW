
F051_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004bc0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002934  08004c80  08004c80  00014c80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080075b4  080075b4  000200c4  2**0
                  CONTENTS
  4 .ARM          00000000  080075b4  080075b4  000200c4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080075b4  080075b4  000200c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080075b4  080075b4  000175b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080075b8  080075b8  000175b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c4  20000000  080075bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000054c  200000c4  08007680  000200c4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000610  08007680  00020610  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e013  00000000  00000000  000200ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002727  00000000  00000000  0002e0ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b00  00000000  00000000  00030828  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000980  00000000  00000000  00031328  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000f416  00000000  00000000  00031ca8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000cc12  00000000  00000000  000410be  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000524cd  00000000  00000000  0004dcd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000a019d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027e0  00000000  00000000  000a0218  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200000c4 	.word	0x200000c4
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004c68 	.word	0x08004c68

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200000c8 	.word	0x200000c8
 8000104:	08004c68 	.word	0x08004c68

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_i2f>:
 8000220:	b570      	push	{r4, r5, r6, lr}
 8000222:	2800      	cmp	r0, #0
 8000224:	d03d      	beq.n	80002a2 <__aeabi_i2f+0x82>
 8000226:	17c3      	asrs	r3, r0, #31
 8000228:	18c5      	adds	r5, r0, r3
 800022a:	405d      	eors	r5, r3
 800022c:	0fc4      	lsrs	r4, r0, #31
 800022e:	0028      	movs	r0, r5
 8000230:	f000 fbfc 	bl	8000a2c <__clzsi2>
 8000234:	229e      	movs	r2, #158	; 0x9e
 8000236:	1a12      	subs	r2, r2, r0
 8000238:	2a96      	cmp	r2, #150	; 0x96
 800023a:	dc07      	bgt.n	800024c <__aeabi_i2f+0x2c>
 800023c:	b2d2      	uxtb	r2, r2
 800023e:	2808      	cmp	r0, #8
 8000240:	dd33      	ble.n	80002aa <__aeabi_i2f+0x8a>
 8000242:	3808      	subs	r0, #8
 8000244:	4085      	lsls	r5, r0
 8000246:	0268      	lsls	r0, r5, #9
 8000248:	0a40      	lsrs	r0, r0, #9
 800024a:	e023      	b.n	8000294 <__aeabi_i2f+0x74>
 800024c:	2a99      	cmp	r2, #153	; 0x99
 800024e:	dd0b      	ble.n	8000268 <__aeabi_i2f+0x48>
 8000250:	2305      	movs	r3, #5
 8000252:	0029      	movs	r1, r5
 8000254:	1a1b      	subs	r3, r3, r0
 8000256:	40d9      	lsrs	r1, r3
 8000258:	0003      	movs	r3, r0
 800025a:	331b      	adds	r3, #27
 800025c:	409d      	lsls	r5, r3
 800025e:	002b      	movs	r3, r5
 8000260:	1e5d      	subs	r5, r3, #1
 8000262:	41ab      	sbcs	r3, r5
 8000264:	4319      	orrs	r1, r3
 8000266:	000d      	movs	r5, r1
 8000268:	2805      	cmp	r0, #5
 800026a:	dd01      	ble.n	8000270 <__aeabi_i2f+0x50>
 800026c:	1f43      	subs	r3, r0, #5
 800026e:	409d      	lsls	r5, r3
 8000270:	002b      	movs	r3, r5
 8000272:	490f      	ldr	r1, [pc, #60]	; (80002b0 <__aeabi_i2f+0x90>)
 8000274:	400b      	ands	r3, r1
 8000276:	076e      	lsls	r6, r5, #29
 8000278:	d009      	beq.n	800028e <__aeabi_i2f+0x6e>
 800027a:	260f      	movs	r6, #15
 800027c:	4035      	ands	r5, r6
 800027e:	2d04      	cmp	r5, #4
 8000280:	d005      	beq.n	800028e <__aeabi_i2f+0x6e>
 8000282:	3304      	adds	r3, #4
 8000284:	015d      	lsls	r5, r3, #5
 8000286:	d502      	bpl.n	800028e <__aeabi_i2f+0x6e>
 8000288:	229f      	movs	r2, #159	; 0x9f
 800028a:	400b      	ands	r3, r1
 800028c:	1a12      	subs	r2, r2, r0
 800028e:	019b      	lsls	r3, r3, #6
 8000290:	0a58      	lsrs	r0, r3, #9
 8000292:	b2d2      	uxtb	r2, r2
 8000294:	0240      	lsls	r0, r0, #9
 8000296:	05d2      	lsls	r2, r2, #23
 8000298:	0a40      	lsrs	r0, r0, #9
 800029a:	07e4      	lsls	r4, r4, #31
 800029c:	4310      	orrs	r0, r2
 800029e:	4320      	orrs	r0, r4
 80002a0:	bd70      	pop	{r4, r5, r6, pc}
 80002a2:	2400      	movs	r4, #0
 80002a4:	2200      	movs	r2, #0
 80002a6:	2000      	movs	r0, #0
 80002a8:	e7f4      	b.n	8000294 <__aeabi_i2f+0x74>
 80002aa:	0268      	lsls	r0, r5, #9
 80002ac:	0a40      	lsrs	r0, r0, #9
 80002ae:	e7f1      	b.n	8000294 <__aeabi_i2f+0x74>
 80002b0:	fbffffff 	.word	0xfbffffff

080002b4 <__aeabi_ddiv>:
 80002b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002b6:	4657      	mov	r7, sl
 80002b8:	46de      	mov	lr, fp
 80002ba:	464e      	mov	r6, r9
 80002bc:	4645      	mov	r5, r8
 80002be:	b5e0      	push	{r5, r6, r7, lr}
 80002c0:	4683      	mov	fp, r0
 80002c2:	0007      	movs	r7, r0
 80002c4:	030e      	lsls	r6, r1, #12
 80002c6:	0048      	lsls	r0, r1, #1
 80002c8:	b085      	sub	sp, #20
 80002ca:	4692      	mov	sl, r2
 80002cc:	001c      	movs	r4, r3
 80002ce:	0b36      	lsrs	r6, r6, #12
 80002d0:	0d40      	lsrs	r0, r0, #21
 80002d2:	0fcd      	lsrs	r5, r1, #31
 80002d4:	2800      	cmp	r0, #0
 80002d6:	d100      	bne.n	80002da <__aeabi_ddiv+0x26>
 80002d8:	e09d      	b.n	8000416 <__aeabi_ddiv+0x162>
 80002da:	4b95      	ldr	r3, [pc, #596]	; (8000530 <__aeabi_ddiv+0x27c>)
 80002dc:	4298      	cmp	r0, r3
 80002de:	d039      	beq.n	8000354 <__aeabi_ddiv+0xa0>
 80002e0:	2380      	movs	r3, #128	; 0x80
 80002e2:	00f6      	lsls	r6, r6, #3
 80002e4:	041b      	lsls	r3, r3, #16
 80002e6:	431e      	orrs	r6, r3
 80002e8:	4a92      	ldr	r2, [pc, #584]	; (8000534 <__aeabi_ddiv+0x280>)
 80002ea:	0f7b      	lsrs	r3, r7, #29
 80002ec:	4333      	orrs	r3, r6
 80002ee:	4699      	mov	r9, r3
 80002f0:	4694      	mov	ip, r2
 80002f2:	0003      	movs	r3, r0
 80002f4:	4463      	add	r3, ip
 80002f6:	9300      	str	r3, [sp, #0]
 80002f8:	2300      	movs	r3, #0
 80002fa:	2600      	movs	r6, #0
 80002fc:	00ff      	lsls	r7, r7, #3
 80002fe:	9302      	str	r3, [sp, #8]
 8000300:	0323      	lsls	r3, r4, #12
 8000302:	0b1b      	lsrs	r3, r3, #12
 8000304:	4698      	mov	r8, r3
 8000306:	0063      	lsls	r3, r4, #1
 8000308:	0fe4      	lsrs	r4, r4, #31
 800030a:	4652      	mov	r2, sl
 800030c:	0d5b      	lsrs	r3, r3, #21
 800030e:	9401      	str	r4, [sp, #4]
 8000310:	d100      	bne.n	8000314 <__aeabi_ddiv+0x60>
 8000312:	e0b3      	b.n	800047c <__aeabi_ddiv+0x1c8>
 8000314:	4986      	ldr	r1, [pc, #536]	; (8000530 <__aeabi_ddiv+0x27c>)
 8000316:	428b      	cmp	r3, r1
 8000318:	d100      	bne.n	800031c <__aeabi_ddiv+0x68>
 800031a:	e09e      	b.n	800045a <__aeabi_ddiv+0x1a6>
 800031c:	4642      	mov	r2, r8
 800031e:	00d1      	lsls	r1, r2, #3
 8000320:	2280      	movs	r2, #128	; 0x80
 8000322:	0412      	lsls	r2, r2, #16
 8000324:	430a      	orrs	r2, r1
 8000326:	4651      	mov	r1, sl
 8000328:	0f49      	lsrs	r1, r1, #29
 800032a:	4311      	orrs	r1, r2
 800032c:	468b      	mov	fp, r1
 800032e:	4981      	ldr	r1, [pc, #516]	; (8000534 <__aeabi_ddiv+0x280>)
 8000330:	4652      	mov	r2, sl
 8000332:	468c      	mov	ip, r1
 8000334:	9900      	ldr	r1, [sp, #0]
 8000336:	4463      	add	r3, ip
 8000338:	1acb      	subs	r3, r1, r3
 800033a:	2100      	movs	r1, #0
 800033c:	00d2      	lsls	r2, r2, #3
 800033e:	9300      	str	r3, [sp, #0]
 8000340:	002b      	movs	r3, r5
 8000342:	4063      	eors	r3, r4
 8000344:	469a      	mov	sl, r3
 8000346:	2e0f      	cmp	r6, #15
 8000348:	d900      	bls.n	800034c <__aeabi_ddiv+0x98>
 800034a:	e105      	b.n	8000558 <__aeabi_ddiv+0x2a4>
 800034c:	4b7a      	ldr	r3, [pc, #488]	; (8000538 <__aeabi_ddiv+0x284>)
 800034e:	00b6      	lsls	r6, r6, #2
 8000350:	599b      	ldr	r3, [r3, r6]
 8000352:	469f      	mov	pc, r3
 8000354:	465b      	mov	r3, fp
 8000356:	4333      	orrs	r3, r6
 8000358:	4699      	mov	r9, r3
 800035a:	d000      	beq.n	800035e <__aeabi_ddiv+0xaa>
 800035c:	e0b8      	b.n	80004d0 <__aeabi_ddiv+0x21c>
 800035e:	2302      	movs	r3, #2
 8000360:	2608      	movs	r6, #8
 8000362:	2700      	movs	r7, #0
 8000364:	9000      	str	r0, [sp, #0]
 8000366:	9302      	str	r3, [sp, #8]
 8000368:	e7ca      	b.n	8000300 <__aeabi_ddiv+0x4c>
 800036a:	46cb      	mov	fp, r9
 800036c:	003a      	movs	r2, r7
 800036e:	9902      	ldr	r1, [sp, #8]
 8000370:	9501      	str	r5, [sp, #4]
 8000372:	9b01      	ldr	r3, [sp, #4]
 8000374:	469a      	mov	sl, r3
 8000376:	2902      	cmp	r1, #2
 8000378:	d027      	beq.n	80003ca <__aeabi_ddiv+0x116>
 800037a:	2903      	cmp	r1, #3
 800037c:	d100      	bne.n	8000380 <__aeabi_ddiv+0xcc>
 800037e:	e280      	b.n	8000882 <__aeabi_ddiv+0x5ce>
 8000380:	2901      	cmp	r1, #1
 8000382:	d044      	beq.n	800040e <__aeabi_ddiv+0x15a>
 8000384:	496d      	ldr	r1, [pc, #436]	; (800053c <__aeabi_ddiv+0x288>)
 8000386:	9b00      	ldr	r3, [sp, #0]
 8000388:	468c      	mov	ip, r1
 800038a:	4463      	add	r3, ip
 800038c:	001c      	movs	r4, r3
 800038e:	2c00      	cmp	r4, #0
 8000390:	dd38      	ble.n	8000404 <__aeabi_ddiv+0x150>
 8000392:	0753      	lsls	r3, r2, #29
 8000394:	d000      	beq.n	8000398 <__aeabi_ddiv+0xe4>
 8000396:	e213      	b.n	80007c0 <__aeabi_ddiv+0x50c>
 8000398:	08d2      	lsrs	r2, r2, #3
 800039a:	465b      	mov	r3, fp
 800039c:	01db      	lsls	r3, r3, #7
 800039e:	d509      	bpl.n	80003b4 <__aeabi_ddiv+0x100>
 80003a0:	4659      	mov	r1, fp
 80003a2:	4b67      	ldr	r3, [pc, #412]	; (8000540 <__aeabi_ddiv+0x28c>)
 80003a4:	4019      	ands	r1, r3
 80003a6:	468b      	mov	fp, r1
 80003a8:	2180      	movs	r1, #128	; 0x80
 80003aa:	00c9      	lsls	r1, r1, #3
 80003ac:	468c      	mov	ip, r1
 80003ae:	9b00      	ldr	r3, [sp, #0]
 80003b0:	4463      	add	r3, ip
 80003b2:	001c      	movs	r4, r3
 80003b4:	4b63      	ldr	r3, [pc, #396]	; (8000544 <__aeabi_ddiv+0x290>)
 80003b6:	429c      	cmp	r4, r3
 80003b8:	dc07      	bgt.n	80003ca <__aeabi_ddiv+0x116>
 80003ba:	465b      	mov	r3, fp
 80003bc:	0564      	lsls	r4, r4, #21
 80003be:	075f      	lsls	r7, r3, #29
 80003c0:	025b      	lsls	r3, r3, #9
 80003c2:	4317      	orrs	r7, r2
 80003c4:	0b1b      	lsrs	r3, r3, #12
 80003c6:	0d62      	lsrs	r2, r4, #21
 80003c8:	e002      	b.n	80003d0 <__aeabi_ddiv+0x11c>
 80003ca:	2300      	movs	r3, #0
 80003cc:	2700      	movs	r7, #0
 80003ce:	4a58      	ldr	r2, [pc, #352]	; (8000530 <__aeabi_ddiv+0x27c>)
 80003d0:	2100      	movs	r1, #0
 80003d2:	031b      	lsls	r3, r3, #12
 80003d4:	0b1c      	lsrs	r4, r3, #12
 80003d6:	0d0b      	lsrs	r3, r1, #20
 80003d8:	051b      	lsls	r3, r3, #20
 80003da:	4323      	orrs	r3, r4
 80003dc:	0514      	lsls	r4, r2, #20
 80003de:	4a5a      	ldr	r2, [pc, #360]	; (8000548 <__aeabi_ddiv+0x294>)
 80003e0:	0038      	movs	r0, r7
 80003e2:	4013      	ands	r3, r2
 80003e4:	431c      	orrs	r4, r3
 80003e6:	4653      	mov	r3, sl
 80003e8:	0064      	lsls	r4, r4, #1
 80003ea:	07db      	lsls	r3, r3, #31
 80003ec:	0864      	lsrs	r4, r4, #1
 80003ee:	431c      	orrs	r4, r3
 80003f0:	0021      	movs	r1, r4
 80003f2:	b005      	add	sp, #20
 80003f4:	bc3c      	pop	{r2, r3, r4, r5}
 80003f6:	4690      	mov	r8, r2
 80003f8:	4699      	mov	r9, r3
 80003fa:	46a2      	mov	sl, r4
 80003fc:	46ab      	mov	fp, r5
 80003fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000400:	2201      	movs	r2, #1
 8000402:	4252      	negs	r2, r2
 8000404:	2301      	movs	r3, #1
 8000406:	1b1b      	subs	r3, r3, r4
 8000408:	2b38      	cmp	r3, #56	; 0x38
 800040a:	dc00      	bgt.n	800040e <__aeabi_ddiv+0x15a>
 800040c:	e1ad      	b.n	800076a <__aeabi_ddiv+0x4b6>
 800040e:	2200      	movs	r2, #0
 8000410:	2300      	movs	r3, #0
 8000412:	2700      	movs	r7, #0
 8000414:	e7dc      	b.n	80003d0 <__aeabi_ddiv+0x11c>
 8000416:	465b      	mov	r3, fp
 8000418:	4333      	orrs	r3, r6
 800041a:	4699      	mov	r9, r3
 800041c:	d05e      	beq.n	80004dc <__aeabi_ddiv+0x228>
 800041e:	2e00      	cmp	r6, #0
 8000420:	d100      	bne.n	8000424 <__aeabi_ddiv+0x170>
 8000422:	e18a      	b.n	800073a <__aeabi_ddiv+0x486>
 8000424:	0030      	movs	r0, r6
 8000426:	f000 fb01 	bl	8000a2c <__clzsi2>
 800042a:	0003      	movs	r3, r0
 800042c:	3b0b      	subs	r3, #11
 800042e:	2b1c      	cmp	r3, #28
 8000430:	dd00      	ble.n	8000434 <__aeabi_ddiv+0x180>
 8000432:	e17b      	b.n	800072c <__aeabi_ddiv+0x478>
 8000434:	221d      	movs	r2, #29
 8000436:	1ad3      	subs	r3, r2, r3
 8000438:	465a      	mov	r2, fp
 800043a:	0001      	movs	r1, r0
 800043c:	40da      	lsrs	r2, r3
 800043e:	3908      	subs	r1, #8
 8000440:	408e      	lsls	r6, r1
 8000442:	0013      	movs	r3, r2
 8000444:	465f      	mov	r7, fp
 8000446:	4333      	orrs	r3, r6
 8000448:	4699      	mov	r9, r3
 800044a:	408f      	lsls	r7, r1
 800044c:	4b3f      	ldr	r3, [pc, #252]	; (800054c <__aeabi_ddiv+0x298>)
 800044e:	2600      	movs	r6, #0
 8000450:	1a1b      	subs	r3, r3, r0
 8000452:	9300      	str	r3, [sp, #0]
 8000454:	2300      	movs	r3, #0
 8000456:	9302      	str	r3, [sp, #8]
 8000458:	e752      	b.n	8000300 <__aeabi_ddiv+0x4c>
 800045a:	4641      	mov	r1, r8
 800045c:	4653      	mov	r3, sl
 800045e:	430b      	orrs	r3, r1
 8000460:	493b      	ldr	r1, [pc, #236]	; (8000550 <__aeabi_ddiv+0x29c>)
 8000462:	469b      	mov	fp, r3
 8000464:	468c      	mov	ip, r1
 8000466:	9b00      	ldr	r3, [sp, #0]
 8000468:	4463      	add	r3, ip
 800046a:	9300      	str	r3, [sp, #0]
 800046c:	465b      	mov	r3, fp
 800046e:	2b00      	cmp	r3, #0
 8000470:	d13b      	bne.n	80004ea <__aeabi_ddiv+0x236>
 8000472:	2302      	movs	r3, #2
 8000474:	2200      	movs	r2, #0
 8000476:	431e      	orrs	r6, r3
 8000478:	2102      	movs	r1, #2
 800047a:	e761      	b.n	8000340 <__aeabi_ddiv+0x8c>
 800047c:	4643      	mov	r3, r8
 800047e:	4313      	orrs	r3, r2
 8000480:	469b      	mov	fp, r3
 8000482:	d037      	beq.n	80004f4 <__aeabi_ddiv+0x240>
 8000484:	4643      	mov	r3, r8
 8000486:	2b00      	cmp	r3, #0
 8000488:	d100      	bne.n	800048c <__aeabi_ddiv+0x1d8>
 800048a:	e162      	b.n	8000752 <__aeabi_ddiv+0x49e>
 800048c:	4640      	mov	r0, r8
 800048e:	f000 facd 	bl	8000a2c <__clzsi2>
 8000492:	0003      	movs	r3, r0
 8000494:	3b0b      	subs	r3, #11
 8000496:	2b1c      	cmp	r3, #28
 8000498:	dd00      	ble.n	800049c <__aeabi_ddiv+0x1e8>
 800049a:	e153      	b.n	8000744 <__aeabi_ddiv+0x490>
 800049c:	0002      	movs	r2, r0
 800049e:	4641      	mov	r1, r8
 80004a0:	3a08      	subs	r2, #8
 80004a2:	4091      	lsls	r1, r2
 80004a4:	4688      	mov	r8, r1
 80004a6:	211d      	movs	r1, #29
 80004a8:	1acb      	subs	r3, r1, r3
 80004aa:	4651      	mov	r1, sl
 80004ac:	40d9      	lsrs	r1, r3
 80004ae:	000b      	movs	r3, r1
 80004b0:	4641      	mov	r1, r8
 80004b2:	430b      	orrs	r3, r1
 80004b4:	469b      	mov	fp, r3
 80004b6:	4653      	mov	r3, sl
 80004b8:	4093      	lsls	r3, r2
 80004ba:	001a      	movs	r2, r3
 80004bc:	9b00      	ldr	r3, [sp, #0]
 80004be:	4925      	ldr	r1, [pc, #148]	; (8000554 <__aeabi_ddiv+0x2a0>)
 80004c0:	469c      	mov	ip, r3
 80004c2:	4460      	add	r0, ip
 80004c4:	0003      	movs	r3, r0
 80004c6:	468c      	mov	ip, r1
 80004c8:	4463      	add	r3, ip
 80004ca:	9300      	str	r3, [sp, #0]
 80004cc:	2100      	movs	r1, #0
 80004ce:	e737      	b.n	8000340 <__aeabi_ddiv+0x8c>
 80004d0:	2303      	movs	r3, #3
 80004d2:	46b1      	mov	r9, r6
 80004d4:	9000      	str	r0, [sp, #0]
 80004d6:	260c      	movs	r6, #12
 80004d8:	9302      	str	r3, [sp, #8]
 80004da:	e711      	b.n	8000300 <__aeabi_ddiv+0x4c>
 80004dc:	2300      	movs	r3, #0
 80004de:	9300      	str	r3, [sp, #0]
 80004e0:	3301      	adds	r3, #1
 80004e2:	2604      	movs	r6, #4
 80004e4:	2700      	movs	r7, #0
 80004e6:	9302      	str	r3, [sp, #8]
 80004e8:	e70a      	b.n	8000300 <__aeabi_ddiv+0x4c>
 80004ea:	2303      	movs	r3, #3
 80004ec:	46c3      	mov	fp, r8
 80004ee:	431e      	orrs	r6, r3
 80004f0:	2103      	movs	r1, #3
 80004f2:	e725      	b.n	8000340 <__aeabi_ddiv+0x8c>
 80004f4:	3301      	adds	r3, #1
 80004f6:	431e      	orrs	r6, r3
 80004f8:	2200      	movs	r2, #0
 80004fa:	2101      	movs	r1, #1
 80004fc:	e720      	b.n	8000340 <__aeabi_ddiv+0x8c>
 80004fe:	2300      	movs	r3, #0
 8000500:	469a      	mov	sl, r3
 8000502:	2380      	movs	r3, #128	; 0x80
 8000504:	2700      	movs	r7, #0
 8000506:	031b      	lsls	r3, r3, #12
 8000508:	4a09      	ldr	r2, [pc, #36]	; (8000530 <__aeabi_ddiv+0x27c>)
 800050a:	e761      	b.n	80003d0 <__aeabi_ddiv+0x11c>
 800050c:	2380      	movs	r3, #128	; 0x80
 800050e:	4649      	mov	r1, r9
 8000510:	031b      	lsls	r3, r3, #12
 8000512:	4219      	tst	r1, r3
 8000514:	d100      	bne.n	8000518 <__aeabi_ddiv+0x264>
 8000516:	e0e2      	b.n	80006de <__aeabi_ddiv+0x42a>
 8000518:	4659      	mov	r1, fp
 800051a:	4219      	tst	r1, r3
 800051c:	d000      	beq.n	8000520 <__aeabi_ddiv+0x26c>
 800051e:	e0de      	b.n	80006de <__aeabi_ddiv+0x42a>
 8000520:	430b      	orrs	r3, r1
 8000522:	031b      	lsls	r3, r3, #12
 8000524:	0017      	movs	r7, r2
 8000526:	0b1b      	lsrs	r3, r3, #12
 8000528:	46a2      	mov	sl, r4
 800052a:	4a01      	ldr	r2, [pc, #4]	; (8000530 <__aeabi_ddiv+0x27c>)
 800052c:	e750      	b.n	80003d0 <__aeabi_ddiv+0x11c>
 800052e:	46c0      	nop			; (mov r8, r8)
 8000530:	000007ff 	.word	0x000007ff
 8000534:	fffffc01 	.word	0xfffffc01
 8000538:	08004d14 	.word	0x08004d14
 800053c:	000003ff 	.word	0x000003ff
 8000540:	feffffff 	.word	0xfeffffff
 8000544:	000007fe 	.word	0x000007fe
 8000548:	800fffff 	.word	0x800fffff
 800054c:	fffffc0d 	.word	0xfffffc0d
 8000550:	fffff801 	.word	0xfffff801
 8000554:	000003f3 	.word	0x000003f3
 8000558:	45d9      	cmp	r9, fp
 800055a:	d900      	bls.n	800055e <__aeabi_ddiv+0x2aa>
 800055c:	e0cb      	b.n	80006f6 <__aeabi_ddiv+0x442>
 800055e:	d100      	bne.n	8000562 <__aeabi_ddiv+0x2ae>
 8000560:	e0c6      	b.n	80006f0 <__aeabi_ddiv+0x43c>
 8000562:	003c      	movs	r4, r7
 8000564:	4648      	mov	r0, r9
 8000566:	2700      	movs	r7, #0
 8000568:	9b00      	ldr	r3, [sp, #0]
 800056a:	3b01      	subs	r3, #1
 800056c:	9300      	str	r3, [sp, #0]
 800056e:	465b      	mov	r3, fp
 8000570:	0e16      	lsrs	r6, r2, #24
 8000572:	021b      	lsls	r3, r3, #8
 8000574:	431e      	orrs	r6, r3
 8000576:	0213      	lsls	r3, r2, #8
 8000578:	4698      	mov	r8, r3
 800057a:	0433      	lsls	r3, r6, #16
 800057c:	0c1b      	lsrs	r3, r3, #16
 800057e:	4699      	mov	r9, r3
 8000580:	0c31      	lsrs	r1, r6, #16
 8000582:	9101      	str	r1, [sp, #4]
 8000584:	f7ff fe46 	bl	8000214 <__aeabi_uidivmod>
 8000588:	464a      	mov	r2, r9
 800058a:	4342      	muls	r2, r0
 800058c:	040b      	lsls	r3, r1, #16
 800058e:	0c21      	lsrs	r1, r4, #16
 8000590:	0005      	movs	r5, r0
 8000592:	4319      	orrs	r1, r3
 8000594:	428a      	cmp	r2, r1
 8000596:	d907      	bls.n	80005a8 <__aeabi_ddiv+0x2f4>
 8000598:	1989      	adds	r1, r1, r6
 800059a:	3d01      	subs	r5, #1
 800059c:	428e      	cmp	r6, r1
 800059e:	d803      	bhi.n	80005a8 <__aeabi_ddiv+0x2f4>
 80005a0:	428a      	cmp	r2, r1
 80005a2:	d901      	bls.n	80005a8 <__aeabi_ddiv+0x2f4>
 80005a4:	1e85      	subs	r5, r0, #2
 80005a6:	1989      	adds	r1, r1, r6
 80005a8:	1a88      	subs	r0, r1, r2
 80005aa:	9901      	ldr	r1, [sp, #4]
 80005ac:	f7ff fe32 	bl	8000214 <__aeabi_uidivmod>
 80005b0:	0409      	lsls	r1, r1, #16
 80005b2:	468c      	mov	ip, r1
 80005b4:	464a      	mov	r2, r9
 80005b6:	0421      	lsls	r1, r4, #16
 80005b8:	4664      	mov	r4, ip
 80005ba:	4342      	muls	r2, r0
 80005bc:	0c09      	lsrs	r1, r1, #16
 80005be:	0003      	movs	r3, r0
 80005c0:	4321      	orrs	r1, r4
 80005c2:	428a      	cmp	r2, r1
 80005c4:	d904      	bls.n	80005d0 <__aeabi_ddiv+0x31c>
 80005c6:	1989      	adds	r1, r1, r6
 80005c8:	3b01      	subs	r3, #1
 80005ca:	428e      	cmp	r6, r1
 80005cc:	d800      	bhi.n	80005d0 <__aeabi_ddiv+0x31c>
 80005ce:	e0f1      	b.n	80007b4 <__aeabi_ddiv+0x500>
 80005d0:	042d      	lsls	r5, r5, #16
 80005d2:	431d      	orrs	r5, r3
 80005d4:	46ab      	mov	fp, r5
 80005d6:	4643      	mov	r3, r8
 80005d8:	1a89      	subs	r1, r1, r2
 80005da:	4642      	mov	r2, r8
 80005dc:	0c28      	lsrs	r0, r5, #16
 80005de:	0412      	lsls	r2, r2, #16
 80005e0:	0c1d      	lsrs	r5, r3, #16
 80005e2:	465b      	mov	r3, fp
 80005e4:	0c14      	lsrs	r4, r2, #16
 80005e6:	0022      	movs	r2, r4
 80005e8:	041b      	lsls	r3, r3, #16
 80005ea:	0c1b      	lsrs	r3, r3, #16
 80005ec:	435a      	muls	r2, r3
 80005ee:	9403      	str	r4, [sp, #12]
 80005f0:	436b      	muls	r3, r5
 80005f2:	4344      	muls	r4, r0
 80005f4:	9502      	str	r5, [sp, #8]
 80005f6:	4368      	muls	r0, r5
 80005f8:	191b      	adds	r3, r3, r4
 80005fa:	0c15      	lsrs	r5, r2, #16
 80005fc:	18eb      	adds	r3, r5, r3
 80005fe:	429c      	cmp	r4, r3
 8000600:	d903      	bls.n	800060a <__aeabi_ddiv+0x356>
 8000602:	2480      	movs	r4, #128	; 0x80
 8000604:	0264      	lsls	r4, r4, #9
 8000606:	46a4      	mov	ip, r4
 8000608:	4460      	add	r0, ip
 800060a:	0c1c      	lsrs	r4, r3, #16
 800060c:	0415      	lsls	r5, r2, #16
 800060e:	041b      	lsls	r3, r3, #16
 8000610:	0c2d      	lsrs	r5, r5, #16
 8000612:	1820      	adds	r0, r4, r0
 8000614:	195d      	adds	r5, r3, r5
 8000616:	4281      	cmp	r1, r0
 8000618:	d377      	bcc.n	800070a <__aeabi_ddiv+0x456>
 800061a:	d073      	beq.n	8000704 <__aeabi_ddiv+0x450>
 800061c:	1a0c      	subs	r4, r1, r0
 800061e:	4aa2      	ldr	r2, [pc, #648]	; (80008a8 <__aeabi_ddiv+0x5f4>)
 8000620:	1b7d      	subs	r5, r7, r5
 8000622:	42af      	cmp	r7, r5
 8000624:	41bf      	sbcs	r7, r7
 8000626:	4694      	mov	ip, r2
 8000628:	9b00      	ldr	r3, [sp, #0]
 800062a:	427f      	negs	r7, r7
 800062c:	4463      	add	r3, ip
 800062e:	1be0      	subs	r0, r4, r7
 8000630:	001c      	movs	r4, r3
 8000632:	4286      	cmp	r6, r0
 8000634:	d100      	bne.n	8000638 <__aeabi_ddiv+0x384>
 8000636:	e0db      	b.n	80007f0 <__aeabi_ddiv+0x53c>
 8000638:	9901      	ldr	r1, [sp, #4]
 800063a:	f7ff fdeb 	bl	8000214 <__aeabi_uidivmod>
 800063e:	464a      	mov	r2, r9
 8000640:	4342      	muls	r2, r0
 8000642:	040b      	lsls	r3, r1, #16
 8000644:	0c29      	lsrs	r1, r5, #16
 8000646:	0007      	movs	r7, r0
 8000648:	4319      	orrs	r1, r3
 800064a:	428a      	cmp	r2, r1
 800064c:	d907      	bls.n	800065e <__aeabi_ddiv+0x3aa>
 800064e:	1989      	adds	r1, r1, r6
 8000650:	3f01      	subs	r7, #1
 8000652:	428e      	cmp	r6, r1
 8000654:	d803      	bhi.n	800065e <__aeabi_ddiv+0x3aa>
 8000656:	428a      	cmp	r2, r1
 8000658:	d901      	bls.n	800065e <__aeabi_ddiv+0x3aa>
 800065a:	1e87      	subs	r7, r0, #2
 800065c:	1989      	adds	r1, r1, r6
 800065e:	1a88      	subs	r0, r1, r2
 8000660:	9901      	ldr	r1, [sp, #4]
 8000662:	f7ff fdd7 	bl	8000214 <__aeabi_uidivmod>
 8000666:	0409      	lsls	r1, r1, #16
 8000668:	464a      	mov	r2, r9
 800066a:	4689      	mov	r9, r1
 800066c:	0429      	lsls	r1, r5, #16
 800066e:	464d      	mov	r5, r9
 8000670:	4342      	muls	r2, r0
 8000672:	0c09      	lsrs	r1, r1, #16
 8000674:	0003      	movs	r3, r0
 8000676:	4329      	orrs	r1, r5
 8000678:	428a      	cmp	r2, r1
 800067a:	d907      	bls.n	800068c <__aeabi_ddiv+0x3d8>
 800067c:	1989      	adds	r1, r1, r6
 800067e:	3b01      	subs	r3, #1
 8000680:	428e      	cmp	r6, r1
 8000682:	d803      	bhi.n	800068c <__aeabi_ddiv+0x3d8>
 8000684:	428a      	cmp	r2, r1
 8000686:	d901      	bls.n	800068c <__aeabi_ddiv+0x3d8>
 8000688:	1e83      	subs	r3, r0, #2
 800068a:	1989      	adds	r1, r1, r6
 800068c:	043f      	lsls	r7, r7, #16
 800068e:	1a89      	subs	r1, r1, r2
 8000690:	003a      	movs	r2, r7
 8000692:	9f03      	ldr	r7, [sp, #12]
 8000694:	431a      	orrs	r2, r3
 8000696:	0038      	movs	r0, r7
 8000698:	0413      	lsls	r3, r2, #16
 800069a:	0c1b      	lsrs	r3, r3, #16
 800069c:	4358      	muls	r0, r3
 800069e:	4681      	mov	r9, r0
 80006a0:	9802      	ldr	r0, [sp, #8]
 80006a2:	0c15      	lsrs	r5, r2, #16
 80006a4:	436f      	muls	r7, r5
 80006a6:	4343      	muls	r3, r0
 80006a8:	4345      	muls	r5, r0
 80006aa:	4648      	mov	r0, r9
 80006ac:	0c00      	lsrs	r0, r0, #16
 80006ae:	4684      	mov	ip, r0
 80006b0:	19db      	adds	r3, r3, r7
 80006b2:	4463      	add	r3, ip
 80006b4:	429f      	cmp	r7, r3
 80006b6:	d903      	bls.n	80006c0 <__aeabi_ddiv+0x40c>
 80006b8:	2080      	movs	r0, #128	; 0x80
 80006ba:	0240      	lsls	r0, r0, #9
 80006bc:	4684      	mov	ip, r0
 80006be:	4465      	add	r5, ip
 80006c0:	4648      	mov	r0, r9
 80006c2:	0c1f      	lsrs	r7, r3, #16
 80006c4:	0400      	lsls	r0, r0, #16
 80006c6:	041b      	lsls	r3, r3, #16
 80006c8:	0c00      	lsrs	r0, r0, #16
 80006ca:	197d      	adds	r5, r7, r5
 80006cc:	1818      	adds	r0, r3, r0
 80006ce:	42a9      	cmp	r1, r5
 80006d0:	d200      	bcs.n	80006d4 <__aeabi_ddiv+0x420>
 80006d2:	e084      	b.n	80007de <__aeabi_ddiv+0x52a>
 80006d4:	d100      	bne.n	80006d8 <__aeabi_ddiv+0x424>
 80006d6:	e07f      	b.n	80007d8 <__aeabi_ddiv+0x524>
 80006d8:	2301      	movs	r3, #1
 80006da:	431a      	orrs	r2, r3
 80006dc:	e657      	b.n	800038e <__aeabi_ddiv+0xda>
 80006de:	2380      	movs	r3, #128	; 0x80
 80006e0:	464a      	mov	r2, r9
 80006e2:	031b      	lsls	r3, r3, #12
 80006e4:	4313      	orrs	r3, r2
 80006e6:	031b      	lsls	r3, r3, #12
 80006e8:	0b1b      	lsrs	r3, r3, #12
 80006ea:	46aa      	mov	sl, r5
 80006ec:	4a6f      	ldr	r2, [pc, #444]	; (80008ac <__aeabi_ddiv+0x5f8>)
 80006ee:	e66f      	b.n	80003d0 <__aeabi_ddiv+0x11c>
 80006f0:	42ba      	cmp	r2, r7
 80006f2:	d900      	bls.n	80006f6 <__aeabi_ddiv+0x442>
 80006f4:	e735      	b.n	8000562 <__aeabi_ddiv+0x2ae>
 80006f6:	464b      	mov	r3, r9
 80006f8:	07dc      	lsls	r4, r3, #31
 80006fa:	0858      	lsrs	r0, r3, #1
 80006fc:	087b      	lsrs	r3, r7, #1
 80006fe:	431c      	orrs	r4, r3
 8000700:	07ff      	lsls	r7, r7, #31
 8000702:	e734      	b.n	800056e <__aeabi_ddiv+0x2ba>
 8000704:	2400      	movs	r4, #0
 8000706:	42af      	cmp	r7, r5
 8000708:	d289      	bcs.n	800061e <__aeabi_ddiv+0x36a>
 800070a:	4447      	add	r7, r8
 800070c:	4547      	cmp	r7, r8
 800070e:	41a4      	sbcs	r4, r4
 8000710:	465b      	mov	r3, fp
 8000712:	4264      	negs	r4, r4
 8000714:	19a4      	adds	r4, r4, r6
 8000716:	1864      	adds	r4, r4, r1
 8000718:	3b01      	subs	r3, #1
 800071a:	42a6      	cmp	r6, r4
 800071c:	d21e      	bcs.n	800075c <__aeabi_ddiv+0x4a8>
 800071e:	42a0      	cmp	r0, r4
 8000720:	d86d      	bhi.n	80007fe <__aeabi_ddiv+0x54a>
 8000722:	d100      	bne.n	8000726 <__aeabi_ddiv+0x472>
 8000724:	e0b6      	b.n	8000894 <__aeabi_ddiv+0x5e0>
 8000726:	1a24      	subs	r4, r4, r0
 8000728:	469b      	mov	fp, r3
 800072a:	e778      	b.n	800061e <__aeabi_ddiv+0x36a>
 800072c:	0003      	movs	r3, r0
 800072e:	465a      	mov	r2, fp
 8000730:	3b28      	subs	r3, #40	; 0x28
 8000732:	409a      	lsls	r2, r3
 8000734:	2700      	movs	r7, #0
 8000736:	4691      	mov	r9, r2
 8000738:	e688      	b.n	800044c <__aeabi_ddiv+0x198>
 800073a:	4658      	mov	r0, fp
 800073c:	f000 f976 	bl	8000a2c <__clzsi2>
 8000740:	3020      	adds	r0, #32
 8000742:	e672      	b.n	800042a <__aeabi_ddiv+0x176>
 8000744:	0003      	movs	r3, r0
 8000746:	4652      	mov	r2, sl
 8000748:	3b28      	subs	r3, #40	; 0x28
 800074a:	409a      	lsls	r2, r3
 800074c:	4693      	mov	fp, r2
 800074e:	2200      	movs	r2, #0
 8000750:	e6b4      	b.n	80004bc <__aeabi_ddiv+0x208>
 8000752:	4650      	mov	r0, sl
 8000754:	f000 f96a 	bl	8000a2c <__clzsi2>
 8000758:	3020      	adds	r0, #32
 800075a:	e69a      	b.n	8000492 <__aeabi_ddiv+0x1de>
 800075c:	42a6      	cmp	r6, r4
 800075e:	d1e2      	bne.n	8000726 <__aeabi_ddiv+0x472>
 8000760:	45b8      	cmp	r8, r7
 8000762:	d9dc      	bls.n	800071e <__aeabi_ddiv+0x46a>
 8000764:	1a34      	subs	r4, r6, r0
 8000766:	469b      	mov	fp, r3
 8000768:	e759      	b.n	800061e <__aeabi_ddiv+0x36a>
 800076a:	2b1f      	cmp	r3, #31
 800076c:	dc65      	bgt.n	800083a <__aeabi_ddiv+0x586>
 800076e:	4c50      	ldr	r4, [pc, #320]	; (80008b0 <__aeabi_ddiv+0x5fc>)
 8000770:	9900      	ldr	r1, [sp, #0]
 8000772:	46a4      	mov	ip, r4
 8000774:	465c      	mov	r4, fp
 8000776:	4461      	add	r1, ip
 8000778:	0008      	movs	r0, r1
 800077a:	408c      	lsls	r4, r1
 800077c:	0011      	movs	r1, r2
 800077e:	4082      	lsls	r2, r0
 8000780:	40d9      	lsrs	r1, r3
 8000782:	1e50      	subs	r0, r2, #1
 8000784:	4182      	sbcs	r2, r0
 8000786:	430c      	orrs	r4, r1
 8000788:	4314      	orrs	r4, r2
 800078a:	465a      	mov	r2, fp
 800078c:	40da      	lsrs	r2, r3
 800078e:	0013      	movs	r3, r2
 8000790:	0762      	lsls	r2, r4, #29
 8000792:	d009      	beq.n	80007a8 <__aeabi_ddiv+0x4f4>
 8000794:	220f      	movs	r2, #15
 8000796:	4022      	ands	r2, r4
 8000798:	2a04      	cmp	r2, #4
 800079a:	d005      	beq.n	80007a8 <__aeabi_ddiv+0x4f4>
 800079c:	0022      	movs	r2, r4
 800079e:	1d14      	adds	r4, r2, #4
 80007a0:	4294      	cmp	r4, r2
 80007a2:	4189      	sbcs	r1, r1
 80007a4:	4249      	negs	r1, r1
 80007a6:	185b      	adds	r3, r3, r1
 80007a8:	021a      	lsls	r2, r3, #8
 80007aa:	d562      	bpl.n	8000872 <__aeabi_ddiv+0x5be>
 80007ac:	2201      	movs	r2, #1
 80007ae:	2300      	movs	r3, #0
 80007b0:	2700      	movs	r7, #0
 80007b2:	e60d      	b.n	80003d0 <__aeabi_ddiv+0x11c>
 80007b4:	428a      	cmp	r2, r1
 80007b6:	d800      	bhi.n	80007ba <__aeabi_ddiv+0x506>
 80007b8:	e70a      	b.n	80005d0 <__aeabi_ddiv+0x31c>
 80007ba:	1e83      	subs	r3, r0, #2
 80007bc:	1989      	adds	r1, r1, r6
 80007be:	e707      	b.n	80005d0 <__aeabi_ddiv+0x31c>
 80007c0:	230f      	movs	r3, #15
 80007c2:	4013      	ands	r3, r2
 80007c4:	2b04      	cmp	r3, #4
 80007c6:	d100      	bne.n	80007ca <__aeabi_ddiv+0x516>
 80007c8:	e5e6      	b.n	8000398 <__aeabi_ddiv+0xe4>
 80007ca:	1d17      	adds	r7, r2, #4
 80007cc:	4297      	cmp	r7, r2
 80007ce:	4192      	sbcs	r2, r2
 80007d0:	4253      	negs	r3, r2
 80007d2:	449b      	add	fp, r3
 80007d4:	08fa      	lsrs	r2, r7, #3
 80007d6:	e5e0      	b.n	800039a <__aeabi_ddiv+0xe6>
 80007d8:	2800      	cmp	r0, #0
 80007da:	d100      	bne.n	80007de <__aeabi_ddiv+0x52a>
 80007dc:	e5d7      	b.n	800038e <__aeabi_ddiv+0xda>
 80007de:	1871      	adds	r1, r6, r1
 80007e0:	1e53      	subs	r3, r2, #1
 80007e2:	42b1      	cmp	r1, r6
 80007e4:	d327      	bcc.n	8000836 <__aeabi_ddiv+0x582>
 80007e6:	42a9      	cmp	r1, r5
 80007e8:	d315      	bcc.n	8000816 <__aeabi_ddiv+0x562>
 80007ea:	d058      	beq.n	800089e <__aeabi_ddiv+0x5ea>
 80007ec:	001a      	movs	r2, r3
 80007ee:	e773      	b.n	80006d8 <__aeabi_ddiv+0x424>
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	dc00      	bgt.n	80007f6 <__aeabi_ddiv+0x542>
 80007f4:	e604      	b.n	8000400 <__aeabi_ddiv+0x14c>
 80007f6:	2301      	movs	r3, #1
 80007f8:	2200      	movs	r2, #0
 80007fa:	449b      	add	fp, r3
 80007fc:	e5cd      	b.n	800039a <__aeabi_ddiv+0xe6>
 80007fe:	2302      	movs	r3, #2
 8000800:	4447      	add	r7, r8
 8000802:	4547      	cmp	r7, r8
 8000804:	4189      	sbcs	r1, r1
 8000806:	425b      	negs	r3, r3
 8000808:	469c      	mov	ip, r3
 800080a:	4249      	negs	r1, r1
 800080c:	1989      	adds	r1, r1, r6
 800080e:	190c      	adds	r4, r1, r4
 8000810:	44e3      	add	fp, ip
 8000812:	1a24      	subs	r4, r4, r0
 8000814:	e703      	b.n	800061e <__aeabi_ddiv+0x36a>
 8000816:	4643      	mov	r3, r8
 8000818:	005f      	lsls	r7, r3, #1
 800081a:	4547      	cmp	r7, r8
 800081c:	419b      	sbcs	r3, r3
 800081e:	46b8      	mov	r8, r7
 8000820:	425b      	negs	r3, r3
 8000822:	199e      	adds	r6, r3, r6
 8000824:	3a02      	subs	r2, #2
 8000826:	1989      	adds	r1, r1, r6
 8000828:	42a9      	cmp	r1, r5
 800082a:	d000      	beq.n	800082e <__aeabi_ddiv+0x57a>
 800082c:	e754      	b.n	80006d8 <__aeabi_ddiv+0x424>
 800082e:	4540      	cmp	r0, r8
 8000830:	d000      	beq.n	8000834 <__aeabi_ddiv+0x580>
 8000832:	e751      	b.n	80006d8 <__aeabi_ddiv+0x424>
 8000834:	e5ab      	b.n	800038e <__aeabi_ddiv+0xda>
 8000836:	001a      	movs	r2, r3
 8000838:	e7f6      	b.n	8000828 <__aeabi_ddiv+0x574>
 800083a:	211f      	movs	r1, #31
 800083c:	465f      	mov	r7, fp
 800083e:	4249      	negs	r1, r1
 8000840:	1b0c      	subs	r4, r1, r4
 8000842:	40e7      	lsrs	r7, r4
 8000844:	2b20      	cmp	r3, #32
 8000846:	d007      	beq.n	8000858 <__aeabi_ddiv+0x5a4>
 8000848:	491a      	ldr	r1, [pc, #104]	; (80008b4 <__aeabi_ddiv+0x600>)
 800084a:	9b00      	ldr	r3, [sp, #0]
 800084c:	468c      	mov	ip, r1
 800084e:	4463      	add	r3, ip
 8000850:	0018      	movs	r0, r3
 8000852:	465b      	mov	r3, fp
 8000854:	4083      	lsls	r3, r0
 8000856:	431a      	orrs	r2, r3
 8000858:	1e50      	subs	r0, r2, #1
 800085a:	4182      	sbcs	r2, r0
 800085c:	433a      	orrs	r2, r7
 800085e:	2707      	movs	r7, #7
 8000860:	2300      	movs	r3, #0
 8000862:	4017      	ands	r7, r2
 8000864:	d009      	beq.n	800087a <__aeabi_ddiv+0x5c6>
 8000866:	210f      	movs	r1, #15
 8000868:	2300      	movs	r3, #0
 800086a:	4011      	ands	r1, r2
 800086c:	0014      	movs	r4, r2
 800086e:	2904      	cmp	r1, #4
 8000870:	d195      	bne.n	800079e <__aeabi_ddiv+0x4ea>
 8000872:	0022      	movs	r2, r4
 8000874:	075f      	lsls	r7, r3, #29
 8000876:	025b      	lsls	r3, r3, #9
 8000878:	0b1b      	lsrs	r3, r3, #12
 800087a:	08d2      	lsrs	r2, r2, #3
 800087c:	4317      	orrs	r7, r2
 800087e:	2200      	movs	r2, #0
 8000880:	e5a6      	b.n	80003d0 <__aeabi_ddiv+0x11c>
 8000882:	2380      	movs	r3, #128	; 0x80
 8000884:	4659      	mov	r1, fp
 8000886:	031b      	lsls	r3, r3, #12
 8000888:	430b      	orrs	r3, r1
 800088a:	031b      	lsls	r3, r3, #12
 800088c:	0017      	movs	r7, r2
 800088e:	0b1b      	lsrs	r3, r3, #12
 8000890:	4a06      	ldr	r2, [pc, #24]	; (80008ac <__aeabi_ddiv+0x5f8>)
 8000892:	e59d      	b.n	80003d0 <__aeabi_ddiv+0x11c>
 8000894:	42bd      	cmp	r5, r7
 8000896:	d8b2      	bhi.n	80007fe <__aeabi_ddiv+0x54a>
 8000898:	469b      	mov	fp, r3
 800089a:	2400      	movs	r4, #0
 800089c:	e6bf      	b.n	800061e <__aeabi_ddiv+0x36a>
 800089e:	4580      	cmp	r8, r0
 80008a0:	d3b9      	bcc.n	8000816 <__aeabi_ddiv+0x562>
 80008a2:	001a      	movs	r2, r3
 80008a4:	e7c3      	b.n	800082e <__aeabi_ddiv+0x57a>
 80008a6:	46c0      	nop			; (mov r8, r8)
 80008a8:	000003ff 	.word	0x000003ff
 80008ac:	000007ff 	.word	0x000007ff
 80008b0:	0000041e 	.word	0x0000041e
 80008b4:	0000043e 	.word	0x0000043e

080008b8 <__aeabi_d2iz>:
 80008b8:	b530      	push	{r4, r5, lr}
 80008ba:	4d14      	ldr	r5, [pc, #80]	; (800090c <__aeabi_d2iz+0x54>)
 80008bc:	030a      	lsls	r2, r1, #12
 80008be:	004b      	lsls	r3, r1, #1
 80008c0:	0b12      	lsrs	r2, r2, #12
 80008c2:	0d5b      	lsrs	r3, r3, #21
 80008c4:	0fc9      	lsrs	r1, r1, #31
 80008c6:	2400      	movs	r4, #0
 80008c8:	42ab      	cmp	r3, r5
 80008ca:	dd11      	ble.n	80008f0 <__aeabi_d2iz+0x38>
 80008cc:	4c10      	ldr	r4, [pc, #64]	; (8000910 <__aeabi_d2iz+0x58>)
 80008ce:	42a3      	cmp	r3, r4
 80008d0:	dc10      	bgt.n	80008f4 <__aeabi_d2iz+0x3c>
 80008d2:	2480      	movs	r4, #128	; 0x80
 80008d4:	0364      	lsls	r4, r4, #13
 80008d6:	4322      	orrs	r2, r4
 80008d8:	4c0e      	ldr	r4, [pc, #56]	; (8000914 <__aeabi_d2iz+0x5c>)
 80008da:	1ae4      	subs	r4, r4, r3
 80008dc:	2c1f      	cmp	r4, #31
 80008de:	dd0c      	ble.n	80008fa <__aeabi_d2iz+0x42>
 80008e0:	480d      	ldr	r0, [pc, #52]	; (8000918 <__aeabi_d2iz+0x60>)
 80008e2:	1ac3      	subs	r3, r0, r3
 80008e4:	40da      	lsrs	r2, r3
 80008e6:	0013      	movs	r3, r2
 80008e8:	425c      	negs	r4, r3
 80008ea:	2900      	cmp	r1, #0
 80008ec:	d100      	bne.n	80008f0 <__aeabi_d2iz+0x38>
 80008ee:	001c      	movs	r4, r3
 80008f0:	0020      	movs	r0, r4
 80008f2:	bd30      	pop	{r4, r5, pc}
 80008f4:	4b09      	ldr	r3, [pc, #36]	; (800091c <__aeabi_d2iz+0x64>)
 80008f6:	18cc      	adds	r4, r1, r3
 80008f8:	e7fa      	b.n	80008f0 <__aeabi_d2iz+0x38>
 80008fa:	4d09      	ldr	r5, [pc, #36]	; (8000920 <__aeabi_d2iz+0x68>)
 80008fc:	40e0      	lsrs	r0, r4
 80008fe:	46ac      	mov	ip, r5
 8000900:	4463      	add	r3, ip
 8000902:	409a      	lsls	r2, r3
 8000904:	0013      	movs	r3, r2
 8000906:	4303      	orrs	r3, r0
 8000908:	e7ee      	b.n	80008e8 <__aeabi_d2iz+0x30>
 800090a:	46c0      	nop			; (mov r8, r8)
 800090c:	000003fe 	.word	0x000003fe
 8000910:	0000041d 	.word	0x0000041d
 8000914:	00000433 	.word	0x00000433
 8000918:	00000413 	.word	0x00000413
 800091c:	7fffffff 	.word	0x7fffffff
 8000920:	fffffbed 	.word	0xfffffbed

08000924 <__aeabi_ui2d>:
 8000924:	b510      	push	{r4, lr}
 8000926:	1e04      	subs	r4, r0, #0
 8000928:	d025      	beq.n	8000976 <__aeabi_ui2d+0x52>
 800092a:	f000 f87f 	bl	8000a2c <__clzsi2>
 800092e:	4b14      	ldr	r3, [pc, #80]	; (8000980 <__aeabi_ui2d+0x5c>)
 8000930:	1a1b      	subs	r3, r3, r0
 8000932:	055b      	lsls	r3, r3, #21
 8000934:	0d5b      	lsrs	r3, r3, #21
 8000936:	280a      	cmp	r0, #10
 8000938:	dd12      	ble.n	8000960 <__aeabi_ui2d+0x3c>
 800093a:	380b      	subs	r0, #11
 800093c:	4084      	lsls	r4, r0
 800093e:	2200      	movs	r2, #0
 8000940:	0324      	lsls	r4, r4, #12
 8000942:	0b24      	lsrs	r4, r4, #12
 8000944:	2100      	movs	r1, #0
 8000946:	0010      	movs	r0, r2
 8000948:	0324      	lsls	r4, r4, #12
 800094a:	0d0a      	lsrs	r2, r1, #20
 800094c:	0b24      	lsrs	r4, r4, #12
 800094e:	0512      	lsls	r2, r2, #20
 8000950:	4322      	orrs	r2, r4
 8000952:	4c0c      	ldr	r4, [pc, #48]	; (8000984 <__aeabi_ui2d+0x60>)
 8000954:	051b      	lsls	r3, r3, #20
 8000956:	4022      	ands	r2, r4
 8000958:	4313      	orrs	r3, r2
 800095a:	005b      	lsls	r3, r3, #1
 800095c:	0859      	lsrs	r1, r3, #1
 800095e:	bd10      	pop	{r4, pc}
 8000960:	0002      	movs	r2, r0
 8000962:	0021      	movs	r1, r4
 8000964:	3215      	adds	r2, #21
 8000966:	4091      	lsls	r1, r2
 8000968:	000a      	movs	r2, r1
 800096a:	210b      	movs	r1, #11
 800096c:	1a08      	subs	r0, r1, r0
 800096e:	40c4      	lsrs	r4, r0
 8000970:	0324      	lsls	r4, r4, #12
 8000972:	0b24      	lsrs	r4, r4, #12
 8000974:	e7e6      	b.n	8000944 <__aeabi_ui2d+0x20>
 8000976:	2300      	movs	r3, #0
 8000978:	2400      	movs	r4, #0
 800097a:	2200      	movs	r2, #0
 800097c:	e7e2      	b.n	8000944 <__aeabi_ui2d+0x20>
 800097e:	46c0      	nop			; (mov r8, r8)
 8000980:	0000041e 	.word	0x0000041e
 8000984:	800fffff 	.word	0x800fffff

08000988 <__aeabi_f2d>:
 8000988:	0041      	lsls	r1, r0, #1
 800098a:	0e09      	lsrs	r1, r1, #24
 800098c:	1c4b      	adds	r3, r1, #1
 800098e:	b570      	push	{r4, r5, r6, lr}
 8000990:	b2db      	uxtb	r3, r3
 8000992:	0246      	lsls	r6, r0, #9
 8000994:	0a75      	lsrs	r5, r6, #9
 8000996:	0fc4      	lsrs	r4, r0, #31
 8000998:	2b01      	cmp	r3, #1
 800099a:	dd14      	ble.n	80009c6 <__aeabi_f2d+0x3e>
 800099c:	23e0      	movs	r3, #224	; 0xe0
 800099e:	009b      	lsls	r3, r3, #2
 80009a0:	076d      	lsls	r5, r5, #29
 80009a2:	0b36      	lsrs	r6, r6, #12
 80009a4:	18cb      	adds	r3, r1, r3
 80009a6:	2100      	movs	r1, #0
 80009a8:	0d0a      	lsrs	r2, r1, #20
 80009aa:	0028      	movs	r0, r5
 80009ac:	0512      	lsls	r2, r2, #20
 80009ae:	4d1c      	ldr	r5, [pc, #112]	; (8000a20 <__aeabi_f2d+0x98>)
 80009b0:	4332      	orrs	r2, r6
 80009b2:	055b      	lsls	r3, r3, #21
 80009b4:	402a      	ands	r2, r5
 80009b6:	085b      	lsrs	r3, r3, #1
 80009b8:	4313      	orrs	r3, r2
 80009ba:	005b      	lsls	r3, r3, #1
 80009bc:	07e4      	lsls	r4, r4, #31
 80009be:	085b      	lsrs	r3, r3, #1
 80009c0:	4323      	orrs	r3, r4
 80009c2:	0019      	movs	r1, r3
 80009c4:	bd70      	pop	{r4, r5, r6, pc}
 80009c6:	2900      	cmp	r1, #0
 80009c8:	d114      	bne.n	80009f4 <__aeabi_f2d+0x6c>
 80009ca:	2d00      	cmp	r5, #0
 80009cc:	d01e      	beq.n	8000a0c <__aeabi_f2d+0x84>
 80009ce:	0028      	movs	r0, r5
 80009d0:	f000 f82c 	bl	8000a2c <__clzsi2>
 80009d4:	280a      	cmp	r0, #10
 80009d6:	dc1c      	bgt.n	8000a12 <__aeabi_f2d+0x8a>
 80009d8:	230b      	movs	r3, #11
 80009da:	002a      	movs	r2, r5
 80009dc:	1a1b      	subs	r3, r3, r0
 80009de:	40da      	lsrs	r2, r3
 80009e0:	0003      	movs	r3, r0
 80009e2:	3315      	adds	r3, #21
 80009e4:	409d      	lsls	r5, r3
 80009e6:	4b0f      	ldr	r3, [pc, #60]	; (8000a24 <__aeabi_f2d+0x9c>)
 80009e8:	0312      	lsls	r2, r2, #12
 80009ea:	1a1b      	subs	r3, r3, r0
 80009ec:	055b      	lsls	r3, r3, #21
 80009ee:	0b16      	lsrs	r6, r2, #12
 80009f0:	0d5b      	lsrs	r3, r3, #21
 80009f2:	e7d8      	b.n	80009a6 <__aeabi_f2d+0x1e>
 80009f4:	2d00      	cmp	r5, #0
 80009f6:	d006      	beq.n	8000a06 <__aeabi_f2d+0x7e>
 80009f8:	0b32      	lsrs	r2, r6, #12
 80009fa:	2680      	movs	r6, #128	; 0x80
 80009fc:	0336      	lsls	r6, r6, #12
 80009fe:	076d      	lsls	r5, r5, #29
 8000a00:	4316      	orrs	r6, r2
 8000a02:	4b09      	ldr	r3, [pc, #36]	; (8000a28 <__aeabi_f2d+0xa0>)
 8000a04:	e7cf      	b.n	80009a6 <__aeabi_f2d+0x1e>
 8000a06:	4b08      	ldr	r3, [pc, #32]	; (8000a28 <__aeabi_f2d+0xa0>)
 8000a08:	2600      	movs	r6, #0
 8000a0a:	e7cc      	b.n	80009a6 <__aeabi_f2d+0x1e>
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	2600      	movs	r6, #0
 8000a10:	e7c9      	b.n	80009a6 <__aeabi_f2d+0x1e>
 8000a12:	0003      	movs	r3, r0
 8000a14:	002a      	movs	r2, r5
 8000a16:	3b0b      	subs	r3, #11
 8000a18:	409a      	lsls	r2, r3
 8000a1a:	2500      	movs	r5, #0
 8000a1c:	e7e3      	b.n	80009e6 <__aeabi_f2d+0x5e>
 8000a1e:	46c0      	nop			; (mov r8, r8)
 8000a20:	800fffff 	.word	0x800fffff
 8000a24:	00000389 	.word	0x00000389
 8000a28:	000007ff 	.word	0x000007ff

08000a2c <__clzsi2>:
 8000a2c:	211c      	movs	r1, #28
 8000a2e:	2301      	movs	r3, #1
 8000a30:	041b      	lsls	r3, r3, #16
 8000a32:	4298      	cmp	r0, r3
 8000a34:	d301      	bcc.n	8000a3a <__clzsi2+0xe>
 8000a36:	0c00      	lsrs	r0, r0, #16
 8000a38:	3910      	subs	r1, #16
 8000a3a:	0a1b      	lsrs	r3, r3, #8
 8000a3c:	4298      	cmp	r0, r3
 8000a3e:	d301      	bcc.n	8000a44 <__clzsi2+0x18>
 8000a40:	0a00      	lsrs	r0, r0, #8
 8000a42:	3908      	subs	r1, #8
 8000a44:	091b      	lsrs	r3, r3, #4
 8000a46:	4298      	cmp	r0, r3
 8000a48:	d301      	bcc.n	8000a4e <__clzsi2+0x22>
 8000a4a:	0900      	lsrs	r0, r0, #4
 8000a4c:	3904      	subs	r1, #4
 8000a4e:	a202      	add	r2, pc, #8	; (adr r2, 8000a58 <__clzsi2+0x2c>)
 8000a50:	5c10      	ldrb	r0, [r2, r0]
 8000a52:	1840      	adds	r0, r0, r1
 8000a54:	4770      	bx	lr
 8000a56:	46c0      	nop			; (mov r8, r8)
 8000a58:	02020304 	.word	0x02020304
 8000a5c:	01010101 	.word	0x01010101
	...

08000a68 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b082      	sub	sp, #8
 8000a6c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a6e:	4b0c      	ldr	r3, [pc, #48]	; (8000aa0 <MX_DMA_Init+0x38>)
 8000a70:	695a      	ldr	r2, [r3, #20]
 8000a72:	4b0b      	ldr	r3, [pc, #44]	; (8000aa0 <MX_DMA_Init+0x38>)
 8000a74:	2101      	movs	r1, #1
 8000a76:	430a      	orrs	r2, r1
 8000a78:	615a      	str	r2, [r3, #20]
 8000a7a:	4b09      	ldr	r3, [pc, #36]	; (8000aa0 <MX_DMA_Init+0x38>)
 8000a7c:	695b      	ldr	r3, [r3, #20]
 8000a7e:	2201      	movs	r2, #1
 8000a80:	4013      	ands	r3, r2
 8000a82:	607b      	str	r3, [r7, #4]
 8000a84:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8000a86:	2200      	movs	r2, #0
 8000a88:	2100      	movs	r1, #0
 8000a8a:	200a      	movs	r0, #10
 8000a8c:	f000 fc22 	bl	80012d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000a90:	200a      	movs	r0, #10
 8000a92:	f000 fc34 	bl	80012fe <HAL_NVIC_EnableIRQ>

}
 8000a96:	46c0      	nop			; (mov r8, r8)
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	b002      	add	sp, #8
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	46c0      	nop			; (mov r8, r8)
 8000aa0:	40021000 	.word	0x40021000

08000aa4 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000aa4:	b590      	push	{r4, r7, lr}
 8000aa6:	b089      	sub	sp, #36	; 0x24
 8000aa8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aaa:	240c      	movs	r4, #12
 8000aac:	193b      	adds	r3, r7, r4
 8000aae:	0018      	movs	r0, r3
 8000ab0:	2314      	movs	r3, #20
 8000ab2:	001a      	movs	r2, r3
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	f003 fcd1 	bl	800445c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aba:	4b29      	ldr	r3, [pc, #164]	; (8000b60 <MX_GPIO_Init+0xbc>)
 8000abc:	695a      	ldr	r2, [r3, #20]
 8000abe:	4b28      	ldr	r3, [pc, #160]	; (8000b60 <MX_GPIO_Init+0xbc>)
 8000ac0:	2180      	movs	r1, #128	; 0x80
 8000ac2:	0289      	lsls	r1, r1, #10
 8000ac4:	430a      	orrs	r2, r1
 8000ac6:	615a      	str	r2, [r3, #20]
 8000ac8:	4b25      	ldr	r3, [pc, #148]	; (8000b60 <MX_GPIO_Init+0xbc>)
 8000aca:	695a      	ldr	r2, [r3, #20]
 8000acc:	2380      	movs	r3, #128	; 0x80
 8000ace:	029b      	lsls	r3, r3, #10
 8000ad0:	4013      	ands	r3, r2
 8000ad2:	60bb      	str	r3, [r7, #8]
 8000ad4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ad6:	4b22      	ldr	r3, [pc, #136]	; (8000b60 <MX_GPIO_Init+0xbc>)
 8000ad8:	695a      	ldr	r2, [r3, #20]
 8000ada:	4b21      	ldr	r3, [pc, #132]	; (8000b60 <MX_GPIO_Init+0xbc>)
 8000adc:	2180      	movs	r1, #128	; 0x80
 8000ade:	02c9      	lsls	r1, r1, #11
 8000ae0:	430a      	orrs	r2, r1
 8000ae2:	615a      	str	r2, [r3, #20]
 8000ae4:	4b1e      	ldr	r3, [pc, #120]	; (8000b60 <MX_GPIO_Init+0xbc>)
 8000ae6:	695a      	ldr	r2, [r3, #20]
 8000ae8:	2380      	movs	r3, #128	; 0x80
 8000aea:	02db      	lsls	r3, r3, #11
 8000aec:	4013      	ands	r3, r2
 8000aee:	607b      	str	r3, [r7, #4]
 8000af0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_15, GPIO_PIN_RESET);
 8000af2:	491c      	ldr	r1, [pc, #112]	; (8000b64 <MX_GPIO_Init+0xc0>)
 8000af4:	2390      	movs	r3, #144	; 0x90
 8000af6:	05db      	lsls	r3, r3, #23
 8000af8:	2200      	movs	r2, #0
 8000afa:	0018      	movs	r0, r3
 8000afc:	f000 ff6a 	bl	80019d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8000b00:	4b19      	ldr	r3, [pc, #100]	; (8000b68 <MX_GPIO_Init+0xc4>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	2108      	movs	r1, #8
 8000b06:	0018      	movs	r0, r3
 8000b08:	f000 ff64 	bl	80019d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA5 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_15;
 8000b0c:	193b      	adds	r3, r7, r4
 8000b0e:	4a15      	ldr	r2, [pc, #84]	; (8000b64 <MX_GPIO_Init+0xc0>)
 8000b10:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b12:	193b      	adds	r3, r7, r4
 8000b14:	2201      	movs	r2, #1
 8000b16:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b18:	193b      	adds	r3, r7, r4
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b1e:	193b      	adds	r3, r7, r4
 8000b20:	2200      	movs	r2, #0
 8000b22:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b24:	193a      	adds	r2, r7, r4
 8000b26:	2390      	movs	r3, #144	; 0x90
 8000b28:	05db      	lsls	r3, r3, #23
 8000b2a:	0011      	movs	r1, r2
 8000b2c:	0018      	movs	r0, r3
 8000b2e:	f000 fde1 	bl	80016f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000b32:	0021      	movs	r1, r4
 8000b34:	187b      	adds	r3, r7, r1
 8000b36:	2208      	movs	r2, #8
 8000b38:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b3a:	187b      	adds	r3, r7, r1
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b40:	187b      	adds	r3, r7, r1
 8000b42:	2200      	movs	r2, #0
 8000b44:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b46:	187b      	adds	r3, r7, r1
 8000b48:	2200      	movs	r2, #0
 8000b4a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b4c:	187b      	adds	r3, r7, r1
 8000b4e:	4a06      	ldr	r2, [pc, #24]	; (8000b68 <MX_GPIO_Init+0xc4>)
 8000b50:	0019      	movs	r1, r3
 8000b52:	0010      	movs	r0, r2
 8000b54:	f000 fdce 	bl	80016f4 <HAL_GPIO_Init>

}
 8000b58:	46c0      	nop			; (mov r8, r8)
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	b009      	add	sp, #36	; 0x24
 8000b5e:	bd90      	pop	{r4, r7, pc}
 8000b60:	40021000 	.word	0x40021000
 8000b64:	00008020 	.word	0x00008020
 8000b68:	48000400 	.word	0x48000400

08000b6c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000b70:	4b1b      	ldr	r3, [pc, #108]	; (8000be0 <MX_I2C1_Init+0x74>)
 8000b72:	4a1c      	ldr	r2, [pc, #112]	; (8000be4 <MX_I2C1_Init+0x78>)
 8000b74:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000b76:	4b1a      	ldr	r3, [pc, #104]	; (8000be0 <MX_I2C1_Init+0x74>)
 8000b78:	4a1b      	ldr	r2, [pc, #108]	; (8000be8 <MX_I2C1_Init+0x7c>)
 8000b7a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000b7c:	4b18      	ldr	r3, [pc, #96]	; (8000be0 <MX_I2C1_Init+0x74>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b82:	4b17      	ldr	r3, [pc, #92]	; (8000be0 <MX_I2C1_Init+0x74>)
 8000b84:	2201      	movs	r2, #1
 8000b86:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b88:	4b15      	ldr	r3, [pc, #84]	; (8000be0 <MX_I2C1_Init+0x74>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000b8e:	4b14      	ldr	r3, [pc, #80]	; (8000be0 <MX_I2C1_Init+0x74>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b94:	4b12      	ldr	r3, [pc, #72]	; (8000be0 <MX_I2C1_Init+0x74>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b9a:	4b11      	ldr	r3, [pc, #68]	; (8000be0 <MX_I2C1_Init+0x74>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ba0:	4b0f      	ldr	r3, [pc, #60]	; (8000be0 <MX_I2C1_Init+0x74>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ba6:	4b0e      	ldr	r3, [pc, #56]	; (8000be0 <MX_I2C1_Init+0x74>)
 8000ba8:	0018      	movs	r0, r3
 8000baa:	f000 ff4b 	bl	8001a44 <HAL_I2C_Init>
 8000bae:	1e03      	subs	r3, r0, #0
 8000bb0:	d001      	beq.n	8000bb6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000bb2:	f000 f8eb 	bl	8000d8c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000bb6:	4b0a      	ldr	r3, [pc, #40]	; (8000be0 <MX_I2C1_Init+0x74>)
 8000bb8:	2100      	movs	r1, #0
 8000bba:	0018      	movs	r0, r3
 8000bbc:	f001 fbfc 	bl	80023b8 <HAL_I2CEx_ConfigAnalogFilter>
 8000bc0:	1e03      	subs	r3, r0, #0
 8000bc2:	d001      	beq.n	8000bc8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000bc4:	f000 f8e2 	bl	8000d8c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000bc8:	4b05      	ldr	r3, [pc, #20]	; (8000be0 <MX_I2C1_Init+0x74>)
 8000bca:	2100      	movs	r1, #0
 8000bcc:	0018      	movs	r0, r3
 8000bce:	f001 fc3f 	bl	8002450 <HAL_I2CEx_ConfigDigitalFilter>
 8000bd2:	1e03      	subs	r3, r0, #0
 8000bd4:	d001      	beq.n	8000bda <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000bd6:	f000 f8d9 	bl	8000d8c <Error_Handler>
  }

}
 8000bda:	46c0      	nop			; (mov r8, r8)
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	200004f4 	.word	0x200004f4
 8000be4:	40005400 	.word	0x40005400
 8000be8:	2000090e 	.word	0x2000090e

08000bec <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b08a      	sub	sp, #40	; 0x28
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf4:	2314      	movs	r3, #20
 8000bf6:	18fb      	adds	r3, r7, r3
 8000bf8:	0018      	movs	r0, r3
 8000bfa:	2314      	movs	r3, #20
 8000bfc:	001a      	movs	r2, r3
 8000bfe:	2100      	movs	r1, #0
 8000c00:	f003 fc2c 	bl	800445c <memset>
  if(i2cHandle->Instance==I2C1)
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4a1c      	ldr	r2, [pc, #112]	; (8000c7c <HAL_I2C_MspInit+0x90>)
 8000c0a:	4293      	cmp	r3, r2
 8000c0c:	d131      	bne.n	8000c72 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c0e:	4b1c      	ldr	r3, [pc, #112]	; (8000c80 <HAL_I2C_MspInit+0x94>)
 8000c10:	695a      	ldr	r2, [r3, #20]
 8000c12:	4b1b      	ldr	r3, [pc, #108]	; (8000c80 <HAL_I2C_MspInit+0x94>)
 8000c14:	2180      	movs	r1, #128	; 0x80
 8000c16:	02c9      	lsls	r1, r1, #11
 8000c18:	430a      	orrs	r2, r1
 8000c1a:	615a      	str	r2, [r3, #20]
 8000c1c:	4b18      	ldr	r3, [pc, #96]	; (8000c80 <HAL_I2C_MspInit+0x94>)
 8000c1e:	695a      	ldr	r2, [r3, #20]
 8000c20:	2380      	movs	r3, #128	; 0x80
 8000c22:	02db      	lsls	r3, r3, #11
 8000c24:	4013      	ands	r3, r2
 8000c26:	613b      	str	r3, [r7, #16]
 8000c28:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c2a:	2114      	movs	r1, #20
 8000c2c:	187b      	adds	r3, r7, r1
 8000c2e:	22c0      	movs	r2, #192	; 0xc0
 8000c30:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c32:	187b      	adds	r3, r7, r1
 8000c34:	2212      	movs	r2, #18
 8000c36:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c38:	187b      	adds	r3, r7, r1
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c3e:	187b      	adds	r3, r7, r1
 8000c40:	2203      	movs	r2, #3
 8000c42:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8000c44:	187b      	adds	r3, r7, r1
 8000c46:	2201      	movs	r2, #1
 8000c48:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c4a:	187b      	adds	r3, r7, r1
 8000c4c:	4a0d      	ldr	r2, [pc, #52]	; (8000c84 <HAL_I2C_MspInit+0x98>)
 8000c4e:	0019      	movs	r1, r3
 8000c50:	0010      	movs	r0, r2
 8000c52:	f000 fd4f 	bl	80016f4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c56:	4b0a      	ldr	r3, [pc, #40]	; (8000c80 <HAL_I2C_MspInit+0x94>)
 8000c58:	69da      	ldr	r2, [r3, #28]
 8000c5a:	4b09      	ldr	r3, [pc, #36]	; (8000c80 <HAL_I2C_MspInit+0x94>)
 8000c5c:	2180      	movs	r1, #128	; 0x80
 8000c5e:	0389      	lsls	r1, r1, #14
 8000c60:	430a      	orrs	r2, r1
 8000c62:	61da      	str	r2, [r3, #28]
 8000c64:	4b06      	ldr	r3, [pc, #24]	; (8000c80 <HAL_I2C_MspInit+0x94>)
 8000c66:	69da      	ldr	r2, [r3, #28]
 8000c68:	2380      	movs	r3, #128	; 0x80
 8000c6a:	039b      	lsls	r3, r3, #14
 8000c6c:	4013      	ands	r3, r2
 8000c6e:	60fb      	str	r3, [r7, #12]
 8000c70:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000c72:	46c0      	nop			; (mov r8, r8)
 8000c74:	46bd      	mov	sp, r7
 8000c76:	b00a      	add	sp, #40	; 0x28
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	46c0      	nop			; (mov r8, r8)
 8000c7c:	40005400 	.word	0x40005400
 8000c80:	40021000 	.word	0x40021000
 8000c84:	48000400 	.word	0x48000400

08000c88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c8c:	f000 f9f0 	bl	8001070 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c90:	f000 f822 	bl	8000cd8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c94:	f7ff ff06 	bl	8000aa4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c98:	f7ff fee6 	bl	8000a68 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000c9c:	f000 f90e 	bl	8000ebc <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8000ca0:	f7ff ff64 	bl	8000b6c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  test_i2c_device();
 8000ca4:	f002 fff2 	bl	8003c8c <test_i2c_device>

  // start receiving on UART via DMA

  HAL_UART_Receive_DMA(&huart1, uart_data_in, 1);
 8000ca8:	4909      	ldr	r1, [pc, #36]	; (8000cd0 <main+0x48>)
 8000caa:	4b0a      	ldr	r3, [pc, #40]	; (8000cd4 <main+0x4c>)
 8000cac:	2201      	movs	r2, #1
 8000cae:	0018      	movs	r0, r3
 8000cb0:	f002 f9ba 	bl	8003028 <HAL_UART_Receive_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  i2c_display_loop();
 8000cb4:	f003 f82a 	bl	8003d0c <i2c_display_loop>

	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000cb8:	2390      	movs	r3, #144	; 0x90
 8000cba:	05db      	lsls	r3, r3, #23
 8000cbc:	2120      	movs	r1, #32
 8000cbe:	0018      	movs	r0, r3
 8000cc0:	f000 fea5 	bl	8001a0e <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 8000cc4:	23fa      	movs	r3, #250	; 0xfa
 8000cc6:	009b      	lsls	r3, r3, #2
 8000cc8:	0018      	movs	r0, r3
 8000cca:	f000 fa35 	bl	8001138 <HAL_Delay>
	  i2c_display_loop();
 8000cce:	e7f1      	b.n	8000cb4 <main+0x2c>
 8000cd0:	20000540 	.word	0x20000540
 8000cd4:	20000588 	.word	0x20000588

08000cd8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cd8:	b590      	push	{r4, r7, lr}
 8000cda:	b097      	sub	sp, #92	; 0x5c
 8000cdc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cde:	2428      	movs	r4, #40	; 0x28
 8000ce0:	193b      	adds	r3, r7, r4
 8000ce2:	0018      	movs	r0, r3
 8000ce4:	2330      	movs	r3, #48	; 0x30
 8000ce6:	001a      	movs	r2, r3
 8000ce8:	2100      	movs	r1, #0
 8000cea:	f003 fbb7 	bl	800445c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cee:	2318      	movs	r3, #24
 8000cf0:	18fb      	adds	r3, r7, r3
 8000cf2:	0018      	movs	r0, r3
 8000cf4:	2310      	movs	r3, #16
 8000cf6:	001a      	movs	r2, r3
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	f003 fbaf 	bl	800445c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cfe:	1d3b      	adds	r3, r7, #4
 8000d00:	0018      	movs	r0, r3
 8000d02:	2314      	movs	r3, #20
 8000d04:	001a      	movs	r2, r3
 8000d06:	2100      	movs	r1, #0
 8000d08:	f003 fba8 	bl	800445c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d0c:	0021      	movs	r1, r4
 8000d0e:	187b      	adds	r3, r7, r1
 8000d10:	2202      	movs	r2, #2
 8000d12:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d14:	187b      	adds	r3, r7, r1
 8000d16:	2201      	movs	r2, #1
 8000d18:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d1a:	187b      	adds	r3, r7, r1
 8000d1c:	2210      	movs	r2, #16
 8000d1e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000d20:	187b      	adds	r3, r7, r1
 8000d22:	2200      	movs	r2, #0
 8000d24:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d26:	187b      	adds	r3, r7, r1
 8000d28:	0018      	movs	r0, r3
 8000d2a:	f001 fbdd 	bl	80024e8 <HAL_RCC_OscConfig>
 8000d2e:	1e03      	subs	r3, r0, #0
 8000d30:	d001      	beq.n	8000d36 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000d32:	f000 f82b 	bl	8000d8c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d36:	2118      	movs	r1, #24
 8000d38:	187b      	adds	r3, r7, r1
 8000d3a:	2207      	movs	r2, #7
 8000d3c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000d3e:	187b      	adds	r3, r7, r1
 8000d40:	2200      	movs	r2, #0
 8000d42:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d44:	187b      	adds	r3, r7, r1
 8000d46:	2200      	movs	r2, #0
 8000d48:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d4a:	187b      	adds	r3, r7, r1
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000d50:	187b      	adds	r3, r7, r1
 8000d52:	2100      	movs	r1, #0
 8000d54:	0018      	movs	r0, r3
 8000d56:	f001 fee3 	bl	8002b20 <HAL_RCC_ClockConfig>
 8000d5a:	1e03      	subs	r3, r0, #0
 8000d5c:	d001      	beq.n	8000d62 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000d5e:	f000 f815 	bl	8000d8c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8000d62:	1d3b      	adds	r3, r7, #4
 8000d64:	2221      	movs	r2, #33	; 0x21
 8000d66:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000d68:	1d3b      	adds	r3, r7, #4
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000d6e:	1d3b      	adds	r3, r7, #4
 8000d70:	2200      	movs	r2, #0
 8000d72:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d74:	1d3b      	adds	r3, r7, #4
 8000d76:	0018      	movs	r0, r3
 8000d78:	f002 f824 	bl	8002dc4 <HAL_RCCEx_PeriphCLKConfig>
 8000d7c:	1e03      	subs	r3, r0, #0
 8000d7e:	d001      	beq.n	8000d84 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000d80:	f000 f804 	bl	8000d8c <Error_Handler>
  }
}
 8000d84:	46c0      	nop			; (mov r8, r8)
 8000d86:	46bd      	mov	sp, r7
 8000d88:	b017      	add	sp, #92	; 0x5c
 8000d8a:	bd90      	pop	{r4, r7, pc}

08000d8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000d90:	46c0      	nop			; (mov r8, r8)
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
	...

08000d98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d9e:	4b0f      	ldr	r3, [pc, #60]	; (8000ddc <HAL_MspInit+0x44>)
 8000da0:	699a      	ldr	r2, [r3, #24]
 8000da2:	4b0e      	ldr	r3, [pc, #56]	; (8000ddc <HAL_MspInit+0x44>)
 8000da4:	2101      	movs	r1, #1
 8000da6:	430a      	orrs	r2, r1
 8000da8:	619a      	str	r2, [r3, #24]
 8000daa:	4b0c      	ldr	r3, [pc, #48]	; (8000ddc <HAL_MspInit+0x44>)
 8000dac:	699b      	ldr	r3, [r3, #24]
 8000dae:	2201      	movs	r2, #1
 8000db0:	4013      	ands	r3, r2
 8000db2:	607b      	str	r3, [r7, #4]
 8000db4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000db6:	4b09      	ldr	r3, [pc, #36]	; (8000ddc <HAL_MspInit+0x44>)
 8000db8:	69da      	ldr	r2, [r3, #28]
 8000dba:	4b08      	ldr	r3, [pc, #32]	; (8000ddc <HAL_MspInit+0x44>)
 8000dbc:	2180      	movs	r1, #128	; 0x80
 8000dbe:	0549      	lsls	r1, r1, #21
 8000dc0:	430a      	orrs	r2, r1
 8000dc2:	61da      	str	r2, [r3, #28]
 8000dc4:	4b05      	ldr	r3, [pc, #20]	; (8000ddc <HAL_MspInit+0x44>)
 8000dc6:	69da      	ldr	r2, [r3, #28]
 8000dc8:	2380      	movs	r3, #128	; 0x80
 8000dca:	055b      	lsls	r3, r3, #21
 8000dcc:	4013      	ands	r3, r2
 8000dce:	603b      	str	r3, [r7, #0]
 8000dd0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dd2:	46c0      	nop			; (mov r8, r8)
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	b002      	add	sp, #8
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	46c0      	nop			; (mov r8, r8)
 8000ddc:	40021000 	.word	0x40021000

08000de0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000de4:	46c0      	nop			; (mov r8, r8)
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}

08000dea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dea:	b580      	push	{r7, lr}
 8000dec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dee:	e7fe      	b.n	8000dee <HardFault_Handler+0x4>

08000df0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000df4:	46c0      	nop			; (mov r8, r8)
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}

08000dfa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dfa:	b580      	push	{r7, lr}
 8000dfc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dfe:	46c0      	nop			; (mov r8, r8)
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}

08000e04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e08:	f000 f97a 	bl	8001100 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e0c:	46c0      	nop			; (mov r8, r8)
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
	...

08000e14 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000e18:	4b03      	ldr	r3, [pc, #12]	; (8000e28 <DMA1_Channel2_3_IRQHandler+0x14>)
 8000e1a:	0018      	movs	r0, r3
 8000e1c:	f000 fb80 	bl	8001520 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8000e20:	46c0      	nop			; (mov r8, r8)
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	46c0      	nop			; (mov r8, r8)
 8000e28:	20000544 	.word	0x20000544

08000e2c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000e30:	4b03      	ldr	r3, [pc, #12]	; (8000e40 <USART1_IRQHandler+0x14>)
 8000e32:	0018      	movs	r0, r3
 8000e34:	f002 f990 	bl	8003158 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000e38:	46c0      	nop			; (mov r8, r8)
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	46c0      	nop			; (mov r8, r8)
 8000e40:	20000588 	.word	0x20000588

08000e44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b086      	sub	sp, #24
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e4c:	4a14      	ldr	r2, [pc, #80]	; (8000ea0 <_sbrk+0x5c>)
 8000e4e:	4b15      	ldr	r3, [pc, #84]	; (8000ea4 <_sbrk+0x60>)
 8000e50:	1ad3      	subs	r3, r2, r3
 8000e52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e58:	4b13      	ldr	r3, [pc, #76]	; (8000ea8 <_sbrk+0x64>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d102      	bne.n	8000e66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e60:	4b11      	ldr	r3, [pc, #68]	; (8000ea8 <_sbrk+0x64>)
 8000e62:	4a12      	ldr	r2, [pc, #72]	; (8000eac <_sbrk+0x68>)
 8000e64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e66:	4b10      	ldr	r3, [pc, #64]	; (8000ea8 <_sbrk+0x64>)
 8000e68:	681a      	ldr	r2, [r3, #0]
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	18d3      	adds	r3, r2, r3
 8000e6e:	693a      	ldr	r2, [r7, #16]
 8000e70:	429a      	cmp	r2, r3
 8000e72:	d207      	bcs.n	8000e84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e74:	f003 faac 	bl	80043d0 <__errno>
 8000e78:	0003      	movs	r3, r0
 8000e7a:	220c      	movs	r2, #12
 8000e7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e7e:	2301      	movs	r3, #1
 8000e80:	425b      	negs	r3, r3
 8000e82:	e009      	b.n	8000e98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e84:	4b08      	ldr	r3, [pc, #32]	; (8000ea8 <_sbrk+0x64>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e8a:	4b07      	ldr	r3, [pc, #28]	; (8000ea8 <_sbrk+0x64>)
 8000e8c:	681a      	ldr	r2, [r3, #0]
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	18d2      	adds	r2, r2, r3
 8000e92:	4b05      	ldr	r3, [pc, #20]	; (8000ea8 <_sbrk+0x64>)
 8000e94:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000e96:	68fb      	ldr	r3, [r7, #12]
}
 8000e98:	0018      	movs	r0, r3
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	b006      	add	sp, #24
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	20002000 	.word	0x20002000
 8000ea4:	00000400 	.word	0x00000400
 8000ea8:	200000e0 	.word	0x200000e0
 8000eac:	20000610 	.word	0x20000610

08000eb0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000eb4:	46c0      	nop			; (mov r8, r8)
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
	...

08000ebc <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8000ec0:	4b14      	ldr	r3, [pc, #80]	; (8000f14 <MX_USART1_UART_Init+0x58>)
 8000ec2:	4a15      	ldr	r2, [pc, #84]	; (8000f18 <MX_USART1_UART_Init+0x5c>)
 8000ec4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000ec6:	4b13      	ldr	r3, [pc, #76]	; (8000f14 <MX_USART1_UART_Init+0x58>)
 8000ec8:	22e1      	movs	r2, #225	; 0xe1
 8000eca:	0252      	lsls	r2, r2, #9
 8000ecc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ece:	4b11      	ldr	r3, [pc, #68]	; (8000f14 <MX_USART1_UART_Init+0x58>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ed4:	4b0f      	ldr	r3, [pc, #60]	; (8000f14 <MX_USART1_UART_Init+0x58>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000eda:	4b0e      	ldr	r3, [pc, #56]	; (8000f14 <MX_USART1_UART_Init+0x58>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ee0:	4b0c      	ldr	r3, [pc, #48]	; (8000f14 <MX_USART1_UART_Init+0x58>)
 8000ee2:	220c      	movs	r2, #12
 8000ee4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ee6:	4b0b      	ldr	r3, [pc, #44]	; (8000f14 <MX_USART1_UART_Init+0x58>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000eec:	4b09      	ldr	r3, [pc, #36]	; (8000f14 <MX_USART1_UART_Init+0x58>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ef2:	4b08      	ldr	r3, [pc, #32]	; (8000f14 <MX_USART1_UART_Init+0x58>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ef8:	4b06      	ldr	r3, [pc, #24]	; (8000f14 <MX_USART1_UART_Init+0x58>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000efe:	4b05      	ldr	r3, [pc, #20]	; (8000f14 <MX_USART1_UART_Init+0x58>)
 8000f00:	0018      	movs	r0, r3
 8000f02:	f002 f83d 	bl	8002f80 <HAL_UART_Init>
 8000f06:	1e03      	subs	r3, r0, #0
 8000f08:	d001      	beq.n	8000f0e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000f0a:	f7ff ff3f 	bl	8000d8c <Error_Handler>
  }

}
 8000f0e:	46c0      	nop			; (mov r8, r8)
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	20000588 	.word	0x20000588
 8000f18:	40013800 	.word	0x40013800

08000f1c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b08a      	sub	sp, #40	; 0x28
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f24:	2314      	movs	r3, #20
 8000f26:	18fb      	adds	r3, r7, r3
 8000f28:	0018      	movs	r0, r3
 8000f2a:	2314      	movs	r3, #20
 8000f2c:	001a      	movs	r2, r3
 8000f2e:	2100      	movs	r1, #0
 8000f30:	f003 fa94 	bl	800445c <memset>
  if(uartHandle->Instance==USART1)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4a34      	ldr	r2, [pc, #208]	; (800100c <HAL_UART_MspInit+0xf0>)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d161      	bne.n	8001002 <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f3e:	4b34      	ldr	r3, [pc, #208]	; (8001010 <HAL_UART_MspInit+0xf4>)
 8000f40:	699a      	ldr	r2, [r3, #24]
 8000f42:	4b33      	ldr	r3, [pc, #204]	; (8001010 <HAL_UART_MspInit+0xf4>)
 8000f44:	2180      	movs	r1, #128	; 0x80
 8000f46:	01c9      	lsls	r1, r1, #7
 8000f48:	430a      	orrs	r2, r1
 8000f4a:	619a      	str	r2, [r3, #24]
 8000f4c:	4b30      	ldr	r3, [pc, #192]	; (8001010 <HAL_UART_MspInit+0xf4>)
 8000f4e:	699a      	ldr	r2, [r3, #24]
 8000f50:	2380      	movs	r3, #128	; 0x80
 8000f52:	01db      	lsls	r3, r3, #7
 8000f54:	4013      	ands	r3, r2
 8000f56:	613b      	str	r3, [r7, #16]
 8000f58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f5a:	4b2d      	ldr	r3, [pc, #180]	; (8001010 <HAL_UART_MspInit+0xf4>)
 8000f5c:	695a      	ldr	r2, [r3, #20]
 8000f5e:	4b2c      	ldr	r3, [pc, #176]	; (8001010 <HAL_UART_MspInit+0xf4>)
 8000f60:	2180      	movs	r1, #128	; 0x80
 8000f62:	0289      	lsls	r1, r1, #10
 8000f64:	430a      	orrs	r2, r1
 8000f66:	615a      	str	r2, [r3, #20]
 8000f68:	4b29      	ldr	r3, [pc, #164]	; (8001010 <HAL_UART_MspInit+0xf4>)
 8000f6a:	695a      	ldr	r2, [r3, #20]
 8000f6c:	2380      	movs	r3, #128	; 0x80
 8000f6e:	029b      	lsls	r3, r3, #10
 8000f70:	4013      	ands	r3, r2
 8000f72:	60fb      	str	r3, [r7, #12]
 8000f74:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000f76:	2114      	movs	r1, #20
 8000f78:	187b      	adds	r3, r7, r1
 8000f7a:	22c0      	movs	r2, #192	; 0xc0
 8000f7c:	00d2      	lsls	r2, r2, #3
 8000f7e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f80:	187b      	adds	r3, r7, r1
 8000f82:	2202      	movs	r2, #2
 8000f84:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f86:	187b      	adds	r3, r7, r1
 8000f88:	2200      	movs	r2, #0
 8000f8a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f8c:	187b      	adds	r3, r7, r1
 8000f8e:	2203      	movs	r2, #3
 8000f90:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000f92:	187b      	adds	r3, r7, r1
 8000f94:	2201      	movs	r2, #1
 8000f96:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f98:	187a      	adds	r2, r7, r1
 8000f9a:	2390      	movs	r3, #144	; 0x90
 8000f9c:	05db      	lsls	r3, r3, #23
 8000f9e:	0011      	movs	r1, r2
 8000fa0:	0018      	movs	r0, r3
 8000fa2:	f000 fba7 	bl	80016f4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel3;
 8000fa6:	4b1b      	ldr	r3, [pc, #108]	; (8001014 <HAL_UART_MspInit+0xf8>)
 8000fa8:	4a1b      	ldr	r2, [pc, #108]	; (8001018 <HAL_UART_MspInit+0xfc>)
 8000faa:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000fac:	4b19      	ldr	r3, [pc, #100]	; (8001014 <HAL_UART_MspInit+0xf8>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fb2:	4b18      	ldr	r3, [pc, #96]	; (8001014 <HAL_UART_MspInit+0xf8>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000fb8:	4b16      	ldr	r3, [pc, #88]	; (8001014 <HAL_UART_MspInit+0xf8>)
 8000fba:	2280      	movs	r2, #128	; 0x80
 8000fbc:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000fbe:	4b15      	ldr	r3, [pc, #84]	; (8001014 <HAL_UART_MspInit+0xf8>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000fc4:	4b13      	ldr	r3, [pc, #76]	; (8001014 <HAL_UART_MspInit+0xf8>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8000fca:	4b12      	ldr	r3, [pc, #72]	; (8001014 <HAL_UART_MspInit+0xf8>)
 8000fcc:	2220      	movs	r2, #32
 8000fce:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000fd0:	4b10      	ldr	r3, [pc, #64]	; (8001014 <HAL_UART_MspInit+0xf8>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000fd6:	4b0f      	ldr	r3, [pc, #60]	; (8001014 <HAL_UART_MspInit+0xf8>)
 8000fd8:	0018      	movs	r0, r3
 8000fda:	f000 f9ad 	bl	8001338 <HAL_DMA_Init>
 8000fde:	1e03      	subs	r3, r0, #0
 8000fe0:	d001      	beq.n	8000fe6 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8000fe2:	f7ff fed3 	bl	8000d8c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	4a0a      	ldr	r2, [pc, #40]	; (8001014 <HAL_UART_MspInit+0xf8>)
 8000fea:	66da      	str	r2, [r3, #108]	; 0x6c
 8000fec:	4b09      	ldr	r3, [pc, #36]	; (8001014 <HAL_UART_MspInit+0xf8>)
 8000fee:	687a      	ldr	r2, [r7, #4]
 8000ff0:	625a      	str	r2, [r3, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	201b      	movs	r0, #27
 8000ff8:	f000 f96c 	bl	80012d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000ffc:	201b      	movs	r0, #27
 8000ffe:	f000 f97e 	bl	80012fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001002:	46c0      	nop			; (mov r8, r8)
 8001004:	46bd      	mov	sp, r7
 8001006:	b00a      	add	sp, #40	; 0x28
 8001008:	bd80      	pop	{r7, pc}
 800100a:	46c0      	nop			; (mov r8, r8)
 800100c:	40013800 	.word	0x40013800
 8001010:	40021000 	.word	0x40021000
 8001014:	20000544 	.word	0x20000544
 8001018:	40020030 	.word	0x40020030

0800101c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800101c:	480d      	ldr	r0, [pc, #52]	; (8001054 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800101e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001020:	480d      	ldr	r0, [pc, #52]	; (8001058 <LoopForever+0x6>)
  ldr r1, =_edata
 8001022:	490e      	ldr	r1, [pc, #56]	; (800105c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001024:	4a0e      	ldr	r2, [pc, #56]	; (8001060 <LoopForever+0xe>)
  movs r3, #0
 8001026:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001028:	e002      	b.n	8001030 <LoopCopyDataInit>

0800102a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800102a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800102c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800102e:	3304      	adds	r3, #4

08001030 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001030:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001032:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001034:	d3f9      	bcc.n	800102a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001036:	4a0b      	ldr	r2, [pc, #44]	; (8001064 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001038:	4c0b      	ldr	r4, [pc, #44]	; (8001068 <LoopForever+0x16>)
  movs r3, #0
 800103a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800103c:	e001      	b.n	8001042 <LoopFillZerobss>

0800103e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800103e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001040:	3204      	adds	r2, #4

08001042 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001042:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001044:	d3fb      	bcc.n	800103e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001046:	f7ff ff33 	bl	8000eb0 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800104a:	f003 f9c7 	bl	80043dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800104e:	f7ff fe1b 	bl	8000c88 <main>

08001052 <LoopForever>:

LoopForever:
    b LoopForever
 8001052:	e7fe      	b.n	8001052 <LoopForever>
  ldr   r0, =_estack
 8001054:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001058:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800105c:	200000c4 	.word	0x200000c4
  ldr r2, =_sidata
 8001060:	080075bc 	.word	0x080075bc
  ldr r2, =_sbss
 8001064:	200000c4 	.word	0x200000c4
  ldr r4, =_ebss
 8001068:	20000610 	.word	0x20000610

0800106c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800106c:	e7fe      	b.n	800106c <ADC1_COMP_IRQHandler>
	...

08001070 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001074:	4b07      	ldr	r3, [pc, #28]	; (8001094 <HAL_Init+0x24>)
 8001076:	681a      	ldr	r2, [r3, #0]
 8001078:	4b06      	ldr	r3, [pc, #24]	; (8001094 <HAL_Init+0x24>)
 800107a:	2110      	movs	r1, #16
 800107c:	430a      	orrs	r2, r1
 800107e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001080:	2000      	movs	r0, #0
 8001082:	f000 f809 	bl	8001098 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001086:	f7ff fe87 	bl	8000d98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800108a:	2300      	movs	r3, #0
}
 800108c:	0018      	movs	r0, r3
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	46c0      	nop			; (mov r8, r8)
 8001094:	40022000 	.word	0x40022000

08001098 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001098:	b590      	push	{r4, r7, lr}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010a0:	4b14      	ldr	r3, [pc, #80]	; (80010f4 <HAL_InitTick+0x5c>)
 80010a2:	681c      	ldr	r4, [r3, #0]
 80010a4:	4b14      	ldr	r3, [pc, #80]	; (80010f8 <HAL_InitTick+0x60>)
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	0019      	movs	r1, r3
 80010aa:	23fa      	movs	r3, #250	; 0xfa
 80010ac:	0098      	lsls	r0, r3, #2
 80010ae:	f7ff f82b 	bl	8000108 <__udivsi3>
 80010b2:	0003      	movs	r3, r0
 80010b4:	0019      	movs	r1, r3
 80010b6:	0020      	movs	r0, r4
 80010b8:	f7ff f826 	bl	8000108 <__udivsi3>
 80010bc:	0003      	movs	r3, r0
 80010be:	0018      	movs	r0, r3
 80010c0:	f000 f92d 	bl	800131e <HAL_SYSTICK_Config>
 80010c4:	1e03      	subs	r3, r0, #0
 80010c6:	d001      	beq.n	80010cc <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80010c8:	2301      	movs	r3, #1
 80010ca:	e00f      	b.n	80010ec <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2b03      	cmp	r3, #3
 80010d0:	d80b      	bhi.n	80010ea <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010d2:	6879      	ldr	r1, [r7, #4]
 80010d4:	2301      	movs	r3, #1
 80010d6:	425b      	negs	r3, r3
 80010d8:	2200      	movs	r2, #0
 80010da:	0018      	movs	r0, r3
 80010dc:	f000 f8fa 	bl	80012d4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010e0:	4b06      	ldr	r3, [pc, #24]	; (80010fc <HAL_InitTick+0x64>)
 80010e2:	687a      	ldr	r2, [r7, #4]
 80010e4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80010e6:	2300      	movs	r3, #0
 80010e8:	e000      	b.n	80010ec <HAL_InitTick+0x54>
    return HAL_ERROR;
 80010ea:	2301      	movs	r3, #1
}
 80010ec:	0018      	movs	r0, r3
 80010ee:	46bd      	mov	sp, r7
 80010f0:	b003      	add	sp, #12
 80010f2:	bd90      	pop	{r4, r7, pc}
 80010f4:	20000000 	.word	0x20000000
 80010f8:	20000008 	.word	0x20000008
 80010fc:	20000004 	.word	0x20000004

08001100 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001104:	4b05      	ldr	r3, [pc, #20]	; (800111c <HAL_IncTick+0x1c>)
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	001a      	movs	r2, r3
 800110a:	4b05      	ldr	r3, [pc, #20]	; (8001120 <HAL_IncTick+0x20>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	18d2      	adds	r2, r2, r3
 8001110:	4b03      	ldr	r3, [pc, #12]	; (8001120 <HAL_IncTick+0x20>)
 8001112:	601a      	str	r2, [r3, #0]
}
 8001114:	46c0      	nop			; (mov r8, r8)
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	46c0      	nop			; (mov r8, r8)
 800111c:	20000008 	.word	0x20000008
 8001120:	20000608 	.word	0x20000608

08001124 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
  return uwTick;
 8001128:	4b02      	ldr	r3, [pc, #8]	; (8001134 <HAL_GetTick+0x10>)
 800112a:	681b      	ldr	r3, [r3, #0]
}
 800112c:	0018      	movs	r0, r3
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	46c0      	nop			; (mov r8, r8)
 8001134:	20000608 	.word	0x20000608

08001138 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b084      	sub	sp, #16
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001140:	f7ff fff0 	bl	8001124 <HAL_GetTick>
 8001144:	0003      	movs	r3, r0
 8001146:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	3301      	adds	r3, #1
 8001150:	d005      	beq.n	800115e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001152:	4b09      	ldr	r3, [pc, #36]	; (8001178 <HAL_Delay+0x40>)
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	001a      	movs	r2, r3
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	189b      	adds	r3, r3, r2
 800115c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800115e:	46c0      	nop			; (mov r8, r8)
 8001160:	f7ff ffe0 	bl	8001124 <HAL_GetTick>
 8001164:	0002      	movs	r2, r0
 8001166:	68bb      	ldr	r3, [r7, #8]
 8001168:	1ad3      	subs	r3, r2, r3
 800116a:	68fa      	ldr	r2, [r7, #12]
 800116c:	429a      	cmp	r2, r3
 800116e:	d8f7      	bhi.n	8001160 <HAL_Delay+0x28>
  {
  }
}
 8001170:	46c0      	nop			; (mov r8, r8)
 8001172:	46bd      	mov	sp, r7
 8001174:	b004      	add	sp, #16
 8001176:	bd80      	pop	{r7, pc}
 8001178:	20000008 	.word	0x20000008

0800117c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
 8001182:	0002      	movs	r2, r0
 8001184:	1dfb      	adds	r3, r7, #7
 8001186:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001188:	1dfb      	adds	r3, r7, #7
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	2b7f      	cmp	r3, #127	; 0x7f
 800118e:	d809      	bhi.n	80011a4 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001190:	1dfb      	adds	r3, r7, #7
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	001a      	movs	r2, r3
 8001196:	231f      	movs	r3, #31
 8001198:	401a      	ands	r2, r3
 800119a:	4b04      	ldr	r3, [pc, #16]	; (80011ac <__NVIC_EnableIRQ+0x30>)
 800119c:	2101      	movs	r1, #1
 800119e:	4091      	lsls	r1, r2
 80011a0:	000a      	movs	r2, r1
 80011a2:	601a      	str	r2, [r3, #0]
  }
}
 80011a4:	46c0      	nop			; (mov r8, r8)
 80011a6:	46bd      	mov	sp, r7
 80011a8:	b002      	add	sp, #8
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	e000e100 	.word	0xe000e100

080011b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011b0:	b590      	push	{r4, r7, lr}
 80011b2:	b083      	sub	sp, #12
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	0002      	movs	r2, r0
 80011b8:	6039      	str	r1, [r7, #0]
 80011ba:	1dfb      	adds	r3, r7, #7
 80011bc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80011be:	1dfb      	adds	r3, r7, #7
 80011c0:	781b      	ldrb	r3, [r3, #0]
 80011c2:	2b7f      	cmp	r3, #127	; 0x7f
 80011c4:	d828      	bhi.n	8001218 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011c6:	4a2f      	ldr	r2, [pc, #188]	; (8001284 <__NVIC_SetPriority+0xd4>)
 80011c8:	1dfb      	adds	r3, r7, #7
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	b25b      	sxtb	r3, r3
 80011ce:	089b      	lsrs	r3, r3, #2
 80011d0:	33c0      	adds	r3, #192	; 0xc0
 80011d2:	009b      	lsls	r3, r3, #2
 80011d4:	589b      	ldr	r3, [r3, r2]
 80011d6:	1dfa      	adds	r2, r7, #7
 80011d8:	7812      	ldrb	r2, [r2, #0]
 80011da:	0011      	movs	r1, r2
 80011dc:	2203      	movs	r2, #3
 80011de:	400a      	ands	r2, r1
 80011e0:	00d2      	lsls	r2, r2, #3
 80011e2:	21ff      	movs	r1, #255	; 0xff
 80011e4:	4091      	lsls	r1, r2
 80011e6:	000a      	movs	r2, r1
 80011e8:	43d2      	mvns	r2, r2
 80011ea:	401a      	ands	r2, r3
 80011ec:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	019b      	lsls	r3, r3, #6
 80011f2:	22ff      	movs	r2, #255	; 0xff
 80011f4:	401a      	ands	r2, r3
 80011f6:	1dfb      	adds	r3, r7, #7
 80011f8:	781b      	ldrb	r3, [r3, #0]
 80011fa:	0018      	movs	r0, r3
 80011fc:	2303      	movs	r3, #3
 80011fe:	4003      	ands	r3, r0
 8001200:	00db      	lsls	r3, r3, #3
 8001202:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001204:	481f      	ldr	r0, [pc, #124]	; (8001284 <__NVIC_SetPriority+0xd4>)
 8001206:	1dfb      	adds	r3, r7, #7
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	b25b      	sxtb	r3, r3
 800120c:	089b      	lsrs	r3, r3, #2
 800120e:	430a      	orrs	r2, r1
 8001210:	33c0      	adds	r3, #192	; 0xc0
 8001212:	009b      	lsls	r3, r3, #2
 8001214:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001216:	e031      	b.n	800127c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001218:	4a1b      	ldr	r2, [pc, #108]	; (8001288 <__NVIC_SetPriority+0xd8>)
 800121a:	1dfb      	adds	r3, r7, #7
 800121c:	781b      	ldrb	r3, [r3, #0]
 800121e:	0019      	movs	r1, r3
 8001220:	230f      	movs	r3, #15
 8001222:	400b      	ands	r3, r1
 8001224:	3b08      	subs	r3, #8
 8001226:	089b      	lsrs	r3, r3, #2
 8001228:	3306      	adds	r3, #6
 800122a:	009b      	lsls	r3, r3, #2
 800122c:	18d3      	adds	r3, r2, r3
 800122e:	3304      	adds	r3, #4
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	1dfa      	adds	r2, r7, #7
 8001234:	7812      	ldrb	r2, [r2, #0]
 8001236:	0011      	movs	r1, r2
 8001238:	2203      	movs	r2, #3
 800123a:	400a      	ands	r2, r1
 800123c:	00d2      	lsls	r2, r2, #3
 800123e:	21ff      	movs	r1, #255	; 0xff
 8001240:	4091      	lsls	r1, r2
 8001242:	000a      	movs	r2, r1
 8001244:	43d2      	mvns	r2, r2
 8001246:	401a      	ands	r2, r3
 8001248:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	019b      	lsls	r3, r3, #6
 800124e:	22ff      	movs	r2, #255	; 0xff
 8001250:	401a      	ands	r2, r3
 8001252:	1dfb      	adds	r3, r7, #7
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	0018      	movs	r0, r3
 8001258:	2303      	movs	r3, #3
 800125a:	4003      	ands	r3, r0
 800125c:	00db      	lsls	r3, r3, #3
 800125e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001260:	4809      	ldr	r0, [pc, #36]	; (8001288 <__NVIC_SetPriority+0xd8>)
 8001262:	1dfb      	adds	r3, r7, #7
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	001c      	movs	r4, r3
 8001268:	230f      	movs	r3, #15
 800126a:	4023      	ands	r3, r4
 800126c:	3b08      	subs	r3, #8
 800126e:	089b      	lsrs	r3, r3, #2
 8001270:	430a      	orrs	r2, r1
 8001272:	3306      	adds	r3, #6
 8001274:	009b      	lsls	r3, r3, #2
 8001276:	18c3      	adds	r3, r0, r3
 8001278:	3304      	adds	r3, #4
 800127a:	601a      	str	r2, [r3, #0]
}
 800127c:	46c0      	nop			; (mov r8, r8)
 800127e:	46bd      	mov	sp, r7
 8001280:	b003      	add	sp, #12
 8001282:	bd90      	pop	{r4, r7, pc}
 8001284:	e000e100 	.word	0xe000e100
 8001288:	e000ed00 	.word	0xe000ed00

0800128c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	3b01      	subs	r3, #1
 8001298:	4a0c      	ldr	r2, [pc, #48]	; (80012cc <SysTick_Config+0x40>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d901      	bls.n	80012a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800129e:	2301      	movs	r3, #1
 80012a0:	e010      	b.n	80012c4 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012a2:	4b0b      	ldr	r3, [pc, #44]	; (80012d0 <SysTick_Config+0x44>)
 80012a4:	687a      	ldr	r2, [r7, #4]
 80012a6:	3a01      	subs	r2, #1
 80012a8:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012aa:	2301      	movs	r3, #1
 80012ac:	425b      	negs	r3, r3
 80012ae:	2103      	movs	r1, #3
 80012b0:	0018      	movs	r0, r3
 80012b2:	f7ff ff7d 	bl	80011b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012b6:	4b06      	ldr	r3, [pc, #24]	; (80012d0 <SysTick_Config+0x44>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012bc:	4b04      	ldr	r3, [pc, #16]	; (80012d0 <SysTick_Config+0x44>)
 80012be:	2207      	movs	r2, #7
 80012c0:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012c2:	2300      	movs	r3, #0
}
 80012c4:	0018      	movs	r0, r3
 80012c6:	46bd      	mov	sp, r7
 80012c8:	b002      	add	sp, #8
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	00ffffff 	.word	0x00ffffff
 80012d0:	e000e010 	.word	0xe000e010

080012d4 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b084      	sub	sp, #16
 80012d8:	af00      	add	r7, sp, #0
 80012da:	60b9      	str	r1, [r7, #8]
 80012dc:	607a      	str	r2, [r7, #4]
 80012de:	210f      	movs	r1, #15
 80012e0:	187b      	adds	r3, r7, r1
 80012e2:	1c02      	adds	r2, r0, #0
 80012e4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80012e6:	68ba      	ldr	r2, [r7, #8]
 80012e8:	187b      	adds	r3, r7, r1
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	b25b      	sxtb	r3, r3
 80012ee:	0011      	movs	r1, r2
 80012f0:	0018      	movs	r0, r3
 80012f2:	f7ff ff5d 	bl	80011b0 <__NVIC_SetPriority>
}
 80012f6:	46c0      	nop			; (mov r8, r8)
 80012f8:	46bd      	mov	sp, r7
 80012fa:	b004      	add	sp, #16
 80012fc:	bd80      	pop	{r7, pc}

080012fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012fe:	b580      	push	{r7, lr}
 8001300:	b082      	sub	sp, #8
 8001302:	af00      	add	r7, sp, #0
 8001304:	0002      	movs	r2, r0
 8001306:	1dfb      	adds	r3, r7, #7
 8001308:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800130a:	1dfb      	adds	r3, r7, #7
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	b25b      	sxtb	r3, r3
 8001310:	0018      	movs	r0, r3
 8001312:	f7ff ff33 	bl	800117c <__NVIC_EnableIRQ>
}
 8001316:	46c0      	nop			; (mov r8, r8)
 8001318:	46bd      	mov	sp, r7
 800131a:	b002      	add	sp, #8
 800131c:	bd80      	pop	{r7, pc}

0800131e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800131e:	b580      	push	{r7, lr}
 8001320:	b082      	sub	sp, #8
 8001322:	af00      	add	r7, sp, #0
 8001324:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	0018      	movs	r0, r3
 800132a:	f7ff ffaf 	bl	800128c <SysTick_Config>
 800132e:	0003      	movs	r3, r0
}
 8001330:	0018      	movs	r0, r3
 8001332:	46bd      	mov	sp, r7
 8001334:	b002      	add	sp, #8
 8001336:	bd80      	pop	{r7, pc}

08001338 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8001338:	b580      	push	{r7, lr}
 800133a:	b084      	sub	sp, #16
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001340:	2300      	movs	r3, #0
 8001342:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d101      	bne.n	800134e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800134a:	2301      	movs	r3, #1
 800134c:	e036      	b.n	80013bc <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2221      	movs	r2, #33	; 0x21
 8001352:	2102      	movs	r1, #2
 8001354:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	4a18      	ldr	r2, [pc, #96]	; (80013c4 <HAL_DMA_Init+0x8c>)
 8001362:	4013      	ands	r3, r2
 8001364:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800136e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	68db      	ldr	r3, [r3, #12]
 8001374:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800137a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	695b      	ldr	r3, [r3, #20]
 8001380:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001386:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	69db      	ldr	r3, [r3, #28]
 800138c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800138e:	68fa      	ldr	r2, [r7, #12]
 8001390:	4313      	orrs	r3, r2
 8001392:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	68fa      	ldr	r2, [r7, #12]
 800139a:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	0018      	movs	r0, r3
 80013a0:	f000 f98c 	bl	80016bc <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2200      	movs	r2, #0
 80013a8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2221      	movs	r2, #33	; 0x21
 80013ae:	2101      	movs	r1, #1
 80013b0:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2220      	movs	r2, #32
 80013b6:	2100      	movs	r1, #0
 80013b8:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 80013ba:	2300      	movs	r3, #0
}  
 80013bc:	0018      	movs	r0, r3
 80013be:	46bd      	mov	sp, r7
 80013c0:	b004      	add	sp, #16
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	ffffc00f 	.word	0xffffc00f

080013c8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b086      	sub	sp, #24
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	60f8      	str	r0, [r7, #12]
 80013d0:	60b9      	str	r1, [r7, #8]
 80013d2:	607a      	str	r2, [r7, #4]
 80013d4:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 80013d6:	2317      	movs	r3, #23
 80013d8:	18fb      	adds	r3, r7, r3
 80013da:	2200      	movs	r2, #0
 80013dc:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	2220      	movs	r2, #32
 80013e2:	5c9b      	ldrb	r3, [r3, r2]
 80013e4:	2b01      	cmp	r3, #1
 80013e6:	d101      	bne.n	80013ec <HAL_DMA_Start_IT+0x24>
 80013e8:	2302      	movs	r3, #2
 80013ea:	e04f      	b.n	800148c <HAL_DMA_Start_IT+0xc4>
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	2220      	movs	r2, #32
 80013f0:	2101      	movs	r1, #1
 80013f2:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	2221      	movs	r2, #33	; 0x21
 80013f8:	5c9b      	ldrb	r3, [r3, r2]
 80013fa:	b2db      	uxtb	r3, r3
 80013fc:	2b01      	cmp	r3, #1
 80013fe:	d13a      	bne.n	8001476 <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	2221      	movs	r2, #33	; 0x21
 8001404:	2102      	movs	r1, #2
 8001406:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	2200      	movs	r2, #0
 800140c:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	681a      	ldr	r2, [r3, #0]
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	2101      	movs	r1, #1
 800141a:	438a      	bics	r2, r1
 800141c:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	687a      	ldr	r2, [r7, #4]
 8001422:	68b9      	ldr	r1, [r7, #8]
 8001424:	68f8      	ldr	r0, [r7, #12]
 8001426:	f000 f91d 	bl	8001664 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800142e:	2b00      	cmp	r3, #0
 8001430:	d008      	beq.n	8001444 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	681a      	ldr	r2, [r3, #0]
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	210e      	movs	r1, #14
 800143e:	430a      	orrs	r2, r1
 8001440:	601a      	str	r2, [r3, #0]
 8001442:	e00f      	b.n	8001464 <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	681a      	ldr	r2, [r3, #0]
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	210a      	movs	r1, #10
 8001450:	430a      	orrs	r2, r1
 8001452:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	681a      	ldr	r2, [r3, #0]
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	2104      	movs	r1, #4
 8001460:	438a      	bics	r2, r1
 8001462:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	681a      	ldr	r2, [r3, #0]
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	2101      	movs	r1, #1
 8001470:	430a      	orrs	r2, r1
 8001472:	601a      	str	r2, [r3, #0]
 8001474:	e007      	b.n	8001486 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	2220      	movs	r2, #32
 800147a:	2100      	movs	r1, #0
 800147c:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 800147e:	2317      	movs	r3, #23
 8001480:	18fb      	adds	r3, r7, r3
 8001482:	2202      	movs	r2, #2
 8001484:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 8001486:	2317      	movs	r3, #23
 8001488:	18fb      	adds	r3, r7, r3
 800148a:	781b      	ldrb	r3, [r3, #0]
} 
 800148c:	0018      	movs	r0, r3
 800148e:	46bd      	mov	sp, r7
 8001490:	b006      	add	sp, #24
 8001492:	bd80      	pop	{r7, pc}

08001494 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001494:	b580      	push	{r7, lr}
 8001496:	b084      	sub	sp, #16
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800149c:	230f      	movs	r3, #15
 800149e:	18fb      	adds	r3, r7, r3
 80014a0:	2200      	movs	r2, #0
 80014a2:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2221      	movs	r2, #33	; 0x21
 80014a8:	5c9b      	ldrb	r3, [r3, r2]
 80014aa:	b2db      	uxtb	r3, r3
 80014ac:	2b02      	cmp	r3, #2
 80014ae:	d007      	beq.n	80014c0 <HAL_DMA_Abort_IT+0x2c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2204      	movs	r2, #4
 80014b4:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80014b6:	230f      	movs	r3, #15
 80014b8:	18fb      	adds	r3, r7, r3
 80014ba:	2201      	movs	r2, #1
 80014bc:	701a      	strb	r2, [r3, #0]
 80014be:	e028      	b.n	8001512 <HAL_DMA_Abort_IT+0x7e>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	681a      	ldr	r2, [r3, #0]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	210e      	movs	r1, #14
 80014cc:	438a      	bics	r2, r1
 80014ce:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	681a      	ldr	r2, [r3, #0]
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	2101      	movs	r1, #1
 80014dc:	438a      	bics	r2, r1
 80014de:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014e8:	2101      	movs	r1, #1
 80014ea:	4091      	lsls	r1, r2
 80014ec:	000a      	movs	r2, r1
 80014ee:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	2221      	movs	r2, #33	; 0x21
 80014f4:	2101      	movs	r1, #1
 80014f6:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2220      	movs	r2, #32
 80014fc:	2100      	movs	r1, #0
 80014fe:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001504:	2b00      	cmp	r3, #0
 8001506:	d004      	beq.n	8001512 <HAL_DMA_Abort_IT+0x7e>
    {
      hdma->XferAbortCallback(hdma);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800150c:	687a      	ldr	r2, [r7, #4]
 800150e:	0010      	movs	r0, r2
 8001510:	4798      	blx	r3
    } 
  }
  return status;
 8001512:	230f      	movs	r3, #15
 8001514:	18fb      	adds	r3, r7, r3
 8001516:	781b      	ldrb	r3, [r3, #0]
}
 8001518:	0018      	movs	r0, r3
 800151a:	46bd      	mov	sp, r7
 800151c:	b004      	add	sp, #16
 800151e:	bd80      	pop	{r7, pc}

08001520 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b084      	sub	sp, #16
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153c:	2204      	movs	r2, #4
 800153e:	409a      	lsls	r2, r3
 8001540:	0013      	movs	r3, r2
 8001542:	68fa      	ldr	r2, [r7, #12]
 8001544:	4013      	ands	r3, r2
 8001546:	d024      	beq.n	8001592 <HAL_DMA_IRQHandler+0x72>
 8001548:	68bb      	ldr	r3, [r7, #8]
 800154a:	2204      	movs	r2, #4
 800154c:	4013      	ands	r3, r2
 800154e:	d020      	beq.n	8001592 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	2220      	movs	r2, #32
 8001558:	4013      	ands	r3, r2
 800155a:	d107      	bne.n	800156c <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	2104      	movs	r1, #4
 8001568:	438a      	bics	r2, r1
 800156a:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001574:	2104      	movs	r1, #4
 8001576:	4091      	lsls	r1, r2
 8001578:	000a      	movs	r2, r1
 800157a:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001580:	2b00      	cmp	r3, #0
 8001582:	d100      	bne.n	8001586 <HAL_DMA_IRQHandler+0x66>
 8001584:	e06a      	b.n	800165c <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800158a:	687a      	ldr	r2, [r7, #4]
 800158c:	0010      	movs	r0, r2
 800158e:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8001590:	e064      	b.n	800165c <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001596:	2202      	movs	r2, #2
 8001598:	409a      	lsls	r2, r3
 800159a:	0013      	movs	r3, r2
 800159c:	68fa      	ldr	r2, [r7, #12]
 800159e:	4013      	ands	r3, r2
 80015a0:	d02b      	beq.n	80015fa <HAL_DMA_IRQHandler+0xda>
 80015a2:	68bb      	ldr	r3, [r7, #8]
 80015a4:	2202      	movs	r2, #2
 80015a6:	4013      	ands	r3, r2
 80015a8:	d027      	beq.n	80015fa <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	2220      	movs	r2, #32
 80015b2:	4013      	ands	r3, r2
 80015b4:	d10b      	bne.n	80015ce <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	681a      	ldr	r2, [r3, #0]
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	210a      	movs	r1, #10
 80015c2:	438a      	bics	r2, r1
 80015c4:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2221      	movs	r2, #33	; 0x21
 80015ca:	2101      	movs	r1, #1
 80015cc:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015d6:	2102      	movs	r1, #2
 80015d8:	4091      	lsls	r1, r2
 80015da:	000a      	movs	r2, r1
 80015dc:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2220      	movs	r2, #32
 80015e2:	2100      	movs	r1, #0
 80015e4:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d036      	beq.n	800165c <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015f2:	687a      	ldr	r2, [r7, #4]
 80015f4:	0010      	movs	r0, r2
 80015f6:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 80015f8:	e030      	b.n	800165c <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fe:	2208      	movs	r2, #8
 8001600:	409a      	lsls	r2, r3
 8001602:	0013      	movs	r3, r2
 8001604:	68fa      	ldr	r2, [r7, #12]
 8001606:	4013      	ands	r3, r2
 8001608:	d028      	beq.n	800165c <HAL_DMA_IRQHandler+0x13c>
 800160a:	68bb      	ldr	r3, [r7, #8]
 800160c:	2208      	movs	r2, #8
 800160e:	4013      	ands	r3, r2
 8001610:	d024      	beq.n	800165c <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	210e      	movs	r1, #14
 800161e:	438a      	bics	r2, r1
 8001620:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800162a:	2101      	movs	r1, #1
 800162c:	4091      	lsls	r1, r2
 800162e:	000a      	movs	r2, r1
 8001630:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2201      	movs	r2, #1
 8001636:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2221      	movs	r2, #33	; 0x21
 800163c:	2101      	movs	r1, #1
 800163e:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2220      	movs	r2, #32
 8001644:	2100      	movs	r1, #0
 8001646:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164c:	2b00      	cmp	r3, #0
 800164e:	d005      	beq.n	800165c <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001654:	687a      	ldr	r2, [r7, #4]
 8001656:	0010      	movs	r0, r2
 8001658:	4798      	blx	r3
    }
   }
}  
 800165a:	e7ff      	b.n	800165c <HAL_DMA_IRQHandler+0x13c>
 800165c:	46c0      	nop			; (mov r8, r8)
 800165e:	46bd      	mov	sp, r7
 8001660:	b004      	add	sp, #16
 8001662:	bd80      	pop	{r7, pc}

08001664 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b084      	sub	sp, #16
 8001668:	af00      	add	r7, sp, #0
 800166a:	60f8      	str	r0, [r7, #12]
 800166c:	60b9      	str	r1, [r7, #8]
 800166e:	607a      	str	r2, [r7, #4]
 8001670:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800167a:	2101      	movs	r1, #1
 800167c:	4091      	lsls	r1, r2
 800167e:	000a      	movs	r2, r1
 8001680:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	683a      	ldr	r2, [r7, #0]
 8001688:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	2b10      	cmp	r3, #16
 8001690:	d108      	bne.n	80016a4 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	687a      	ldr	r2, [r7, #4]
 8001698:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	68ba      	ldr	r2, [r7, #8]
 80016a0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80016a2:	e007      	b.n	80016b4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	68ba      	ldr	r2, [r7, #8]
 80016aa:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	687a      	ldr	r2, [r7, #4]
 80016b2:	60da      	str	r2, [r3, #12]
}
 80016b4:	46c0      	nop			; (mov r8, r8)
 80016b6:	46bd      	mov	sp, r7
 80016b8:	b004      	add	sp, #16
 80016ba:	bd80      	pop	{r7, pc}

080016bc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a08      	ldr	r2, [pc, #32]	; (80016ec <DMA_CalcBaseAndBitshift+0x30>)
 80016ca:	4694      	mov	ip, r2
 80016cc:	4463      	add	r3, ip
 80016ce:	2114      	movs	r1, #20
 80016d0:	0018      	movs	r0, r3
 80016d2:	f7fe fd19 	bl	8000108 <__udivsi3>
 80016d6:	0003      	movs	r3, r0
 80016d8:	009a      	lsls	r2, r3, #2
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	4a03      	ldr	r2, [pc, #12]	; (80016f0 <DMA_CalcBaseAndBitshift+0x34>)
 80016e2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 80016e4:	46c0      	nop			; (mov r8, r8)
 80016e6:	46bd      	mov	sp, r7
 80016e8:	b002      	add	sp, #8
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	bffdfff8 	.word	0xbffdfff8
 80016f0:	40020000 	.word	0x40020000

080016f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b086      	sub	sp, #24
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
 80016fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016fe:	2300      	movs	r3, #0
 8001700:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001702:	e14f      	b.n	80019a4 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	2101      	movs	r1, #1
 800170a:	697a      	ldr	r2, [r7, #20]
 800170c:	4091      	lsls	r1, r2
 800170e:	000a      	movs	r2, r1
 8001710:	4013      	ands	r3, r2
 8001712:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d100      	bne.n	800171c <HAL_GPIO_Init+0x28>
 800171a:	e140      	b.n	800199e <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	2b01      	cmp	r3, #1
 8001722:	d00b      	beq.n	800173c <HAL_GPIO_Init+0x48>
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	2b02      	cmp	r3, #2
 800172a:	d007      	beq.n	800173c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001730:	2b11      	cmp	r3, #17
 8001732:	d003      	beq.n	800173c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	2b12      	cmp	r3, #18
 800173a:	d130      	bne.n	800179e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	689b      	ldr	r3, [r3, #8]
 8001740:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	005b      	lsls	r3, r3, #1
 8001746:	2203      	movs	r2, #3
 8001748:	409a      	lsls	r2, r3
 800174a:	0013      	movs	r3, r2
 800174c:	43da      	mvns	r2, r3
 800174e:	693b      	ldr	r3, [r7, #16]
 8001750:	4013      	ands	r3, r2
 8001752:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	68da      	ldr	r2, [r3, #12]
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	005b      	lsls	r3, r3, #1
 800175c:	409a      	lsls	r2, r3
 800175e:	0013      	movs	r3, r2
 8001760:	693a      	ldr	r2, [r7, #16]
 8001762:	4313      	orrs	r3, r2
 8001764:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	693a      	ldr	r2, [r7, #16]
 800176a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001772:	2201      	movs	r2, #1
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	409a      	lsls	r2, r3
 8001778:	0013      	movs	r3, r2
 800177a:	43da      	mvns	r2, r3
 800177c:	693b      	ldr	r3, [r7, #16]
 800177e:	4013      	ands	r3, r2
 8001780:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	091b      	lsrs	r3, r3, #4
 8001788:	2201      	movs	r2, #1
 800178a:	401a      	ands	r2, r3
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	409a      	lsls	r2, r3
 8001790:	0013      	movs	r3, r2
 8001792:	693a      	ldr	r2, [r7, #16]
 8001794:	4313      	orrs	r3, r2
 8001796:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	693a      	ldr	r2, [r7, #16]
 800179c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	68db      	ldr	r3, [r3, #12]
 80017a2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	005b      	lsls	r3, r3, #1
 80017a8:	2203      	movs	r2, #3
 80017aa:	409a      	lsls	r2, r3
 80017ac:	0013      	movs	r3, r2
 80017ae:	43da      	mvns	r2, r3
 80017b0:	693b      	ldr	r3, [r7, #16]
 80017b2:	4013      	ands	r3, r2
 80017b4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	689a      	ldr	r2, [r3, #8]
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	005b      	lsls	r3, r3, #1
 80017be:	409a      	lsls	r2, r3
 80017c0:	0013      	movs	r3, r2
 80017c2:	693a      	ldr	r2, [r7, #16]
 80017c4:	4313      	orrs	r3, r2
 80017c6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	693a      	ldr	r2, [r7, #16]
 80017cc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	2b02      	cmp	r3, #2
 80017d4:	d003      	beq.n	80017de <HAL_GPIO_Init+0xea>
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	2b12      	cmp	r3, #18
 80017dc:	d123      	bne.n	8001826 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	08da      	lsrs	r2, r3, #3
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	3208      	adds	r2, #8
 80017e6:	0092      	lsls	r2, r2, #2
 80017e8:	58d3      	ldr	r3, [r2, r3]
 80017ea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	2207      	movs	r2, #7
 80017f0:	4013      	ands	r3, r2
 80017f2:	009b      	lsls	r3, r3, #2
 80017f4:	220f      	movs	r2, #15
 80017f6:	409a      	lsls	r2, r3
 80017f8:	0013      	movs	r3, r2
 80017fa:	43da      	mvns	r2, r3
 80017fc:	693b      	ldr	r3, [r7, #16]
 80017fe:	4013      	ands	r3, r2
 8001800:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	691a      	ldr	r2, [r3, #16]
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	2107      	movs	r1, #7
 800180a:	400b      	ands	r3, r1
 800180c:	009b      	lsls	r3, r3, #2
 800180e:	409a      	lsls	r2, r3
 8001810:	0013      	movs	r3, r2
 8001812:	693a      	ldr	r2, [r7, #16]
 8001814:	4313      	orrs	r3, r2
 8001816:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	08da      	lsrs	r2, r3, #3
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	3208      	adds	r2, #8
 8001820:	0092      	lsls	r2, r2, #2
 8001822:	6939      	ldr	r1, [r7, #16]
 8001824:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	005b      	lsls	r3, r3, #1
 8001830:	2203      	movs	r2, #3
 8001832:	409a      	lsls	r2, r3
 8001834:	0013      	movs	r3, r2
 8001836:	43da      	mvns	r2, r3
 8001838:	693b      	ldr	r3, [r7, #16]
 800183a:	4013      	ands	r3, r2
 800183c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	2203      	movs	r2, #3
 8001844:	401a      	ands	r2, r3
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	005b      	lsls	r3, r3, #1
 800184a:	409a      	lsls	r2, r3
 800184c:	0013      	movs	r3, r2
 800184e:	693a      	ldr	r2, [r7, #16]
 8001850:	4313      	orrs	r3, r2
 8001852:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	693a      	ldr	r2, [r7, #16]
 8001858:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	685a      	ldr	r2, [r3, #4]
 800185e:	2380      	movs	r3, #128	; 0x80
 8001860:	055b      	lsls	r3, r3, #21
 8001862:	4013      	ands	r3, r2
 8001864:	d100      	bne.n	8001868 <HAL_GPIO_Init+0x174>
 8001866:	e09a      	b.n	800199e <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001868:	4b54      	ldr	r3, [pc, #336]	; (80019bc <HAL_GPIO_Init+0x2c8>)
 800186a:	699a      	ldr	r2, [r3, #24]
 800186c:	4b53      	ldr	r3, [pc, #332]	; (80019bc <HAL_GPIO_Init+0x2c8>)
 800186e:	2101      	movs	r1, #1
 8001870:	430a      	orrs	r2, r1
 8001872:	619a      	str	r2, [r3, #24]
 8001874:	4b51      	ldr	r3, [pc, #324]	; (80019bc <HAL_GPIO_Init+0x2c8>)
 8001876:	699b      	ldr	r3, [r3, #24]
 8001878:	2201      	movs	r2, #1
 800187a:	4013      	ands	r3, r2
 800187c:	60bb      	str	r3, [r7, #8]
 800187e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001880:	4a4f      	ldr	r2, [pc, #316]	; (80019c0 <HAL_GPIO_Init+0x2cc>)
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	089b      	lsrs	r3, r3, #2
 8001886:	3302      	adds	r3, #2
 8001888:	009b      	lsls	r3, r3, #2
 800188a:	589b      	ldr	r3, [r3, r2]
 800188c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	2203      	movs	r2, #3
 8001892:	4013      	ands	r3, r2
 8001894:	009b      	lsls	r3, r3, #2
 8001896:	220f      	movs	r2, #15
 8001898:	409a      	lsls	r2, r3
 800189a:	0013      	movs	r3, r2
 800189c:	43da      	mvns	r2, r3
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	4013      	ands	r3, r2
 80018a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80018a4:	687a      	ldr	r2, [r7, #4]
 80018a6:	2390      	movs	r3, #144	; 0x90
 80018a8:	05db      	lsls	r3, r3, #23
 80018aa:	429a      	cmp	r2, r3
 80018ac:	d013      	beq.n	80018d6 <HAL_GPIO_Init+0x1e2>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	4a44      	ldr	r2, [pc, #272]	; (80019c4 <HAL_GPIO_Init+0x2d0>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d00d      	beq.n	80018d2 <HAL_GPIO_Init+0x1de>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	4a43      	ldr	r2, [pc, #268]	; (80019c8 <HAL_GPIO_Init+0x2d4>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d007      	beq.n	80018ce <HAL_GPIO_Init+0x1da>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	4a42      	ldr	r2, [pc, #264]	; (80019cc <HAL_GPIO_Init+0x2d8>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d101      	bne.n	80018ca <HAL_GPIO_Init+0x1d6>
 80018c6:	2303      	movs	r3, #3
 80018c8:	e006      	b.n	80018d8 <HAL_GPIO_Init+0x1e4>
 80018ca:	2305      	movs	r3, #5
 80018cc:	e004      	b.n	80018d8 <HAL_GPIO_Init+0x1e4>
 80018ce:	2302      	movs	r3, #2
 80018d0:	e002      	b.n	80018d8 <HAL_GPIO_Init+0x1e4>
 80018d2:	2301      	movs	r3, #1
 80018d4:	e000      	b.n	80018d8 <HAL_GPIO_Init+0x1e4>
 80018d6:	2300      	movs	r3, #0
 80018d8:	697a      	ldr	r2, [r7, #20]
 80018da:	2103      	movs	r1, #3
 80018dc:	400a      	ands	r2, r1
 80018de:	0092      	lsls	r2, r2, #2
 80018e0:	4093      	lsls	r3, r2
 80018e2:	693a      	ldr	r2, [r7, #16]
 80018e4:	4313      	orrs	r3, r2
 80018e6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80018e8:	4935      	ldr	r1, [pc, #212]	; (80019c0 <HAL_GPIO_Init+0x2cc>)
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	089b      	lsrs	r3, r3, #2
 80018ee:	3302      	adds	r3, #2
 80018f0:	009b      	lsls	r3, r3, #2
 80018f2:	693a      	ldr	r2, [r7, #16]
 80018f4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80018f6:	4b36      	ldr	r3, [pc, #216]	; (80019d0 <HAL_GPIO_Init+0x2dc>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	43da      	mvns	r2, r3
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	4013      	ands	r3, r2
 8001904:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	685a      	ldr	r2, [r3, #4]
 800190a:	2380      	movs	r3, #128	; 0x80
 800190c:	025b      	lsls	r3, r3, #9
 800190e:	4013      	ands	r3, r2
 8001910:	d003      	beq.n	800191a <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8001912:	693a      	ldr	r2, [r7, #16]
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	4313      	orrs	r3, r2
 8001918:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800191a:	4b2d      	ldr	r3, [pc, #180]	; (80019d0 <HAL_GPIO_Init+0x2dc>)
 800191c:	693a      	ldr	r2, [r7, #16]
 800191e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001920:	4b2b      	ldr	r3, [pc, #172]	; (80019d0 <HAL_GPIO_Init+0x2dc>)
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	43da      	mvns	r2, r3
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	4013      	ands	r3, r2
 800192e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	685a      	ldr	r2, [r3, #4]
 8001934:	2380      	movs	r3, #128	; 0x80
 8001936:	029b      	lsls	r3, r3, #10
 8001938:	4013      	ands	r3, r2
 800193a:	d003      	beq.n	8001944 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 800193c:	693a      	ldr	r2, [r7, #16]
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	4313      	orrs	r3, r2
 8001942:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001944:	4b22      	ldr	r3, [pc, #136]	; (80019d0 <HAL_GPIO_Init+0x2dc>)
 8001946:	693a      	ldr	r2, [r7, #16]
 8001948:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800194a:	4b21      	ldr	r3, [pc, #132]	; (80019d0 <HAL_GPIO_Init+0x2dc>)
 800194c:	689b      	ldr	r3, [r3, #8]
 800194e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	43da      	mvns	r2, r3
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	4013      	ands	r3, r2
 8001958:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	685a      	ldr	r2, [r3, #4]
 800195e:	2380      	movs	r3, #128	; 0x80
 8001960:	035b      	lsls	r3, r3, #13
 8001962:	4013      	ands	r3, r2
 8001964:	d003      	beq.n	800196e <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8001966:	693a      	ldr	r2, [r7, #16]
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	4313      	orrs	r3, r2
 800196c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800196e:	4b18      	ldr	r3, [pc, #96]	; (80019d0 <HAL_GPIO_Init+0x2dc>)
 8001970:	693a      	ldr	r2, [r7, #16]
 8001972:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001974:	4b16      	ldr	r3, [pc, #88]	; (80019d0 <HAL_GPIO_Init+0x2dc>)
 8001976:	68db      	ldr	r3, [r3, #12]
 8001978:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	43da      	mvns	r2, r3
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	4013      	ands	r3, r2
 8001982:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	685a      	ldr	r2, [r3, #4]
 8001988:	2380      	movs	r3, #128	; 0x80
 800198a:	039b      	lsls	r3, r3, #14
 800198c:	4013      	ands	r3, r2
 800198e:	d003      	beq.n	8001998 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001990:	693a      	ldr	r2, [r7, #16]
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	4313      	orrs	r3, r2
 8001996:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001998:	4b0d      	ldr	r3, [pc, #52]	; (80019d0 <HAL_GPIO_Init+0x2dc>)
 800199a:	693a      	ldr	r2, [r7, #16]
 800199c:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	3301      	adds	r3, #1
 80019a2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	681a      	ldr	r2, [r3, #0]
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	40da      	lsrs	r2, r3
 80019ac:	1e13      	subs	r3, r2, #0
 80019ae:	d000      	beq.n	80019b2 <HAL_GPIO_Init+0x2be>
 80019b0:	e6a8      	b.n	8001704 <HAL_GPIO_Init+0x10>
  } 
}
 80019b2:	46c0      	nop			; (mov r8, r8)
 80019b4:	46bd      	mov	sp, r7
 80019b6:	b006      	add	sp, #24
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	46c0      	nop			; (mov r8, r8)
 80019bc:	40021000 	.word	0x40021000
 80019c0:	40010000 	.word	0x40010000
 80019c4:	48000400 	.word	0x48000400
 80019c8:	48000800 	.word	0x48000800
 80019cc:	48000c00 	.word	0x48000c00
 80019d0:	40010400 	.word	0x40010400

080019d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
 80019dc:	0008      	movs	r0, r1
 80019de:	0011      	movs	r1, r2
 80019e0:	1cbb      	adds	r3, r7, #2
 80019e2:	1c02      	adds	r2, r0, #0
 80019e4:	801a      	strh	r2, [r3, #0]
 80019e6:	1c7b      	adds	r3, r7, #1
 80019e8:	1c0a      	adds	r2, r1, #0
 80019ea:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80019ec:	1c7b      	adds	r3, r7, #1
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d004      	beq.n	80019fe <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80019f4:	1cbb      	adds	r3, r7, #2
 80019f6:	881a      	ldrh	r2, [r3, #0]
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80019fc:	e003      	b.n	8001a06 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80019fe:	1cbb      	adds	r3, r7, #2
 8001a00:	881a      	ldrh	r2, [r3, #0]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001a06:	46c0      	nop			; (mov r8, r8)
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	b002      	add	sp, #8
 8001a0c:	bd80      	pop	{r7, pc}

08001a0e <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001a0e:	b580      	push	{r7, lr}
 8001a10:	b084      	sub	sp, #16
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	6078      	str	r0, [r7, #4]
 8001a16:	000a      	movs	r2, r1
 8001a18:	1cbb      	adds	r3, r7, #2
 8001a1a:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	695b      	ldr	r3, [r3, #20]
 8001a20:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001a22:	1cbb      	adds	r3, r7, #2
 8001a24:	881b      	ldrh	r3, [r3, #0]
 8001a26:	68fa      	ldr	r2, [r7, #12]
 8001a28:	4013      	ands	r3, r2
 8001a2a:	041a      	lsls	r2, r3, #16
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	43db      	mvns	r3, r3
 8001a30:	1cb9      	adds	r1, r7, #2
 8001a32:	8809      	ldrh	r1, [r1, #0]
 8001a34:	400b      	ands	r3, r1
 8001a36:	431a      	orrs	r2, r3
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	619a      	str	r2, [r3, #24]
}
 8001a3c:	46c0      	nop			; (mov r8, r8)
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	b004      	add	sp, #16
 8001a42:	bd80      	pop	{r7, pc}

08001a44 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b082      	sub	sp, #8
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d101      	bne.n	8001a56 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	e082      	b.n	8001b5c <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2241      	movs	r2, #65	; 0x41
 8001a5a:	5c9b      	ldrb	r3, [r3, r2]
 8001a5c:	b2db      	uxtb	r3, r3
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d107      	bne.n	8001a72 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2240      	movs	r2, #64	; 0x40
 8001a66:	2100      	movs	r1, #0
 8001a68:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	0018      	movs	r0, r3
 8001a6e:	f7ff f8bd 	bl	8000bec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2241      	movs	r2, #65	; 0x41
 8001a76:	2124      	movs	r1, #36	; 0x24
 8001a78:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	681a      	ldr	r2, [r3, #0]
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	2101      	movs	r1, #1
 8001a86:	438a      	bics	r2, r1
 8001a88:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	685a      	ldr	r2, [r3, #4]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4934      	ldr	r1, [pc, #208]	; (8001b64 <HAL_I2C_Init+0x120>)
 8001a94:	400a      	ands	r2, r1
 8001a96:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	689a      	ldr	r2, [r3, #8]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4931      	ldr	r1, [pc, #196]	; (8001b68 <HAL_I2C_Init+0x124>)
 8001aa4:	400a      	ands	r2, r1
 8001aa6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	68db      	ldr	r3, [r3, #12]
 8001aac:	2b01      	cmp	r3, #1
 8001aae:	d108      	bne.n	8001ac2 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	689a      	ldr	r2, [r3, #8]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	2180      	movs	r1, #128	; 0x80
 8001aba:	0209      	lsls	r1, r1, #8
 8001abc:	430a      	orrs	r2, r1
 8001abe:	609a      	str	r2, [r3, #8]
 8001ac0:	e007      	b.n	8001ad2 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	689a      	ldr	r2, [r3, #8]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	2184      	movs	r1, #132	; 0x84
 8001acc:	0209      	lsls	r1, r1, #8
 8001ace:	430a      	orrs	r2, r1
 8001ad0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	68db      	ldr	r3, [r3, #12]
 8001ad6:	2b02      	cmp	r3, #2
 8001ad8:	d104      	bne.n	8001ae4 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	2280      	movs	r2, #128	; 0x80
 8001ae0:	0112      	lsls	r2, r2, #4
 8001ae2:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	685a      	ldr	r2, [r3, #4]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	491f      	ldr	r1, [pc, #124]	; (8001b6c <HAL_I2C_Init+0x128>)
 8001af0:	430a      	orrs	r2, r1
 8001af2:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	68da      	ldr	r2, [r3, #12]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	491a      	ldr	r1, [pc, #104]	; (8001b68 <HAL_I2C_Init+0x124>)
 8001b00:	400a      	ands	r2, r1
 8001b02:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	691a      	ldr	r2, [r3, #16]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	695b      	ldr	r3, [r3, #20]
 8001b0c:	431a      	orrs	r2, r3
 8001b0e:	0011      	movs	r1, r2
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	699b      	ldr	r3, [r3, #24]
 8001b14:	021a      	lsls	r2, r3, #8
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	430a      	orrs	r2, r1
 8001b1c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	69d9      	ldr	r1, [r3, #28]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6a1a      	ldr	r2, [r3, #32]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	430a      	orrs	r2, r1
 8001b2c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	2101      	movs	r1, #1
 8001b3a:	430a      	orrs	r2, r1
 8001b3c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2200      	movs	r2, #0
 8001b42:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2241      	movs	r2, #65	; 0x41
 8001b48:	2120      	movs	r1, #32
 8001b4a:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2200      	movs	r2, #0
 8001b50:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2242      	movs	r2, #66	; 0x42
 8001b56:	2100      	movs	r1, #0
 8001b58:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001b5a:	2300      	movs	r3, #0
}
 8001b5c:	0018      	movs	r0, r3
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	b002      	add	sp, #8
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	f0ffffff 	.word	0xf0ffffff
 8001b68:	ffff7fff 	.word	0xffff7fff
 8001b6c:	02008000 	.word	0x02008000

08001b70 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b70:	b590      	push	{r4, r7, lr}
 8001b72:	b089      	sub	sp, #36	; 0x24
 8001b74:	af02      	add	r7, sp, #8
 8001b76:	60f8      	str	r0, [r7, #12]
 8001b78:	000c      	movs	r4, r1
 8001b7a:	0010      	movs	r0, r2
 8001b7c:	0019      	movs	r1, r3
 8001b7e:	230a      	movs	r3, #10
 8001b80:	18fb      	adds	r3, r7, r3
 8001b82:	1c22      	adds	r2, r4, #0
 8001b84:	801a      	strh	r2, [r3, #0]
 8001b86:	2308      	movs	r3, #8
 8001b88:	18fb      	adds	r3, r7, r3
 8001b8a:	1c02      	adds	r2, r0, #0
 8001b8c:	801a      	strh	r2, [r3, #0]
 8001b8e:	1dbb      	adds	r3, r7, #6
 8001b90:	1c0a      	adds	r2, r1, #0
 8001b92:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	2241      	movs	r2, #65	; 0x41
 8001b98:	5c9b      	ldrb	r3, [r3, r2]
 8001b9a:	b2db      	uxtb	r3, r3
 8001b9c:	2b20      	cmp	r3, #32
 8001b9e:	d000      	beq.n	8001ba2 <HAL_I2C_Mem_Write+0x32>
 8001ba0:	e10c      	b.n	8001dbc <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d004      	beq.n	8001bb2 <HAL_I2C_Mem_Write+0x42>
 8001ba8:	232c      	movs	r3, #44	; 0x2c
 8001baa:	18fb      	adds	r3, r7, r3
 8001bac:	881b      	ldrh	r3, [r3, #0]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d105      	bne.n	8001bbe <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	2280      	movs	r2, #128	; 0x80
 8001bb6:	0092      	lsls	r2, r2, #2
 8001bb8:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e0ff      	b.n	8001dbe <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	2240      	movs	r2, #64	; 0x40
 8001bc2:	5c9b      	ldrb	r3, [r3, r2]
 8001bc4:	2b01      	cmp	r3, #1
 8001bc6:	d101      	bne.n	8001bcc <HAL_I2C_Mem_Write+0x5c>
 8001bc8:	2302      	movs	r3, #2
 8001bca:	e0f8      	b.n	8001dbe <HAL_I2C_Mem_Write+0x24e>
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	2240      	movs	r2, #64	; 0x40
 8001bd0:	2101      	movs	r1, #1
 8001bd2:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001bd4:	f7ff faa6 	bl	8001124 <HAL_GetTick>
 8001bd8:	0003      	movs	r3, r0
 8001bda:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001bdc:	2380      	movs	r3, #128	; 0x80
 8001bde:	0219      	lsls	r1, r3, #8
 8001be0:	68f8      	ldr	r0, [r7, #12]
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	9300      	str	r3, [sp, #0]
 8001be6:	2319      	movs	r3, #25
 8001be8:	2201      	movs	r2, #1
 8001bea:	f000 fa8f 	bl	800210c <I2C_WaitOnFlagUntilTimeout>
 8001bee:	1e03      	subs	r3, r0, #0
 8001bf0:	d001      	beq.n	8001bf6 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e0e3      	b.n	8001dbe <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	2241      	movs	r2, #65	; 0x41
 8001bfa:	2121      	movs	r1, #33	; 0x21
 8001bfc:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	2242      	movs	r2, #66	; 0x42
 8001c02:	2140      	movs	r1, #64	; 0x40
 8001c04:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	2200      	movs	r2, #0
 8001c0a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001c10:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	222c      	movs	r2, #44	; 0x2c
 8001c16:	18ba      	adds	r2, r7, r2
 8001c18:	8812      	ldrh	r2, [r2, #0]
 8001c1a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	2200      	movs	r2, #0
 8001c20:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001c22:	1dbb      	adds	r3, r7, #6
 8001c24:	881c      	ldrh	r4, [r3, #0]
 8001c26:	2308      	movs	r3, #8
 8001c28:	18fb      	adds	r3, r7, r3
 8001c2a:	881a      	ldrh	r2, [r3, #0]
 8001c2c:	230a      	movs	r3, #10
 8001c2e:	18fb      	adds	r3, r7, r3
 8001c30:	8819      	ldrh	r1, [r3, #0]
 8001c32:	68f8      	ldr	r0, [r7, #12]
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	9301      	str	r3, [sp, #4]
 8001c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c3a:	9300      	str	r3, [sp, #0]
 8001c3c:	0023      	movs	r3, r4
 8001c3e:	f000 f9df 	bl	8002000 <I2C_RequestMemoryWrite>
 8001c42:	1e03      	subs	r3, r0, #0
 8001c44:	d005      	beq.n	8001c52 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	2240      	movs	r2, #64	; 0x40
 8001c4a:	2100      	movs	r1, #0
 8001c4c:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e0b5      	b.n	8001dbe <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c56:	b29b      	uxth	r3, r3
 8001c58:	2bff      	cmp	r3, #255	; 0xff
 8001c5a:	d911      	bls.n	8001c80 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	22ff      	movs	r2, #255	; 0xff
 8001c60:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c66:	b2da      	uxtb	r2, r3
 8001c68:	2380      	movs	r3, #128	; 0x80
 8001c6a:	045c      	lsls	r4, r3, #17
 8001c6c:	230a      	movs	r3, #10
 8001c6e:	18fb      	adds	r3, r7, r3
 8001c70:	8819      	ldrh	r1, [r3, #0]
 8001c72:	68f8      	ldr	r0, [r7, #12]
 8001c74:	2300      	movs	r3, #0
 8001c76:	9300      	str	r3, [sp, #0]
 8001c78:	0023      	movs	r3, r4
 8001c7a:	f000 fb67 	bl	800234c <I2C_TransferConfig>
 8001c7e:	e012      	b.n	8001ca6 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c84:	b29a      	uxth	r2, r3
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c8e:	b2da      	uxtb	r2, r3
 8001c90:	2380      	movs	r3, #128	; 0x80
 8001c92:	049c      	lsls	r4, r3, #18
 8001c94:	230a      	movs	r3, #10
 8001c96:	18fb      	adds	r3, r7, r3
 8001c98:	8819      	ldrh	r1, [r3, #0]
 8001c9a:	68f8      	ldr	r0, [r7, #12]
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	9300      	str	r3, [sp, #0]
 8001ca0:	0023      	movs	r3, r4
 8001ca2:	f000 fb53 	bl	800234c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ca6:	697a      	ldr	r2, [r7, #20]
 8001ca8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	0018      	movs	r0, r3
 8001cae:	f000 fa6c 	bl	800218a <I2C_WaitOnTXISFlagUntilTimeout>
 8001cb2:	1e03      	subs	r3, r0, #0
 8001cb4:	d001      	beq.n	8001cba <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e081      	b.n	8001dbe <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cbe:	781a      	ldrb	r2, [r3, #0]
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cca:	1c5a      	adds	r2, r3, #1
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cd4:	b29b      	uxth	r3, r3
 8001cd6:	3b01      	subs	r3, #1
 8001cd8:	b29a      	uxth	r2, r3
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ce2:	3b01      	subs	r3, #1
 8001ce4:	b29a      	uxth	r2, r3
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cee:	b29b      	uxth	r3, r3
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d03a      	beq.n	8001d6a <HAL_I2C_Mem_Write+0x1fa>
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d136      	bne.n	8001d6a <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001cfc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001cfe:	68f8      	ldr	r0, [r7, #12]
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	9300      	str	r3, [sp, #0]
 8001d04:	0013      	movs	r3, r2
 8001d06:	2200      	movs	r2, #0
 8001d08:	2180      	movs	r1, #128	; 0x80
 8001d0a:	f000 f9ff 	bl	800210c <I2C_WaitOnFlagUntilTimeout>
 8001d0e:	1e03      	subs	r3, r0, #0
 8001d10:	d001      	beq.n	8001d16 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	e053      	b.n	8001dbe <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d1a:	b29b      	uxth	r3, r3
 8001d1c:	2bff      	cmp	r3, #255	; 0xff
 8001d1e:	d911      	bls.n	8001d44 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	22ff      	movs	r2, #255	; 0xff
 8001d24:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d2a:	b2da      	uxtb	r2, r3
 8001d2c:	2380      	movs	r3, #128	; 0x80
 8001d2e:	045c      	lsls	r4, r3, #17
 8001d30:	230a      	movs	r3, #10
 8001d32:	18fb      	adds	r3, r7, r3
 8001d34:	8819      	ldrh	r1, [r3, #0]
 8001d36:	68f8      	ldr	r0, [r7, #12]
 8001d38:	2300      	movs	r3, #0
 8001d3a:	9300      	str	r3, [sp, #0]
 8001d3c:	0023      	movs	r3, r4
 8001d3e:	f000 fb05 	bl	800234c <I2C_TransferConfig>
 8001d42:	e012      	b.n	8001d6a <HAL_I2C_Mem_Write+0x1fa>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d48:	b29a      	uxth	r2, r3
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d52:	b2da      	uxtb	r2, r3
 8001d54:	2380      	movs	r3, #128	; 0x80
 8001d56:	049c      	lsls	r4, r3, #18
 8001d58:	230a      	movs	r3, #10
 8001d5a:	18fb      	adds	r3, r7, r3
 8001d5c:	8819      	ldrh	r1, [r3, #0]
 8001d5e:	68f8      	ldr	r0, [r7, #12]
 8001d60:	2300      	movs	r3, #0
 8001d62:	9300      	str	r3, [sp, #0]
 8001d64:	0023      	movs	r3, r4
 8001d66:	f000 faf1 	bl	800234c <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d6e:	b29b      	uxth	r3, r3
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d198      	bne.n	8001ca6 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d74:	697a      	ldr	r2, [r7, #20]
 8001d76:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	0018      	movs	r0, r3
 8001d7c:	f000 fa44 	bl	8002208 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001d80:	1e03      	subs	r3, r0, #0
 8001d82:	d001      	beq.n	8001d88 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8001d84:	2301      	movs	r3, #1
 8001d86:	e01a      	b.n	8001dbe <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	2220      	movs	r2, #32
 8001d8e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	685a      	ldr	r2, [r3, #4]
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	490b      	ldr	r1, [pc, #44]	; (8001dc8 <HAL_I2C_Mem_Write+0x258>)
 8001d9c:	400a      	ands	r2, r1
 8001d9e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	2241      	movs	r2, #65	; 0x41
 8001da4:	2120      	movs	r1, #32
 8001da6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	2242      	movs	r2, #66	; 0x42
 8001dac:	2100      	movs	r1, #0
 8001dae:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	2240      	movs	r2, #64	; 0x40
 8001db4:	2100      	movs	r1, #0
 8001db6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001db8:	2300      	movs	r3, #0
 8001dba:	e000      	b.n	8001dbe <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8001dbc:	2302      	movs	r3, #2
  }
}
 8001dbe:	0018      	movs	r0, r3
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	b007      	add	sp, #28
 8001dc4:	bd90      	pop	{r4, r7, pc}
 8001dc6:	46c0      	nop			; (mov r8, r8)
 8001dc8:	fe00e800 	.word	0xfe00e800

08001dcc <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b08a      	sub	sp, #40	; 0x28
 8001dd0:	af02      	add	r7, sp, #8
 8001dd2:	60f8      	str	r0, [r7, #12]
 8001dd4:	607a      	str	r2, [r7, #4]
 8001dd6:	603b      	str	r3, [r7, #0]
 8001dd8:	230a      	movs	r3, #10
 8001dda:	18fb      	adds	r3, r7, r3
 8001ddc:	1c0a      	adds	r2, r1, #0
 8001dde:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8001de0:	2300      	movs	r3, #0
 8001de2:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	2241      	movs	r2, #65	; 0x41
 8001de8:	5c9b      	ldrb	r3, [r3, r2]
 8001dea:	b2db      	uxtb	r3, r3
 8001dec:	2b20      	cmp	r3, #32
 8001dee:	d000      	beq.n	8001df2 <HAL_I2C_IsDeviceReady+0x26>
 8001df0:	e0fe      	b.n	8001ff0 <HAL_I2C_IsDeviceReady+0x224>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	699a      	ldr	r2, [r3, #24]
 8001df8:	2380      	movs	r3, #128	; 0x80
 8001dfa:	021b      	lsls	r3, r3, #8
 8001dfc:	401a      	ands	r2, r3
 8001dfe:	2380      	movs	r3, #128	; 0x80
 8001e00:	021b      	lsls	r3, r3, #8
 8001e02:	429a      	cmp	r2, r3
 8001e04:	d101      	bne.n	8001e0a <HAL_I2C_IsDeviceReady+0x3e>
    {
      return HAL_BUSY;
 8001e06:	2302      	movs	r3, #2
 8001e08:	e0f3      	b.n	8001ff2 <HAL_I2C_IsDeviceReady+0x226>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	2240      	movs	r2, #64	; 0x40
 8001e0e:	5c9b      	ldrb	r3, [r3, r2]
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	d101      	bne.n	8001e18 <HAL_I2C_IsDeviceReady+0x4c>
 8001e14:	2302      	movs	r3, #2
 8001e16:	e0ec      	b.n	8001ff2 <HAL_I2C_IsDeviceReady+0x226>
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	2240      	movs	r2, #64	; 0x40
 8001e1c:	2101      	movs	r1, #1
 8001e1e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	2241      	movs	r2, #65	; 0x41
 8001e24:	2124      	movs	r1, #36	; 0x24
 8001e26:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	68db      	ldr	r3, [r3, #12]
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	d107      	bne.n	8001e46 <HAL_I2C_IsDeviceReady+0x7a>
 8001e36:	230a      	movs	r3, #10
 8001e38:	18fb      	adds	r3, r7, r3
 8001e3a:	881b      	ldrh	r3, [r3, #0]
 8001e3c:	059b      	lsls	r3, r3, #22
 8001e3e:	0d9b      	lsrs	r3, r3, #22
 8001e40:	4a6e      	ldr	r2, [pc, #440]	; (8001ffc <HAL_I2C_IsDeviceReady+0x230>)
 8001e42:	431a      	orrs	r2, r3
 8001e44:	e007      	b.n	8001e56 <HAL_I2C_IsDeviceReady+0x8a>
 8001e46:	230a      	movs	r3, #10
 8001e48:	18fb      	adds	r3, r7, r3
 8001e4a:	881b      	ldrh	r3, [r3, #0]
 8001e4c:	059b      	lsls	r3, r3, #22
 8001e4e:	0d9b      	lsrs	r3, r3, #22
 8001e50:	22a0      	movs	r2, #160	; 0xa0
 8001e52:	0192      	lsls	r2, r2, #6
 8001e54:	431a      	orrs	r2, r3
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	605a      	str	r2, [r3, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8001e5c:	f7ff f962 	bl	8001124 <HAL_GetTick>
 8001e60:	0003      	movs	r3, r0
 8001e62:	61bb      	str	r3, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	699b      	ldr	r3, [r3, #24]
 8001e6a:	2220      	movs	r2, #32
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	3b20      	subs	r3, #32
 8001e70:	425a      	negs	r2, r3
 8001e72:	4153      	adcs	r3, r2
 8001e74:	b2da      	uxtb	r2, r3
 8001e76:	231f      	movs	r3, #31
 8001e78:	18fb      	adds	r3, r7, r3
 8001e7a:	701a      	strb	r2, [r3, #0]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	699b      	ldr	r3, [r3, #24]
 8001e82:	2210      	movs	r2, #16
 8001e84:	4013      	ands	r3, r2
 8001e86:	3b10      	subs	r3, #16
 8001e88:	425a      	negs	r2, r3
 8001e8a:	4153      	adcs	r3, r2
 8001e8c:	b2da      	uxtb	r2, r3
 8001e8e:	231e      	movs	r3, #30
 8001e90:	18fb      	adds	r3, r7, r3
 8001e92:	701a      	strb	r2, [r3, #0]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001e94:	e035      	b.n	8001f02 <HAL_I2C_IsDeviceReady+0x136>
      {
        if (Timeout != HAL_MAX_DELAY)
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	3301      	adds	r3, #1
 8001e9a:	d01a      	beq.n	8001ed2 <HAL_I2C_IsDeviceReady+0x106>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001e9c:	f7ff f942 	bl	8001124 <HAL_GetTick>
 8001ea0:	0002      	movs	r2, r0
 8001ea2:	69bb      	ldr	r3, [r7, #24]
 8001ea4:	1ad3      	subs	r3, r2, r3
 8001ea6:	683a      	ldr	r2, [r7, #0]
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	d302      	bcc.n	8001eb2 <HAL_I2C_IsDeviceReady+0xe6>
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d10f      	bne.n	8001ed2 <HAL_I2C_IsDeviceReady+0x106>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	2241      	movs	r2, #65	; 0x41
 8001eb6:	2120      	movs	r1, #32
 8001eb8:	5499      	strb	r1, [r3, r2]

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ebe:	2220      	movs	r2, #32
 8001ec0:	431a      	orrs	r2, r3
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	2240      	movs	r2, #64	; 0x40
 8001eca:	2100      	movs	r1, #0
 8001ecc:	5499      	strb	r1, [r3, r2]

            return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e08f      	b.n	8001ff2 <HAL_I2C_IsDeviceReady+0x226>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	699b      	ldr	r3, [r3, #24]
 8001ed8:	2220      	movs	r2, #32
 8001eda:	4013      	ands	r3, r2
 8001edc:	3b20      	subs	r3, #32
 8001ede:	425a      	negs	r2, r3
 8001ee0:	4153      	adcs	r3, r2
 8001ee2:	b2da      	uxtb	r2, r3
 8001ee4:	231f      	movs	r3, #31
 8001ee6:	18fb      	adds	r3, r7, r3
 8001ee8:	701a      	strb	r2, [r3, #0]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	699b      	ldr	r3, [r3, #24]
 8001ef0:	2210      	movs	r2, #16
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	3b10      	subs	r3, #16
 8001ef6:	425a      	negs	r2, r3
 8001ef8:	4153      	adcs	r3, r2
 8001efa:	b2da      	uxtb	r2, r3
 8001efc:	231e      	movs	r3, #30
 8001efe:	18fb      	adds	r3, r7, r3
 8001f00:	701a      	strb	r2, [r3, #0]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001f02:	231f      	movs	r3, #31
 8001f04:	18fb      	adds	r3, r7, r3
 8001f06:	781b      	ldrb	r3, [r3, #0]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d104      	bne.n	8001f16 <HAL_I2C_IsDeviceReady+0x14a>
 8001f0c:	231e      	movs	r3, #30
 8001f0e:	18fb      	adds	r3, r7, r3
 8001f10:	781b      	ldrb	r3, [r3, #0]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d0bf      	beq.n	8001e96 <HAL_I2C_IsDeviceReady+0xca>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	699b      	ldr	r3, [r3, #24]
 8001f1c:	2210      	movs	r2, #16
 8001f1e:	4013      	ands	r3, r2
 8001f20:	2b10      	cmp	r3, #16
 8001f22:	d01a      	beq.n	8001f5a <HAL_I2C_IsDeviceReady+0x18e>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001f24:	683a      	ldr	r2, [r7, #0]
 8001f26:	68f8      	ldr	r0, [r7, #12]
 8001f28:	69bb      	ldr	r3, [r7, #24]
 8001f2a:	9300      	str	r3, [sp, #0]
 8001f2c:	0013      	movs	r3, r2
 8001f2e:	2200      	movs	r2, #0
 8001f30:	2120      	movs	r1, #32
 8001f32:	f000 f8eb 	bl	800210c <I2C_WaitOnFlagUntilTimeout>
 8001f36:	1e03      	subs	r3, r0, #0
 8001f38:	d001      	beq.n	8001f3e <HAL_I2C_IsDeviceReady+0x172>
        {
          return HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e059      	b.n	8001ff2 <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	2220      	movs	r2, #32
 8001f44:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	2241      	movs	r2, #65	; 0x41
 8001f4a:	2120      	movs	r1, #32
 8001f4c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	2240      	movs	r2, #64	; 0x40
 8001f52:	2100      	movs	r1, #0
 8001f54:	5499      	strb	r1, [r3, r2]

        return HAL_OK;
 8001f56:	2300      	movs	r3, #0
 8001f58:	e04b      	b.n	8001ff2 <HAL_I2C_IsDeviceReady+0x226>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001f5a:	683a      	ldr	r2, [r7, #0]
 8001f5c:	68f8      	ldr	r0, [r7, #12]
 8001f5e:	69bb      	ldr	r3, [r7, #24]
 8001f60:	9300      	str	r3, [sp, #0]
 8001f62:	0013      	movs	r3, r2
 8001f64:	2200      	movs	r2, #0
 8001f66:	2120      	movs	r1, #32
 8001f68:	f000 f8d0 	bl	800210c <I2C_WaitOnFlagUntilTimeout>
 8001f6c:	1e03      	subs	r3, r0, #0
 8001f6e:	d001      	beq.n	8001f74 <HAL_I2C_IsDeviceReady+0x1a8>
        {
          return HAL_ERROR;
 8001f70:	2301      	movs	r3, #1
 8001f72:	e03e      	b.n	8001ff2 <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	2210      	movs	r2, #16
 8001f7a:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	2220      	movs	r2, #32
 8001f82:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	687a      	ldr	r2, [r7, #4]
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	d119      	bne.n	8001fc0 <HAL_I2C_IsDeviceReady+0x1f4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	685a      	ldr	r2, [r3, #4]
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	2180      	movs	r1, #128	; 0x80
 8001f98:	01c9      	lsls	r1, r1, #7
 8001f9a:	430a      	orrs	r2, r1
 8001f9c:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001f9e:	683a      	ldr	r2, [r7, #0]
 8001fa0:	68f8      	ldr	r0, [r7, #12]
 8001fa2:	69bb      	ldr	r3, [r7, #24]
 8001fa4:	9300      	str	r3, [sp, #0]
 8001fa6:	0013      	movs	r3, r2
 8001fa8:	2200      	movs	r2, #0
 8001faa:	2120      	movs	r1, #32
 8001fac:	f000 f8ae 	bl	800210c <I2C_WaitOnFlagUntilTimeout>
 8001fb0:	1e03      	subs	r3, r0, #0
 8001fb2:	d001      	beq.n	8001fb8 <HAL_I2C_IsDeviceReady+0x1ec>
        {
          return HAL_ERROR;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	e01c      	b.n	8001ff2 <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	2220      	movs	r2, #32
 8001fbe:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	3301      	adds	r3, #1
 8001fc4:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	687a      	ldr	r2, [r7, #4]
 8001fca:	429a      	cmp	r2, r3
 8001fcc:	d900      	bls.n	8001fd0 <HAL_I2C_IsDeviceReady+0x204>
 8001fce:	e72e      	b.n	8001e2e <HAL_I2C_IsDeviceReady+0x62>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	2241      	movs	r2, #65	; 0x41
 8001fd4:	2120      	movs	r1, #32
 8001fd6:	5499      	strb	r1, [r3, r2]

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fdc:	2220      	movs	r2, #32
 8001fde:	431a      	orrs	r2, r3
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	2240      	movs	r2, #64	; 0x40
 8001fe8:	2100      	movs	r1, #0
 8001fea:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001fec:	2301      	movs	r3, #1
 8001fee:	e000      	b.n	8001ff2 <HAL_I2C_IsDeviceReady+0x226>
  }
  else
  {
    return HAL_BUSY;
 8001ff0:	2302      	movs	r3, #2
  }
}
 8001ff2:	0018      	movs	r0, r3
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	b008      	add	sp, #32
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	46c0      	nop			; (mov r8, r8)
 8001ffc:	02002000 	.word	0x02002000

08002000 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002000:	b5b0      	push	{r4, r5, r7, lr}
 8002002:	b086      	sub	sp, #24
 8002004:	af02      	add	r7, sp, #8
 8002006:	60f8      	str	r0, [r7, #12]
 8002008:	000c      	movs	r4, r1
 800200a:	0010      	movs	r0, r2
 800200c:	0019      	movs	r1, r3
 800200e:	250a      	movs	r5, #10
 8002010:	197b      	adds	r3, r7, r5
 8002012:	1c22      	adds	r2, r4, #0
 8002014:	801a      	strh	r2, [r3, #0]
 8002016:	2308      	movs	r3, #8
 8002018:	18fb      	adds	r3, r7, r3
 800201a:	1c02      	adds	r2, r0, #0
 800201c:	801a      	strh	r2, [r3, #0]
 800201e:	1dbb      	adds	r3, r7, #6
 8002020:	1c0a      	adds	r2, r1, #0
 8002022:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002024:	1dbb      	adds	r3, r7, #6
 8002026:	881b      	ldrh	r3, [r3, #0]
 8002028:	b2da      	uxtb	r2, r3
 800202a:	2380      	movs	r3, #128	; 0x80
 800202c:	045c      	lsls	r4, r3, #17
 800202e:	197b      	adds	r3, r7, r5
 8002030:	8819      	ldrh	r1, [r3, #0]
 8002032:	68f8      	ldr	r0, [r7, #12]
 8002034:	4b23      	ldr	r3, [pc, #140]	; (80020c4 <I2C_RequestMemoryWrite+0xc4>)
 8002036:	9300      	str	r3, [sp, #0]
 8002038:	0023      	movs	r3, r4
 800203a:	f000 f987 	bl	800234c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800203e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002040:	6a39      	ldr	r1, [r7, #32]
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	0018      	movs	r0, r3
 8002046:	f000 f8a0 	bl	800218a <I2C_WaitOnTXISFlagUntilTimeout>
 800204a:	1e03      	subs	r3, r0, #0
 800204c:	d001      	beq.n	8002052 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e033      	b.n	80020ba <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002052:	1dbb      	adds	r3, r7, #6
 8002054:	881b      	ldrh	r3, [r3, #0]
 8002056:	2b01      	cmp	r3, #1
 8002058:	d107      	bne.n	800206a <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800205a:	2308      	movs	r3, #8
 800205c:	18fb      	adds	r3, r7, r3
 800205e:	881b      	ldrh	r3, [r3, #0]
 8002060:	b2da      	uxtb	r2, r3
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	629a      	str	r2, [r3, #40]	; 0x28
 8002068:	e019      	b.n	800209e <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800206a:	2308      	movs	r3, #8
 800206c:	18fb      	adds	r3, r7, r3
 800206e:	881b      	ldrh	r3, [r3, #0]
 8002070:	0a1b      	lsrs	r3, r3, #8
 8002072:	b29b      	uxth	r3, r3
 8002074:	b2da      	uxtb	r2, r3
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800207c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800207e:	6a39      	ldr	r1, [r7, #32]
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	0018      	movs	r0, r3
 8002084:	f000 f881 	bl	800218a <I2C_WaitOnTXISFlagUntilTimeout>
 8002088:	1e03      	subs	r3, r0, #0
 800208a:	d001      	beq.n	8002090 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 800208c:	2301      	movs	r3, #1
 800208e:	e014      	b.n	80020ba <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002090:	2308      	movs	r3, #8
 8002092:	18fb      	adds	r3, r7, r3
 8002094:	881b      	ldrh	r3, [r3, #0]
 8002096:	b2da      	uxtb	r2, r3
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800209e:	6a3a      	ldr	r2, [r7, #32]
 80020a0:	68f8      	ldr	r0, [r7, #12]
 80020a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a4:	9300      	str	r3, [sp, #0]
 80020a6:	0013      	movs	r3, r2
 80020a8:	2200      	movs	r2, #0
 80020aa:	2180      	movs	r1, #128	; 0x80
 80020ac:	f000 f82e 	bl	800210c <I2C_WaitOnFlagUntilTimeout>
 80020b0:	1e03      	subs	r3, r0, #0
 80020b2:	d001      	beq.n	80020b8 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 80020b4:	2301      	movs	r3, #1
 80020b6:	e000      	b.n	80020ba <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 80020b8:	2300      	movs	r3, #0
}
 80020ba:	0018      	movs	r0, r3
 80020bc:	46bd      	mov	sp, r7
 80020be:	b004      	add	sp, #16
 80020c0:	bdb0      	pop	{r4, r5, r7, pc}
 80020c2:	46c0      	nop			; (mov r8, r8)
 80020c4:	80002000 	.word	0x80002000

080020c8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b082      	sub	sp, #8
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	699b      	ldr	r3, [r3, #24]
 80020d6:	2202      	movs	r2, #2
 80020d8:	4013      	ands	r3, r2
 80020da:	2b02      	cmp	r3, #2
 80020dc:	d103      	bne.n	80020e6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	2200      	movs	r2, #0
 80020e4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	699b      	ldr	r3, [r3, #24]
 80020ec:	2201      	movs	r2, #1
 80020ee:	4013      	ands	r3, r2
 80020f0:	2b01      	cmp	r3, #1
 80020f2:	d007      	beq.n	8002104 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	699a      	ldr	r2, [r3, #24]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	2101      	movs	r1, #1
 8002100:	430a      	orrs	r2, r1
 8002102:	619a      	str	r2, [r3, #24]
  }
}
 8002104:	46c0      	nop			; (mov r8, r8)
 8002106:	46bd      	mov	sp, r7
 8002108:	b002      	add	sp, #8
 800210a:	bd80      	pop	{r7, pc}

0800210c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b084      	sub	sp, #16
 8002110:	af00      	add	r7, sp, #0
 8002112:	60f8      	str	r0, [r7, #12]
 8002114:	60b9      	str	r1, [r7, #8]
 8002116:	603b      	str	r3, [r7, #0]
 8002118:	1dfb      	adds	r3, r7, #7
 800211a:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800211c:	e021      	b.n	8002162 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	3301      	adds	r3, #1
 8002122:	d01e      	beq.n	8002162 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002124:	f7fe fffe 	bl	8001124 <HAL_GetTick>
 8002128:	0002      	movs	r2, r0
 800212a:	69bb      	ldr	r3, [r7, #24]
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	683a      	ldr	r2, [r7, #0]
 8002130:	429a      	cmp	r2, r3
 8002132:	d302      	bcc.n	800213a <I2C_WaitOnFlagUntilTimeout+0x2e>
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d113      	bne.n	8002162 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800213e:	2220      	movs	r2, #32
 8002140:	431a      	orrs	r2, r3
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	2241      	movs	r2, #65	; 0x41
 800214a:	2120      	movs	r1, #32
 800214c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	2242      	movs	r2, #66	; 0x42
 8002152:	2100      	movs	r1, #0
 8002154:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	2240      	movs	r2, #64	; 0x40
 800215a:	2100      	movs	r1, #0
 800215c:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	e00f      	b.n	8002182 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	699b      	ldr	r3, [r3, #24]
 8002168:	68ba      	ldr	r2, [r7, #8]
 800216a:	4013      	ands	r3, r2
 800216c:	68ba      	ldr	r2, [r7, #8]
 800216e:	1ad3      	subs	r3, r2, r3
 8002170:	425a      	negs	r2, r3
 8002172:	4153      	adcs	r3, r2
 8002174:	b2db      	uxtb	r3, r3
 8002176:	001a      	movs	r2, r3
 8002178:	1dfb      	adds	r3, r7, #7
 800217a:	781b      	ldrb	r3, [r3, #0]
 800217c:	429a      	cmp	r2, r3
 800217e:	d0ce      	beq.n	800211e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002180:	2300      	movs	r3, #0
}
 8002182:	0018      	movs	r0, r3
 8002184:	46bd      	mov	sp, r7
 8002186:	b004      	add	sp, #16
 8002188:	bd80      	pop	{r7, pc}

0800218a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800218a:	b580      	push	{r7, lr}
 800218c:	b084      	sub	sp, #16
 800218e:	af00      	add	r7, sp, #0
 8002190:	60f8      	str	r0, [r7, #12]
 8002192:	60b9      	str	r1, [r7, #8]
 8002194:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002196:	e02b      	b.n	80021f0 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002198:	687a      	ldr	r2, [r7, #4]
 800219a:	68b9      	ldr	r1, [r7, #8]
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	0018      	movs	r0, r3
 80021a0:	f000 f86e 	bl	8002280 <I2C_IsAcknowledgeFailed>
 80021a4:	1e03      	subs	r3, r0, #0
 80021a6:	d001      	beq.n	80021ac <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80021a8:	2301      	movs	r3, #1
 80021aa:	e029      	b.n	8002200 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	3301      	adds	r3, #1
 80021b0:	d01e      	beq.n	80021f0 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021b2:	f7fe ffb7 	bl	8001124 <HAL_GetTick>
 80021b6:	0002      	movs	r2, r0
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	1ad3      	subs	r3, r2, r3
 80021bc:	68ba      	ldr	r2, [r7, #8]
 80021be:	429a      	cmp	r2, r3
 80021c0:	d302      	bcc.n	80021c8 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80021c2:	68bb      	ldr	r3, [r7, #8]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d113      	bne.n	80021f0 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021cc:	2220      	movs	r2, #32
 80021ce:	431a      	orrs	r2, r3
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	2241      	movs	r2, #65	; 0x41
 80021d8:	2120      	movs	r1, #32
 80021da:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	2242      	movs	r2, #66	; 0x42
 80021e0:	2100      	movs	r1, #0
 80021e2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	2240      	movs	r2, #64	; 0x40
 80021e8:	2100      	movs	r1, #0
 80021ea:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	e007      	b.n	8002200 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	699b      	ldr	r3, [r3, #24]
 80021f6:	2202      	movs	r2, #2
 80021f8:	4013      	ands	r3, r2
 80021fa:	2b02      	cmp	r3, #2
 80021fc:	d1cc      	bne.n	8002198 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80021fe:	2300      	movs	r3, #0
}
 8002200:	0018      	movs	r0, r3
 8002202:	46bd      	mov	sp, r7
 8002204:	b004      	add	sp, #16
 8002206:	bd80      	pop	{r7, pc}

08002208 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b084      	sub	sp, #16
 800220c:	af00      	add	r7, sp, #0
 800220e:	60f8      	str	r0, [r7, #12]
 8002210:	60b9      	str	r1, [r7, #8]
 8002212:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002214:	e028      	b.n	8002268 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002216:	687a      	ldr	r2, [r7, #4]
 8002218:	68b9      	ldr	r1, [r7, #8]
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	0018      	movs	r0, r3
 800221e:	f000 f82f 	bl	8002280 <I2C_IsAcknowledgeFailed>
 8002222:	1e03      	subs	r3, r0, #0
 8002224:	d001      	beq.n	800222a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	e026      	b.n	8002278 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800222a:	f7fe ff7b 	bl	8001124 <HAL_GetTick>
 800222e:	0002      	movs	r2, r0
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	1ad3      	subs	r3, r2, r3
 8002234:	68ba      	ldr	r2, [r7, #8]
 8002236:	429a      	cmp	r2, r3
 8002238:	d302      	bcc.n	8002240 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d113      	bne.n	8002268 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002244:	2220      	movs	r2, #32
 8002246:	431a      	orrs	r2, r3
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	2241      	movs	r2, #65	; 0x41
 8002250:	2120      	movs	r1, #32
 8002252:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	2242      	movs	r2, #66	; 0x42
 8002258:	2100      	movs	r1, #0
 800225a:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	2240      	movs	r2, #64	; 0x40
 8002260:	2100      	movs	r1, #0
 8002262:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8002264:	2301      	movs	r3, #1
 8002266:	e007      	b.n	8002278 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	699b      	ldr	r3, [r3, #24]
 800226e:	2220      	movs	r2, #32
 8002270:	4013      	ands	r3, r2
 8002272:	2b20      	cmp	r3, #32
 8002274:	d1cf      	bne.n	8002216 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002276:	2300      	movs	r3, #0
}
 8002278:	0018      	movs	r0, r3
 800227a:	46bd      	mov	sp, r7
 800227c:	b004      	add	sp, #16
 800227e:	bd80      	pop	{r7, pc}

08002280 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b084      	sub	sp, #16
 8002284:	af00      	add	r7, sp, #0
 8002286:	60f8      	str	r0, [r7, #12]
 8002288:	60b9      	str	r1, [r7, #8]
 800228a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	699b      	ldr	r3, [r3, #24]
 8002292:	2210      	movs	r2, #16
 8002294:	4013      	ands	r3, r2
 8002296:	2b10      	cmp	r3, #16
 8002298:	d151      	bne.n	800233e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800229a:	e021      	b.n	80022e0 <I2C_IsAcknowledgeFailed+0x60>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	3301      	adds	r3, #1
 80022a0:	d01e      	beq.n	80022e0 <I2C_IsAcknowledgeFailed+0x60>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022a2:	f7fe ff3f 	bl	8001124 <HAL_GetTick>
 80022a6:	0002      	movs	r2, r0
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	1ad3      	subs	r3, r2, r3
 80022ac:	68ba      	ldr	r2, [r7, #8]
 80022ae:	429a      	cmp	r2, r3
 80022b0:	d302      	bcc.n	80022b8 <I2C_IsAcknowledgeFailed+0x38>
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d113      	bne.n	80022e0 <I2C_IsAcknowledgeFailed+0x60>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022bc:	2220      	movs	r2, #32
 80022be:	431a      	orrs	r2, r3
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	2241      	movs	r2, #65	; 0x41
 80022c8:	2120      	movs	r1, #32
 80022ca:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	2242      	movs	r2, #66	; 0x42
 80022d0:	2100      	movs	r1, #0
 80022d2:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	2240      	movs	r2, #64	; 0x40
 80022d8:	2100      	movs	r1, #0
 80022da:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80022dc:	2301      	movs	r3, #1
 80022de:	e02f      	b.n	8002340 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	699b      	ldr	r3, [r3, #24]
 80022e6:	2220      	movs	r2, #32
 80022e8:	4013      	ands	r3, r2
 80022ea:	2b20      	cmp	r3, #32
 80022ec:	d1d6      	bne.n	800229c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	2210      	movs	r2, #16
 80022f4:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	2220      	movs	r2, #32
 80022fc:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	0018      	movs	r0, r3
 8002302:	f7ff fee1 	bl	80020c8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	685a      	ldr	r2, [r3, #4]
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	490d      	ldr	r1, [pc, #52]	; (8002348 <I2C_IsAcknowledgeFailed+0xc8>)
 8002312:	400a      	ands	r2, r1
 8002314:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800231a:	2204      	movs	r2, #4
 800231c:	431a      	orrs	r2, r3
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	2241      	movs	r2, #65	; 0x41
 8002326:	2120      	movs	r1, #32
 8002328:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	2242      	movs	r2, #66	; 0x42
 800232e:	2100      	movs	r1, #0
 8002330:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	2240      	movs	r2, #64	; 0x40
 8002336:	2100      	movs	r1, #0
 8002338:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	e000      	b.n	8002340 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800233e:	2300      	movs	r3, #0
}
 8002340:	0018      	movs	r0, r3
 8002342:	46bd      	mov	sp, r7
 8002344:	b004      	add	sp, #16
 8002346:	bd80      	pop	{r7, pc}
 8002348:	fe00e800 	.word	0xfe00e800

0800234c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800234c:	b590      	push	{r4, r7, lr}
 800234e:	b085      	sub	sp, #20
 8002350:	af00      	add	r7, sp, #0
 8002352:	60f8      	str	r0, [r7, #12]
 8002354:	0008      	movs	r0, r1
 8002356:	0011      	movs	r1, r2
 8002358:	607b      	str	r3, [r7, #4]
 800235a:	240a      	movs	r4, #10
 800235c:	193b      	adds	r3, r7, r4
 800235e:	1c02      	adds	r2, r0, #0
 8002360:	801a      	strh	r2, [r3, #0]
 8002362:	2009      	movs	r0, #9
 8002364:	183b      	adds	r3, r7, r0
 8002366:	1c0a      	adds	r2, r1, #0
 8002368:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	6a3a      	ldr	r2, [r7, #32]
 8002372:	0d51      	lsrs	r1, r2, #21
 8002374:	2280      	movs	r2, #128	; 0x80
 8002376:	00d2      	lsls	r2, r2, #3
 8002378:	400a      	ands	r2, r1
 800237a:	490e      	ldr	r1, [pc, #56]	; (80023b4 <I2C_TransferConfig+0x68>)
 800237c:	430a      	orrs	r2, r1
 800237e:	43d2      	mvns	r2, r2
 8002380:	401a      	ands	r2, r3
 8002382:	0011      	movs	r1, r2
 8002384:	193b      	adds	r3, r7, r4
 8002386:	881b      	ldrh	r3, [r3, #0]
 8002388:	059b      	lsls	r3, r3, #22
 800238a:	0d9a      	lsrs	r2, r3, #22
 800238c:	183b      	adds	r3, r7, r0
 800238e:	781b      	ldrb	r3, [r3, #0]
 8002390:	0418      	lsls	r0, r3, #16
 8002392:	23ff      	movs	r3, #255	; 0xff
 8002394:	041b      	lsls	r3, r3, #16
 8002396:	4003      	ands	r3, r0
 8002398:	431a      	orrs	r2, r3
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	431a      	orrs	r2, r3
 800239e:	6a3b      	ldr	r3, [r7, #32]
 80023a0:	431a      	orrs	r2, r3
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	430a      	orrs	r2, r1
 80023a8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80023aa:	46c0      	nop			; (mov r8, r8)
 80023ac:	46bd      	mov	sp, r7
 80023ae:	b005      	add	sp, #20
 80023b0:	bd90      	pop	{r4, r7, pc}
 80023b2:	46c0      	nop			; (mov r8, r8)
 80023b4:	03ff63ff 	.word	0x03ff63ff

080023b8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b082      	sub	sp, #8
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
 80023c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2241      	movs	r2, #65	; 0x41
 80023c6:	5c9b      	ldrb	r3, [r3, r2]
 80023c8:	b2db      	uxtb	r3, r3
 80023ca:	2b20      	cmp	r3, #32
 80023cc:	d138      	bne.n	8002440 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2240      	movs	r2, #64	; 0x40
 80023d2:	5c9b      	ldrb	r3, [r3, r2]
 80023d4:	2b01      	cmp	r3, #1
 80023d6:	d101      	bne.n	80023dc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80023d8:	2302      	movs	r3, #2
 80023da:	e032      	b.n	8002442 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2240      	movs	r2, #64	; 0x40
 80023e0:	2101      	movs	r1, #1
 80023e2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2241      	movs	r2, #65	; 0x41
 80023e8:	2124      	movs	r1, #36	; 0x24
 80023ea:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	681a      	ldr	r2, [r3, #0]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	2101      	movs	r1, #1
 80023f8:	438a      	bics	r2, r1
 80023fa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4911      	ldr	r1, [pc, #68]	; (800244c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002408:	400a      	ands	r2, r1
 800240a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	6819      	ldr	r1, [r3, #0]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	683a      	ldr	r2, [r7, #0]
 8002418:	430a      	orrs	r2, r1
 800241a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	2101      	movs	r1, #1
 8002428:	430a      	orrs	r2, r1
 800242a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2241      	movs	r2, #65	; 0x41
 8002430:	2120      	movs	r1, #32
 8002432:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2240      	movs	r2, #64	; 0x40
 8002438:	2100      	movs	r1, #0
 800243a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800243c:	2300      	movs	r3, #0
 800243e:	e000      	b.n	8002442 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002440:	2302      	movs	r3, #2
  }
}
 8002442:	0018      	movs	r0, r3
 8002444:	46bd      	mov	sp, r7
 8002446:	b002      	add	sp, #8
 8002448:	bd80      	pop	{r7, pc}
 800244a:	46c0      	nop			; (mov r8, r8)
 800244c:	ffffefff 	.word	0xffffefff

08002450 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b084      	sub	sp, #16
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
 8002458:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2241      	movs	r2, #65	; 0x41
 800245e:	5c9b      	ldrb	r3, [r3, r2]
 8002460:	b2db      	uxtb	r3, r3
 8002462:	2b20      	cmp	r3, #32
 8002464:	d139      	bne.n	80024da <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2240      	movs	r2, #64	; 0x40
 800246a:	5c9b      	ldrb	r3, [r3, r2]
 800246c:	2b01      	cmp	r3, #1
 800246e:	d101      	bne.n	8002474 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002470:	2302      	movs	r3, #2
 8002472:	e033      	b.n	80024dc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2240      	movs	r2, #64	; 0x40
 8002478:	2101      	movs	r1, #1
 800247a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2241      	movs	r2, #65	; 0x41
 8002480:	2124      	movs	r1, #36	; 0x24
 8002482:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	2101      	movs	r1, #1
 8002490:	438a      	bics	r2, r1
 8002492:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	4a11      	ldr	r2, [pc, #68]	; (80024e4 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80024a0:	4013      	ands	r3, r2
 80024a2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	021b      	lsls	r3, r3, #8
 80024a8:	68fa      	ldr	r2, [r7, #12]
 80024aa:	4313      	orrs	r3, r2
 80024ac:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	68fa      	ldr	r2, [r7, #12]
 80024b4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	681a      	ldr	r2, [r3, #0]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	2101      	movs	r1, #1
 80024c2:	430a      	orrs	r2, r1
 80024c4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2241      	movs	r2, #65	; 0x41
 80024ca:	2120      	movs	r1, #32
 80024cc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2240      	movs	r2, #64	; 0x40
 80024d2:	2100      	movs	r1, #0
 80024d4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80024d6:	2300      	movs	r3, #0
 80024d8:	e000      	b.n	80024dc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80024da:	2302      	movs	r3, #2
  }
}
 80024dc:	0018      	movs	r0, r3
 80024de:	46bd      	mov	sp, r7
 80024e0:	b004      	add	sp, #16
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	fffff0ff 	.word	0xfffff0ff

080024e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b088      	sub	sp, #32
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d101      	bne.n	80024fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e303      	b.n	8002b02 <HAL_RCC_OscConfig+0x61a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	2201      	movs	r2, #1
 8002500:	4013      	ands	r3, r2
 8002502:	d100      	bne.n	8002506 <HAL_RCC_OscConfig+0x1e>
 8002504:	e08d      	b.n	8002622 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002506:	4bc4      	ldr	r3, [pc, #784]	; (8002818 <HAL_RCC_OscConfig+0x330>)
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	220c      	movs	r2, #12
 800250c:	4013      	ands	r3, r2
 800250e:	2b04      	cmp	r3, #4
 8002510:	d00e      	beq.n	8002530 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002512:	4bc1      	ldr	r3, [pc, #772]	; (8002818 <HAL_RCC_OscConfig+0x330>)
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	220c      	movs	r2, #12
 8002518:	4013      	ands	r3, r2
 800251a:	2b08      	cmp	r3, #8
 800251c:	d116      	bne.n	800254c <HAL_RCC_OscConfig+0x64>
 800251e:	4bbe      	ldr	r3, [pc, #760]	; (8002818 <HAL_RCC_OscConfig+0x330>)
 8002520:	685a      	ldr	r2, [r3, #4]
 8002522:	2380      	movs	r3, #128	; 0x80
 8002524:	025b      	lsls	r3, r3, #9
 8002526:	401a      	ands	r2, r3
 8002528:	2380      	movs	r3, #128	; 0x80
 800252a:	025b      	lsls	r3, r3, #9
 800252c:	429a      	cmp	r2, r3
 800252e:	d10d      	bne.n	800254c <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002530:	4bb9      	ldr	r3, [pc, #740]	; (8002818 <HAL_RCC_OscConfig+0x330>)
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	2380      	movs	r3, #128	; 0x80
 8002536:	029b      	lsls	r3, r3, #10
 8002538:	4013      	ands	r3, r2
 800253a:	d100      	bne.n	800253e <HAL_RCC_OscConfig+0x56>
 800253c:	e070      	b.n	8002620 <HAL_RCC_OscConfig+0x138>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d000      	beq.n	8002548 <HAL_RCC_OscConfig+0x60>
 8002546:	e06b      	b.n	8002620 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8002548:	2301      	movs	r3, #1
 800254a:	e2da      	b.n	8002b02 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	2b01      	cmp	r3, #1
 8002552:	d107      	bne.n	8002564 <HAL_RCC_OscConfig+0x7c>
 8002554:	4bb0      	ldr	r3, [pc, #704]	; (8002818 <HAL_RCC_OscConfig+0x330>)
 8002556:	681a      	ldr	r2, [r3, #0]
 8002558:	4baf      	ldr	r3, [pc, #700]	; (8002818 <HAL_RCC_OscConfig+0x330>)
 800255a:	2180      	movs	r1, #128	; 0x80
 800255c:	0249      	lsls	r1, r1, #9
 800255e:	430a      	orrs	r2, r1
 8002560:	601a      	str	r2, [r3, #0]
 8002562:	e02f      	b.n	80025c4 <HAL_RCC_OscConfig+0xdc>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d10c      	bne.n	8002586 <HAL_RCC_OscConfig+0x9e>
 800256c:	4baa      	ldr	r3, [pc, #680]	; (8002818 <HAL_RCC_OscConfig+0x330>)
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	4ba9      	ldr	r3, [pc, #676]	; (8002818 <HAL_RCC_OscConfig+0x330>)
 8002572:	49aa      	ldr	r1, [pc, #680]	; (800281c <HAL_RCC_OscConfig+0x334>)
 8002574:	400a      	ands	r2, r1
 8002576:	601a      	str	r2, [r3, #0]
 8002578:	4ba7      	ldr	r3, [pc, #668]	; (8002818 <HAL_RCC_OscConfig+0x330>)
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	4ba6      	ldr	r3, [pc, #664]	; (8002818 <HAL_RCC_OscConfig+0x330>)
 800257e:	49a8      	ldr	r1, [pc, #672]	; (8002820 <HAL_RCC_OscConfig+0x338>)
 8002580:	400a      	ands	r2, r1
 8002582:	601a      	str	r2, [r3, #0]
 8002584:	e01e      	b.n	80025c4 <HAL_RCC_OscConfig+0xdc>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	2b05      	cmp	r3, #5
 800258c:	d10e      	bne.n	80025ac <HAL_RCC_OscConfig+0xc4>
 800258e:	4ba2      	ldr	r3, [pc, #648]	; (8002818 <HAL_RCC_OscConfig+0x330>)
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	4ba1      	ldr	r3, [pc, #644]	; (8002818 <HAL_RCC_OscConfig+0x330>)
 8002594:	2180      	movs	r1, #128	; 0x80
 8002596:	02c9      	lsls	r1, r1, #11
 8002598:	430a      	orrs	r2, r1
 800259a:	601a      	str	r2, [r3, #0]
 800259c:	4b9e      	ldr	r3, [pc, #632]	; (8002818 <HAL_RCC_OscConfig+0x330>)
 800259e:	681a      	ldr	r2, [r3, #0]
 80025a0:	4b9d      	ldr	r3, [pc, #628]	; (8002818 <HAL_RCC_OscConfig+0x330>)
 80025a2:	2180      	movs	r1, #128	; 0x80
 80025a4:	0249      	lsls	r1, r1, #9
 80025a6:	430a      	orrs	r2, r1
 80025a8:	601a      	str	r2, [r3, #0]
 80025aa:	e00b      	b.n	80025c4 <HAL_RCC_OscConfig+0xdc>
 80025ac:	4b9a      	ldr	r3, [pc, #616]	; (8002818 <HAL_RCC_OscConfig+0x330>)
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	4b99      	ldr	r3, [pc, #612]	; (8002818 <HAL_RCC_OscConfig+0x330>)
 80025b2:	499a      	ldr	r1, [pc, #616]	; (800281c <HAL_RCC_OscConfig+0x334>)
 80025b4:	400a      	ands	r2, r1
 80025b6:	601a      	str	r2, [r3, #0]
 80025b8:	4b97      	ldr	r3, [pc, #604]	; (8002818 <HAL_RCC_OscConfig+0x330>)
 80025ba:	681a      	ldr	r2, [r3, #0]
 80025bc:	4b96      	ldr	r3, [pc, #600]	; (8002818 <HAL_RCC_OscConfig+0x330>)
 80025be:	4998      	ldr	r1, [pc, #608]	; (8002820 <HAL_RCC_OscConfig+0x338>)
 80025c0:	400a      	ands	r2, r1
 80025c2:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d014      	beq.n	80025f6 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025cc:	f7fe fdaa 	bl	8001124 <HAL_GetTick>
 80025d0:	0003      	movs	r3, r0
 80025d2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025d4:	e008      	b.n	80025e8 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025d6:	f7fe fda5 	bl	8001124 <HAL_GetTick>
 80025da:	0002      	movs	r2, r0
 80025dc:	69bb      	ldr	r3, [r7, #24]
 80025de:	1ad3      	subs	r3, r2, r3
 80025e0:	2b64      	cmp	r3, #100	; 0x64
 80025e2:	d901      	bls.n	80025e8 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 80025e4:	2303      	movs	r3, #3
 80025e6:	e28c      	b.n	8002b02 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025e8:	4b8b      	ldr	r3, [pc, #556]	; (8002818 <HAL_RCC_OscConfig+0x330>)
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	2380      	movs	r3, #128	; 0x80
 80025ee:	029b      	lsls	r3, r3, #10
 80025f0:	4013      	ands	r3, r2
 80025f2:	d0f0      	beq.n	80025d6 <HAL_RCC_OscConfig+0xee>
 80025f4:	e015      	b.n	8002622 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025f6:	f7fe fd95 	bl	8001124 <HAL_GetTick>
 80025fa:	0003      	movs	r3, r0
 80025fc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025fe:	e008      	b.n	8002612 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002600:	f7fe fd90 	bl	8001124 <HAL_GetTick>
 8002604:	0002      	movs	r2, r0
 8002606:	69bb      	ldr	r3, [r7, #24]
 8002608:	1ad3      	subs	r3, r2, r3
 800260a:	2b64      	cmp	r3, #100	; 0x64
 800260c:	d901      	bls.n	8002612 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800260e:	2303      	movs	r3, #3
 8002610:	e277      	b.n	8002b02 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002612:	4b81      	ldr	r3, [pc, #516]	; (8002818 <HAL_RCC_OscConfig+0x330>)
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	2380      	movs	r3, #128	; 0x80
 8002618:	029b      	lsls	r3, r3, #10
 800261a:	4013      	ands	r3, r2
 800261c:	d1f0      	bne.n	8002600 <HAL_RCC_OscConfig+0x118>
 800261e:	e000      	b.n	8002622 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002620:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	2202      	movs	r2, #2
 8002628:	4013      	ands	r3, r2
 800262a:	d100      	bne.n	800262e <HAL_RCC_OscConfig+0x146>
 800262c:	e069      	b.n	8002702 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800262e:	4b7a      	ldr	r3, [pc, #488]	; (8002818 <HAL_RCC_OscConfig+0x330>)
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	220c      	movs	r2, #12
 8002634:	4013      	ands	r3, r2
 8002636:	d00b      	beq.n	8002650 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002638:	4b77      	ldr	r3, [pc, #476]	; (8002818 <HAL_RCC_OscConfig+0x330>)
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	220c      	movs	r2, #12
 800263e:	4013      	ands	r3, r2
 8002640:	2b08      	cmp	r3, #8
 8002642:	d11c      	bne.n	800267e <HAL_RCC_OscConfig+0x196>
 8002644:	4b74      	ldr	r3, [pc, #464]	; (8002818 <HAL_RCC_OscConfig+0x330>)
 8002646:	685a      	ldr	r2, [r3, #4]
 8002648:	2380      	movs	r3, #128	; 0x80
 800264a:	025b      	lsls	r3, r3, #9
 800264c:	4013      	ands	r3, r2
 800264e:	d116      	bne.n	800267e <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002650:	4b71      	ldr	r3, [pc, #452]	; (8002818 <HAL_RCC_OscConfig+0x330>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	2202      	movs	r2, #2
 8002656:	4013      	ands	r3, r2
 8002658:	d005      	beq.n	8002666 <HAL_RCC_OscConfig+0x17e>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	68db      	ldr	r3, [r3, #12]
 800265e:	2b01      	cmp	r3, #1
 8002660:	d001      	beq.n	8002666 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	e24d      	b.n	8002b02 <HAL_RCC_OscConfig+0x61a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002666:	4b6c      	ldr	r3, [pc, #432]	; (8002818 <HAL_RCC_OscConfig+0x330>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	22f8      	movs	r2, #248	; 0xf8
 800266c:	4393      	bics	r3, r2
 800266e:	0019      	movs	r1, r3
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	691b      	ldr	r3, [r3, #16]
 8002674:	00da      	lsls	r2, r3, #3
 8002676:	4b68      	ldr	r3, [pc, #416]	; (8002818 <HAL_RCC_OscConfig+0x330>)
 8002678:	430a      	orrs	r2, r1
 800267a:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800267c:	e041      	b.n	8002702 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	68db      	ldr	r3, [r3, #12]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d024      	beq.n	80026d0 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002686:	4b64      	ldr	r3, [pc, #400]	; (8002818 <HAL_RCC_OscConfig+0x330>)
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	4b63      	ldr	r3, [pc, #396]	; (8002818 <HAL_RCC_OscConfig+0x330>)
 800268c:	2101      	movs	r1, #1
 800268e:	430a      	orrs	r2, r1
 8002690:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002692:	f7fe fd47 	bl	8001124 <HAL_GetTick>
 8002696:	0003      	movs	r3, r0
 8002698:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800269a:	e008      	b.n	80026ae <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800269c:	f7fe fd42 	bl	8001124 <HAL_GetTick>
 80026a0:	0002      	movs	r2, r0
 80026a2:	69bb      	ldr	r3, [r7, #24]
 80026a4:	1ad3      	subs	r3, r2, r3
 80026a6:	2b02      	cmp	r3, #2
 80026a8:	d901      	bls.n	80026ae <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 80026aa:	2303      	movs	r3, #3
 80026ac:	e229      	b.n	8002b02 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026ae:	4b5a      	ldr	r3, [pc, #360]	; (8002818 <HAL_RCC_OscConfig+0x330>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	2202      	movs	r2, #2
 80026b4:	4013      	ands	r3, r2
 80026b6:	d0f1      	beq.n	800269c <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026b8:	4b57      	ldr	r3, [pc, #348]	; (8002818 <HAL_RCC_OscConfig+0x330>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	22f8      	movs	r2, #248	; 0xf8
 80026be:	4393      	bics	r3, r2
 80026c0:	0019      	movs	r1, r3
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	691b      	ldr	r3, [r3, #16]
 80026c6:	00da      	lsls	r2, r3, #3
 80026c8:	4b53      	ldr	r3, [pc, #332]	; (8002818 <HAL_RCC_OscConfig+0x330>)
 80026ca:	430a      	orrs	r2, r1
 80026cc:	601a      	str	r2, [r3, #0]
 80026ce:	e018      	b.n	8002702 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026d0:	4b51      	ldr	r3, [pc, #324]	; (8002818 <HAL_RCC_OscConfig+0x330>)
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	4b50      	ldr	r3, [pc, #320]	; (8002818 <HAL_RCC_OscConfig+0x330>)
 80026d6:	2101      	movs	r1, #1
 80026d8:	438a      	bics	r2, r1
 80026da:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026dc:	f7fe fd22 	bl	8001124 <HAL_GetTick>
 80026e0:	0003      	movs	r3, r0
 80026e2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026e4:	e008      	b.n	80026f8 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026e6:	f7fe fd1d 	bl	8001124 <HAL_GetTick>
 80026ea:	0002      	movs	r2, r0
 80026ec:	69bb      	ldr	r3, [r7, #24]
 80026ee:	1ad3      	subs	r3, r2, r3
 80026f0:	2b02      	cmp	r3, #2
 80026f2:	d901      	bls.n	80026f8 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 80026f4:	2303      	movs	r3, #3
 80026f6:	e204      	b.n	8002b02 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026f8:	4b47      	ldr	r3, [pc, #284]	; (8002818 <HAL_RCC_OscConfig+0x330>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	2202      	movs	r2, #2
 80026fe:	4013      	ands	r3, r2
 8002700:	d1f1      	bne.n	80026e6 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	2208      	movs	r2, #8
 8002708:	4013      	ands	r3, r2
 800270a:	d036      	beq.n	800277a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	69db      	ldr	r3, [r3, #28]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d019      	beq.n	8002748 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002714:	4b40      	ldr	r3, [pc, #256]	; (8002818 <HAL_RCC_OscConfig+0x330>)
 8002716:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002718:	4b3f      	ldr	r3, [pc, #252]	; (8002818 <HAL_RCC_OscConfig+0x330>)
 800271a:	2101      	movs	r1, #1
 800271c:	430a      	orrs	r2, r1
 800271e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002720:	f7fe fd00 	bl	8001124 <HAL_GetTick>
 8002724:	0003      	movs	r3, r0
 8002726:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002728:	e008      	b.n	800273c <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800272a:	f7fe fcfb 	bl	8001124 <HAL_GetTick>
 800272e:	0002      	movs	r2, r0
 8002730:	69bb      	ldr	r3, [r7, #24]
 8002732:	1ad3      	subs	r3, r2, r3
 8002734:	2b02      	cmp	r3, #2
 8002736:	d901      	bls.n	800273c <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8002738:	2303      	movs	r3, #3
 800273a:	e1e2      	b.n	8002b02 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800273c:	4b36      	ldr	r3, [pc, #216]	; (8002818 <HAL_RCC_OscConfig+0x330>)
 800273e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002740:	2202      	movs	r2, #2
 8002742:	4013      	ands	r3, r2
 8002744:	d0f1      	beq.n	800272a <HAL_RCC_OscConfig+0x242>
 8002746:	e018      	b.n	800277a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002748:	4b33      	ldr	r3, [pc, #204]	; (8002818 <HAL_RCC_OscConfig+0x330>)
 800274a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800274c:	4b32      	ldr	r3, [pc, #200]	; (8002818 <HAL_RCC_OscConfig+0x330>)
 800274e:	2101      	movs	r1, #1
 8002750:	438a      	bics	r2, r1
 8002752:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002754:	f7fe fce6 	bl	8001124 <HAL_GetTick>
 8002758:	0003      	movs	r3, r0
 800275a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800275c:	e008      	b.n	8002770 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800275e:	f7fe fce1 	bl	8001124 <HAL_GetTick>
 8002762:	0002      	movs	r2, r0
 8002764:	69bb      	ldr	r3, [r7, #24]
 8002766:	1ad3      	subs	r3, r2, r3
 8002768:	2b02      	cmp	r3, #2
 800276a:	d901      	bls.n	8002770 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 800276c:	2303      	movs	r3, #3
 800276e:	e1c8      	b.n	8002b02 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002770:	4b29      	ldr	r3, [pc, #164]	; (8002818 <HAL_RCC_OscConfig+0x330>)
 8002772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002774:	2202      	movs	r2, #2
 8002776:	4013      	ands	r3, r2
 8002778:	d1f1      	bne.n	800275e <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	2204      	movs	r2, #4
 8002780:	4013      	ands	r3, r2
 8002782:	d100      	bne.n	8002786 <HAL_RCC_OscConfig+0x29e>
 8002784:	e0b6      	b.n	80028f4 <HAL_RCC_OscConfig+0x40c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002786:	231f      	movs	r3, #31
 8002788:	18fb      	adds	r3, r7, r3
 800278a:	2200      	movs	r2, #0
 800278c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800278e:	4b22      	ldr	r3, [pc, #136]	; (8002818 <HAL_RCC_OscConfig+0x330>)
 8002790:	69da      	ldr	r2, [r3, #28]
 8002792:	2380      	movs	r3, #128	; 0x80
 8002794:	055b      	lsls	r3, r3, #21
 8002796:	4013      	ands	r3, r2
 8002798:	d111      	bne.n	80027be <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800279a:	4b1f      	ldr	r3, [pc, #124]	; (8002818 <HAL_RCC_OscConfig+0x330>)
 800279c:	69da      	ldr	r2, [r3, #28]
 800279e:	4b1e      	ldr	r3, [pc, #120]	; (8002818 <HAL_RCC_OscConfig+0x330>)
 80027a0:	2180      	movs	r1, #128	; 0x80
 80027a2:	0549      	lsls	r1, r1, #21
 80027a4:	430a      	orrs	r2, r1
 80027a6:	61da      	str	r2, [r3, #28]
 80027a8:	4b1b      	ldr	r3, [pc, #108]	; (8002818 <HAL_RCC_OscConfig+0x330>)
 80027aa:	69da      	ldr	r2, [r3, #28]
 80027ac:	2380      	movs	r3, #128	; 0x80
 80027ae:	055b      	lsls	r3, r3, #21
 80027b0:	4013      	ands	r3, r2
 80027b2:	60fb      	str	r3, [r7, #12]
 80027b4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80027b6:	231f      	movs	r3, #31
 80027b8:	18fb      	adds	r3, r7, r3
 80027ba:	2201      	movs	r2, #1
 80027bc:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027be:	4b19      	ldr	r3, [pc, #100]	; (8002824 <HAL_RCC_OscConfig+0x33c>)
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	2380      	movs	r3, #128	; 0x80
 80027c4:	005b      	lsls	r3, r3, #1
 80027c6:	4013      	ands	r3, r2
 80027c8:	d11a      	bne.n	8002800 <HAL_RCC_OscConfig+0x318>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027ca:	4b16      	ldr	r3, [pc, #88]	; (8002824 <HAL_RCC_OscConfig+0x33c>)
 80027cc:	681a      	ldr	r2, [r3, #0]
 80027ce:	4b15      	ldr	r3, [pc, #84]	; (8002824 <HAL_RCC_OscConfig+0x33c>)
 80027d0:	2180      	movs	r1, #128	; 0x80
 80027d2:	0049      	lsls	r1, r1, #1
 80027d4:	430a      	orrs	r2, r1
 80027d6:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027d8:	f7fe fca4 	bl	8001124 <HAL_GetTick>
 80027dc:	0003      	movs	r3, r0
 80027de:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027e0:	e008      	b.n	80027f4 <HAL_RCC_OscConfig+0x30c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027e2:	f7fe fc9f 	bl	8001124 <HAL_GetTick>
 80027e6:	0002      	movs	r2, r0
 80027e8:	69bb      	ldr	r3, [r7, #24]
 80027ea:	1ad3      	subs	r3, r2, r3
 80027ec:	2b64      	cmp	r3, #100	; 0x64
 80027ee:	d901      	bls.n	80027f4 <HAL_RCC_OscConfig+0x30c>
        {
          return HAL_TIMEOUT;
 80027f0:	2303      	movs	r3, #3
 80027f2:	e186      	b.n	8002b02 <HAL_RCC_OscConfig+0x61a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027f4:	4b0b      	ldr	r3, [pc, #44]	; (8002824 <HAL_RCC_OscConfig+0x33c>)
 80027f6:	681a      	ldr	r2, [r3, #0]
 80027f8:	2380      	movs	r3, #128	; 0x80
 80027fa:	005b      	lsls	r3, r3, #1
 80027fc:	4013      	ands	r3, r2
 80027fe:	d0f0      	beq.n	80027e2 <HAL_RCC_OscConfig+0x2fa>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	2b01      	cmp	r3, #1
 8002806:	d10f      	bne.n	8002828 <HAL_RCC_OscConfig+0x340>
 8002808:	4b03      	ldr	r3, [pc, #12]	; (8002818 <HAL_RCC_OscConfig+0x330>)
 800280a:	6a1a      	ldr	r2, [r3, #32]
 800280c:	4b02      	ldr	r3, [pc, #8]	; (8002818 <HAL_RCC_OscConfig+0x330>)
 800280e:	2101      	movs	r1, #1
 8002810:	430a      	orrs	r2, r1
 8002812:	621a      	str	r2, [r3, #32]
 8002814:	e036      	b.n	8002884 <HAL_RCC_OscConfig+0x39c>
 8002816:	46c0      	nop			; (mov r8, r8)
 8002818:	40021000 	.word	0x40021000
 800281c:	fffeffff 	.word	0xfffeffff
 8002820:	fffbffff 	.word	0xfffbffff
 8002824:	40007000 	.word	0x40007000
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d10c      	bne.n	800284a <HAL_RCC_OscConfig+0x362>
 8002830:	4bb6      	ldr	r3, [pc, #728]	; (8002b0c <HAL_RCC_OscConfig+0x624>)
 8002832:	6a1a      	ldr	r2, [r3, #32]
 8002834:	4bb5      	ldr	r3, [pc, #724]	; (8002b0c <HAL_RCC_OscConfig+0x624>)
 8002836:	2101      	movs	r1, #1
 8002838:	438a      	bics	r2, r1
 800283a:	621a      	str	r2, [r3, #32]
 800283c:	4bb3      	ldr	r3, [pc, #716]	; (8002b0c <HAL_RCC_OscConfig+0x624>)
 800283e:	6a1a      	ldr	r2, [r3, #32]
 8002840:	4bb2      	ldr	r3, [pc, #712]	; (8002b0c <HAL_RCC_OscConfig+0x624>)
 8002842:	2104      	movs	r1, #4
 8002844:	438a      	bics	r2, r1
 8002846:	621a      	str	r2, [r3, #32]
 8002848:	e01c      	b.n	8002884 <HAL_RCC_OscConfig+0x39c>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	2b05      	cmp	r3, #5
 8002850:	d10c      	bne.n	800286c <HAL_RCC_OscConfig+0x384>
 8002852:	4bae      	ldr	r3, [pc, #696]	; (8002b0c <HAL_RCC_OscConfig+0x624>)
 8002854:	6a1a      	ldr	r2, [r3, #32]
 8002856:	4bad      	ldr	r3, [pc, #692]	; (8002b0c <HAL_RCC_OscConfig+0x624>)
 8002858:	2104      	movs	r1, #4
 800285a:	430a      	orrs	r2, r1
 800285c:	621a      	str	r2, [r3, #32]
 800285e:	4bab      	ldr	r3, [pc, #684]	; (8002b0c <HAL_RCC_OscConfig+0x624>)
 8002860:	6a1a      	ldr	r2, [r3, #32]
 8002862:	4baa      	ldr	r3, [pc, #680]	; (8002b0c <HAL_RCC_OscConfig+0x624>)
 8002864:	2101      	movs	r1, #1
 8002866:	430a      	orrs	r2, r1
 8002868:	621a      	str	r2, [r3, #32]
 800286a:	e00b      	b.n	8002884 <HAL_RCC_OscConfig+0x39c>
 800286c:	4ba7      	ldr	r3, [pc, #668]	; (8002b0c <HAL_RCC_OscConfig+0x624>)
 800286e:	6a1a      	ldr	r2, [r3, #32]
 8002870:	4ba6      	ldr	r3, [pc, #664]	; (8002b0c <HAL_RCC_OscConfig+0x624>)
 8002872:	2101      	movs	r1, #1
 8002874:	438a      	bics	r2, r1
 8002876:	621a      	str	r2, [r3, #32]
 8002878:	4ba4      	ldr	r3, [pc, #656]	; (8002b0c <HAL_RCC_OscConfig+0x624>)
 800287a:	6a1a      	ldr	r2, [r3, #32]
 800287c:	4ba3      	ldr	r3, [pc, #652]	; (8002b0c <HAL_RCC_OscConfig+0x624>)
 800287e:	2104      	movs	r1, #4
 8002880:	438a      	bics	r2, r1
 8002882:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d014      	beq.n	80028b6 <HAL_RCC_OscConfig+0x3ce>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800288c:	f7fe fc4a 	bl	8001124 <HAL_GetTick>
 8002890:	0003      	movs	r3, r0
 8002892:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002894:	e009      	b.n	80028aa <HAL_RCC_OscConfig+0x3c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002896:	f7fe fc45 	bl	8001124 <HAL_GetTick>
 800289a:	0002      	movs	r2, r0
 800289c:	69bb      	ldr	r3, [r7, #24]
 800289e:	1ad3      	subs	r3, r2, r3
 80028a0:	4a9b      	ldr	r2, [pc, #620]	; (8002b10 <HAL_RCC_OscConfig+0x628>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d901      	bls.n	80028aa <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 80028a6:	2303      	movs	r3, #3
 80028a8:	e12b      	b.n	8002b02 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028aa:	4b98      	ldr	r3, [pc, #608]	; (8002b0c <HAL_RCC_OscConfig+0x624>)
 80028ac:	6a1b      	ldr	r3, [r3, #32]
 80028ae:	2202      	movs	r2, #2
 80028b0:	4013      	ands	r3, r2
 80028b2:	d0f0      	beq.n	8002896 <HAL_RCC_OscConfig+0x3ae>
 80028b4:	e013      	b.n	80028de <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028b6:	f7fe fc35 	bl	8001124 <HAL_GetTick>
 80028ba:	0003      	movs	r3, r0
 80028bc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028be:	e009      	b.n	80028d4 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028c0:	f7fe fc30 	bl	8001124 <HAL_GetTick>
 80028c4:	0002      	movs	r2, r0
 80028c6:	69bb      	ldr	r3, [r7, #24]
 80028c8:	1ad3      	subs	r3, r2, r3
 80028ca:	4a91      	ldr	r2, [pc, #580]	; (8002b10 <HAL_RCC_OscConfig+0x628>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d901      	bls.n	80028d4 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 80028d0:	2303      	movs	r3, #3
 80028d2:	e116      	b.n	8002b02 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028d4:	4b8d      	ldr	r3, [pc, #564]	; (8002b0c <HAL_RCC_OscConfig+0x624>)
 80028d6:	6a1b      	ldr	r3, [r3, #32]
 80028d8:	2202      	movs	r2, #2
 80028da:	4013      	ands	r3, r2
 80028dc:	d1f0      	bne.n	80028c0 <HAL_RCC_OscConfig+0x3d8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80028de:	231f      	movs	r3, #31
 80028e0:	18fb      	adds	r3, r7, r3
 80028e2:	781b      	ldrb	r3, [r3, #0]
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	d105      	bne.n	80028f4 <HAL_RCC_OscConfig+0x40c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028e8:	4b88      	ldr	r3, [pc, #544]	; (8002b0c <HAL_RCC_OscConfig+0x624>)
 80028ea:	69da      	ldr	r2, [r3, #28]
 80028ec:	4b87      	ldr	r3, [pc, #540]	; (8002b0c <HAL_RCC_OscConfig+0x624>)
 80028ee:	4989      	ldr	r1, [pc, #548]	; (8002b14 <HAL_RCC_OscConfig+0x62c>)
 80028f0:	400a      	ands	r2, r1
 80028f2:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	2210      	movs	r2, #16
 80028fa:	4013      	ands	r3, r2
 80028fc:	d063      	beq.n	80029c6 <HAL_RCC_OscConfig+0x4de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	695b      	ldr	r3, [r3, #20]
 8002902:	2b01      	cmp	r3, #1
 8002904:	d12a      	bne.n	800295c <HAL_RCC_OscConfig+0x474>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002906:	4b81      	ldr	r3, [pc, #516]	; (8002b0c <HAL_RCC_OscConfig+0x624>)
 8002908:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800290a:	4b80      	ldr	r3, [pc, #512]	; (8002b0c <HAL_RCC_OscConfig+0x624>)
 800290c:	2104      	movs	r1, #4
 800290e:	430a      	orrs	r2, r1
 8002910:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002912:	4b7e      	ldr	r3, [pc, #504]	; (8002b0c <HAL_RCC_OscConfig+0x624>)
 8002914:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002916:	4b7d      	ldr	r3, [pc, #500]	; (8002b0c <HAL_RCC_OscConfig+0x624>)
 8002918:	2101      	movs	r1, #1
 800291a:	430a      	orrs	r2, r1
 800291c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800291e:	f7fe fc01 	bl	8001124 <HAL_GetTick>
 8002922:	0003      	movs	r3, r0
 8002924:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002926:	e008      	b.n	800293a <HAL_RCC_OscConfig+0x452>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002928:	f7fe fbfc 	bl	8001124 <HAL_GetTick>
 800292c:	0002      	movs	r2, r0
 800292e:	69bb      	ldr	r3, [r7, #24]
 8002930:	1ad3      	subs	r3, r2, r3
 8002932:	2b02      	cmp	r3, #2
 8002934:	d901      	bls.n	800293a <HAL_RCC_OscConfig+0x452>
        {
          return HAL_TIMEOUT;
 8002936:	2303      	movs	r3, #3
 8002938:	e0e3      	b.n	8002b02 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800293a:	4b74      	ldr	r3, [pc, #464]	; (8002b0c <HAL_RCC_OscConfig+0x624>)
 800293c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800293e:	2202      	movs	r2, #2
 8002940:	4013      	ands	r3, r2
 8002942:	d0f1      	beq.n	8002928 <HAL_RCC_OscConfig+0x440>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002944:	4b71      	ldr	r3, [pc, #452]	; (8002b0c <HAL_RCC_OscConfig+0x624>)
 8002946:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002948:	22f8      	movs	r2, #248	; 0xf8
 800294a:	4393      	bics	r3, r2
 800294c:	0019      	movs	r1, r3
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	699b      	ldr	r3, [r3, #24]
 8002952:	00da      	lsls	r2, r3, #3
 8002954:	4b6d      	ldr	r3, [pc, #436]	; (8002b0c <HAL_RCC_OscConfig+0x624>)
 8002956:	430a      	orrs	r2, r1
 8002958:	635a      	str	r2, [r3, #52]	; 0x34
 800295a:	e034      	b.n	80029c6 <HAL_RCC_OscConfig+0x4de>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	695b      	ldr	r3, [r3, #20]
 8002960:	3305      	adds	r3, #5
 8002962:	d111      	bne.n	8002988 <HAL_RCC_OscConfig+0x4a0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002964:	4b69      	ldr	r3, [pc, #420]	; (8002b0c <HAL_RCC_OscConfig+0x624>)
 8002966:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002968:	4b68      	ldr	r3, [pc, #416]	; (8002b0c <HAL_RCC_OscConfig+0x624>)
 800296a:	2104      	movs	r1, #4
 800296c:	438a      	bics	r2, r1
 800296e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002970:	4b66      	ldr	r3, [pc, #408]	; (8002b0c <HAL_RCC_OscConfig+0x624>)
 8002972:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002974:	22f8      	movs	r2, #248	; 0xf8
 8002976:	4393      	bics	r3, r2
 8002978:	0019      	movs	r1, r3
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	699b      	ldr	r3, [r3, #24]
 800297e:	00da      	lsls	r2, r3, #3
 8002980:	4b62      	ldr	r3, [pc, #392]	; (8002b0c <HAL_RCC_OscConfig+0x624>)
 8002982:	430a      	orrs	r2, r1
 8002984:	635a      	str	r2, [r3, #52]	; 0x34
 8002986:	e01e      	b.n	80029c6 <HAL_RCC_OscConfig+0x4de>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002988:	4b60      	ldr	r3, [pc, #384]	; (8002b0c <HAL_RCC_OscConfig+0x624>)
 800298a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800298c:	4b5f      	ldr	r3, [pc, #380]	; (8002b0c <HAL_RCC_OscConfig+0x624>)
 800298e:	2104      	movs	r1, #4
 8002990:	430a      	orrs	r2, r1
 8002992:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002994:	4b5d      	ldr	r3, [pc, #372]	; (8002b0c <HAL_RCC_OscConfig+0x624>)
 8002996:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002998:	4b5c      	ldr	r3, [pc, #368]	; (8002b0c <HAL_RCC_OscConfig+0x624>)
 800299a:	2101      	movs	r1, #1
 800299c:	438a      	bics	r2, r1
 800299e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029a0:	f7fe fbc0 	bl	8001124 <HAL_GetTick>
 80029a4:	0003      	movs	r3, r0
 80029a6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80029a8:	e008      	b.n	80029bc <HAL_RCC_OscConfig+0x4d4>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80029aa:	f7fe fbbb 	bl	8001124 <HAL_GetTick>
 80029ae:	0002      	movs	r2, r0
 80029b0:	69bb      	ldr	r3, [r7, #24]
 80029b2:	1ad3      	subs	r3, r2, r3
 80029b4:	2b02      	cmp	r3, #2
 80029b6:	d901      	bls.n	80029bc <HAL_RCC_OscConfig+0x4d4>
        {
          return HAL_TIMEOUT;
 80029b8:	2303      	movs	r3, #3
 80029ba:	e0a2      	b.n	8002b02 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80029bc:	4b53      	ldr	r3, [pc, #332]	; (8002b0c <HAL_RCC_OscConfig+0x624>)
 80029be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029c0:	2202      	movs	r2, #2
 80029c2:	4013      	ands	r3, r2
 80029c4:	d1f1      	bne.n	80029aa <HAL_RCC_OscConfig+0x4c2>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6a1b      	ldr	r3, [r3, #32]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d100      	bne.n	80029d0 <HAL_RCC_OscConfig+0x4e8>
 80029ce:	e097      	b.n	8002b00 <HAL_RCC_OscConfig+0x618>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80029d0:	4b4e      	ldr	r3, [pc, #312]	; (8002b0c <HAL_RCC_OscConfig+0x624>)
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	220c      	movs	r2, #12
 80029d6:	4013      	ands	r3, r2
 80029d8:	2b08      	cmp	r3, #8
 80029da:	d100      	bne.n	80029de <HAL_RCC_OscConfig+0x4f6>
 80029dc:	e06b      	b.n	8002ab6 <HAL_RCC_OscConfig+0x5ce>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6a1b      	ldr	r3, [r3, #32]
 80029e2:	2b02      	cmp	r3, #2
 80029e4:	d14c      	bne.n	8002a80 <HAL_RCC_OscConfig+0x598>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029e6:	4b49      	ldr	r3, [pc, #292]	; (8002b0c <HAL_RCC_OscConfig+0x624>)
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	4b48      	ldr	r3, [pc, #288]	; (8002b0c <HAL_RCC_OscConfig+0x624>)
 80029ec:	494a      	ldr	r1, [pc, #296]	; (8002b18 <HAL_RCC_OscConfig+0x630>)
 80029ee:	400a      	ands	r2, r1
 80029f0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029f2:	f7fe fb97 	bl	8001124 <HAL_GetTick>
 80029f6:	0003      	movs	r3, r0
 80029f8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029fa:	e008      	b.n	8002a0e <HAL_RCC_OscConfig+0x526>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029fc:	f7fe fb92 	bl	8001124 <HAL_GetTick>
 8002a00:	0002      	movs	r2, r0
 8002a02:	69bb      	ldr	r3, [r7, #24]
 8002a04:	1ad3      	subs	r3, r2, r3
 8002a06:	2b02      	cmp	r3, #2
 8002a08:	d901      	bls.n	8002a0e <HAL_RCC_OscConfig+0x526>
          {
            return HAL_TIMEOUT;
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	e079      	b.n	8002b02 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a0e:	4b3f      	ldr	r3, [pc, #252]	; (8002b0c <HAL_RCC_OscConfig+0x624>)
 8002a10:	681a      	ldr	r2, [r3, #0]
 8002a12:	2380      	movs	r3, #128	; 0x80
 8002a14:	049b      	lsls	r3, r3, #18
 8002a16:	4013      	ands	r3, r2
 8002a18:	d1f0      	bne.n	80029fc <HAL_RCC_OscConfig+0x514>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a1a:	4b3c      	ldr	r3, [pc, #240]	; (8002b0c <HAL_RCC_OscConfig+0x624>)
 8002a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a1e:	220f      	movs	r2, #15
 8002a20:	4393      	bics	r3, r2
 8002a22:	0019      	movs	r1, r3
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a28:	4b38      	ldr	r3, [pc, #224]	; (8002b0c <HAL_RCC_OscConfig+0x624>)
 8002a2a:	430a      	orrs	r2, r1
 8002a2c:	62da      	str	r2, [r3, #44]	; 0x2c
 8002a2e:	4b37      	ldr	r3, [pc, #220]	; (8002b0c <HAL_RCC_OscConfig+0x624>)
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	4a3a      	ldr	r2, [pc, #232]	; (8002b1c <HAL_RCC_OscConfig+0x634>)
 8002a34:	4013      	ands	r3, r2
 8002a36:	0019      	movs	r1, r3
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a40:	431a      	orrs	r2, r3
 8002a42:	4b32      	ldr	r3, [pc, #200]	; (8002b0c <HAL_RCC_OscConfig+0x624>)
 8002a44:	430a      	orrs	r2, r1
 8002a46:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a48:	4b30      	ldr	r3, [pc, #192]	; (8002b0c <HAL_RCC_OscConfig+0x624>)
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	4b2f      	ldr	r3, [pc, #188]	; (8002b0c <HAL_RCC_OscConfig+0x624>)
 8002a4e:	2180      	movs	r1, #128	; 0x80
 8002a50:	0449      	lsls	r1, r1, #17
 8002a52:	430a      	orrs	r2, r1
 8002a54:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a56:	f7fe fb65 	bl	8001124 <HAL_GetTick>
 8002a5a:	0003      	movs	r3, r0
 8002a5c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a5e:	e008      	b.n	8002a72 <HAL_RCC_OscConfig+0x58a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a60:	f7fe fb60 	bl	8001124 <HAL_GetTick>
 8002a64:	0002      	movs	r2, r0
 8002a66:	69bb      	ldr	r3, [r7, #24]
 8002a68:	1ad3      	subs	r3, r2, r3
 8002a6a:	2b02      	cmp	r3, #2
 8002a6c:	d901      	bls.n	8002a72 <HAL_RCC_OscConfig+0x58a>
          {
            return HAL_TIMEOUT;
 8002a6e:	2303      	movs	r3, #3
 8002a70:	e047      	b.n	8002b02 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a72:	4b26      	ldr	r3, [pc, #152]	; (8002b0c <HAL_RCC_OscConfig+0x624>)
 8002a74:	681a      	ldr	r2, [r3, #0]
 8002a76:	2380      	movs	r3, #128	; 0x80
 8002a78:	049b      	lsls	r3, r3, #18
 8002a7a:	4013      	ands	r3, r2
 8002a7c:	d0f0      	beq.n	8002a60 <HAL_RCC_OscConfig+0x578>
 8002a7e:	e03f      	b.n	8002b00 <HAL_RCC_OscConfig+0x618>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a80:	4b22      	ldr	r3, [pc, #136]	; (8002b0c <HAL_RCC_OscConfig+0x624>)
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	4b21      	ldr	r3, [pc, #132]	; (8002b0c <HAL_RCC_OscConfig+0x624>)
 8002a86:	4924      	ldr	r1, [pc, #144]	; (8002b18 <HAL_RCC_OscConfig+0x630>)
 8002a88:	400a      	ands	r2, r1
 8002a8a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a8c:	f7fe fb4a 	bl	8001124 <HAL_GetTick>
 8002a90:	0003      	movs	r3, r0
 8002a92:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a94:	e008      	b.n	8002aa8 <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a96:	f7fe fb45 	bl	8001124 <HAL_GetTick>
 8002a9a:	0002      	movs	r2, r0
 8002a9c:	69bb      	ldr	r3, [r7, #24]
 8002a9e:	1ad3      	subs	r3, r2, r3
 8002aa0:	2b02      	cmp	r3, #2
 8002aa2:	d901      	bls.n	8002aa8 <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 8002aa4:	2303      	movs	r3, #3
 8002aa6:	e02c      	b.n	8002b02 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002aa8:	4b18      	ldr	r3, [pc, #96]	; (8002b0c <HAL_RCC_OscConfig+0x624>)
 8002aaa:	681a      	ldr	r2, [r3, #0]
 8002aac:	2380      	movs	r3, #128	; 0x80
 8002aae:	049b      	lsls	r3, r3, #18
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	d1f0      	bne.n	8002a96 <HAL_RCC_OscConfig+0x5ae>
 8002ab4:	e024      	b.n	8002b00 <HAL_RCC_OscConfig+0x618>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6a1b      	ldr	r3, [r3, #32]
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d101      	bne.n	8002ac2 <HAL_RCC_OscConfig+0x5da>
      {
        return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e01f      	b.n	8002b02 <HAL_RCC_OscConfig+0x61a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002ac2:	4b12      	ldr	r3, [pc, #72]	; (8002b0c <HAL_RCC_OscConfig+0x624>)
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002ac8:	4b10      	ldr	r3, [pc, #64]	; (8002b0c <HAL_RCC_OscConfig+0x624>)
 8002aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002acc:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ace:	697a      	ldr	r2, [r7, #20]
 8002ad0:	2380      	movs	r3, #128	; 0x80
 8002ad2:	025b      	lsls	r3, r3, #9
 8002ad4:	401a      	ands	r2, r3
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ada:	429a      	cmp	r2, r3
 8002adc:	d10e      	bne.n	8002afc <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	220f      	movs	r2, #15
 8002ae2:	401a      	ands	r2, r3
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d107      	bne.n	8002afc <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002aec:	697a      	ldr	r2, [r7, #20]
 8002aee:	23f0      	movs	r3, #240	; 0xf0
 8002af0:	039b      	lsls	r3, r3, #14
 8002af2:	401a      	ands	r2, r3
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d001      	beq.n	8002b00 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_ERROR;
 8002afc:	2301      	movs	r3, #1
 8002afe:	e000      	b.n	8002b02 <HAL_RCC_OscConfig+0x61a>
        }
      }
    }
  }

  return HAL_OK;
 8002b00:	2300      	movs	r3, #0
}
 8002b02:	0018      	movs	r0, r3
 8002b04:	46bd      	mov	sp, r7
 8002b06:	b008      	add	sp, #32
 8002b08:	bd80      	pop	{r7, pc}
 8002b0a:	46c0      	nop			; (mov r8, r8)
 8002b0c:	40021000 	.word	0x40021000
 8002b10:	00001388 	.word	0x00001388
 8002b14:	efffffff 	.word	0xefffffff
 8002b18:	feffffff 	.word	0xfeffffff
 8002b1c:	ffc2ffff 	.word	0xffc2ffff

08002b20 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b084      	sub	sp, #16
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
 8002b28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d101      	bne.n	8002b34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b30:	2301      	movs	r3, #1
 8002b32:	e0b3      	b.n	8002c9c <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b34:	4b5b      	ldr	r3, [pc, #364]	; (8002ca4 <HAL_RCC_ClockConfig+0x184>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	2201      	movs	r2, #1
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	683a      	ldr	r2, [r7, #0]
 8002b3e:	429a      	cmp	r2, r3
 8002b40:	d911      	bls.n	8002b66 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b42:	4b58      	ldr	r3, [pc, #352]	; (8002ca4 <HAL_RCC_ClockConfig+0x184>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	2201      	movs	r2, #1
 8002b48:	4393      	bics	r3, r2
 8002b4a:	0019      	movs	r1, r3
 8002b4c:	4b55      	ldr	r3, [pc, #340]	; (8002ca4 <HAL_RCC_ClockConfig+0x184>)
 8002b4e:	683a      	ldr	r2, [r7, #0]
 8002b50:	430a      	orrs	r2, r1
 8002b52:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b54:	4b53      	ldr	r3, [pc, #332]	; (8002ca4 <HAL_RCC_ClockConfig+0x184>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	2201      	movs	r2, #1
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	683a      	ldr	r2, [r7, #0]
 8002b5e:	429a      	cmp	r2, r3
 8002b60:	d001      	beq.n	8002b66 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	e09a      	b.n	8002c9c <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	2202      	movs	r2, #2
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	d015      	beq.n	8002b9c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	2204      	movs	r2, #4
 8002b76:	4013      	ands	r3, r2
 8002b78:	d006      	beq.n	8002b88 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002b7a:	4b4b      	ldr	r3, [pc, #300]	; (8002ca8 <HAL_RCC_ClockConfig+0x188>)
 8002b7c:	685a      	ldr	r2, [r3, #4]
 8002b7e:	4b4a      	ldr	r3, [pc, #296]	; (8002ca8 <HAL_RCC_ClockConfig+0x188>)
 8002b80:	21e0      	movs	r1, #224	; 0xe0
 8002b82:	00c9      	lsls	r1, r1, #3
 8002b84:	430a      	orrs	r2, r1
 8002b86:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b88:	4b47      	ldr	r3, [pc, #284]	; (8002ca8 <HAL_RCC_ClockConfig+0x188>)
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	22f0      	movs	r2, #240	; 0xf0
 8002b8e:	4393      	bics	r3, r2
 8002b90:	0019      	movs	r1, r3
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	689a      	ldr	r2, [r3, #8]
 8002b96:	4b44      	ldr	r3, [pc, #272]	; (8002ca8 <HAL_RCC_ClockConfig+0x188>)
 8002b98:	430a      	orrs	r2, r1
 8002b9a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	4013      	ands	r3, r2
 8002ba4:	d040      	beq.n	8002c28 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d107      	bne.n	8002bbe <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bae:	4b3e      	ldr	r3, [pc, #248]	; (8002ca8 <HAL_RCC_ClockConfig+0x188>)
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	2380      	movs	r3, #128	; 0x80
 8002bb4:	029b      	lsls	r3, r3, #10
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	d114      	bne.n	8002be4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e06e      	b.n	8002c9c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	2b02      	cmp	r3, #2
 8002bc4:	d107      	bne.n	8002bd6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bc6:	4b38      	ldr	r3, [pc, #224]	; (8002ca8 <HAL_RCC_ClockConfig+0x188>)
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	2380      	movs	r3, #128	; 0x80
 8002bcc:	049b      	lsls	r3, r3, #18
 8002bce:	4013      	ands	r3, r2
 8002bd0:	d108      	bne.n	8002be4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e062      	b.n	8002c9c <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bd6:	4b34      	ldr	r3, [pc, #208]	; (8002ca8 <HAL_RCC_ClockConfig+0x188>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	2202      	movs	r2, #2
 8002bdc:	4013      	ands	r3, r2
 8002bde:	d101      	bne.n	8002be4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	e05b      	b.n	8002c9c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002be4:	4b30      	ldr	r3, [pc, #192]	; (8002ca8 <HAL_RCC_ClockConfig+0x188>)
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	2203      	movs	r2, #3
 8002bea:	4393      	bics	r3, r2
 8002bec:	0019      	movs	r1, r3
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	685a      	ldr	r2, [r3, #4]
 8002bf2:	4b2d      	ldr	r3, [pc, #180]	; (8002ca8 <HAL_RCC_ClockConfig+0x188>)
 8002bf4:	430a      	orrs	r2, r1
 8002bf6:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002bf8:	f7fe fa94 	bl	8001124 <HAL_GetTick>
 8002bfc:	0003      	movs	r3, r0
 8002bfe:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c00:	e009      	b.n	8002c16 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c02:	f7fe fa8f 	bl	8001124 <HAL_GetTick>
 8002c06:	0002      	movs	r2, r0
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	1ad3      	subs	r3, r2, r3
 8002c0c:	4a27      	ldr	r2, [pc, #156]	; (8002cac <HAL_RCC_ClockConfig+0x18c>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d901      	bls.n	8002c16 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8002c12:	2303      	movs	r3, #3
 8002c14:	e042      	b.n	8002c9c <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c16:	4b24      	ldr	r3, [pc, #144]	; (8002ca8 <HAL_RCC_ClockConfig+0x188>)
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	220c      	movs	r2, #12
 8002c1c:	401a      	ands	r2, r3
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	429a      	cmp	r2, r3
 8002c26:	d1ec      	bne.n	8002c02 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c28:	4b1e      	ldr	r3, [pc, #120]	; (8002ca4 <HAL_RCC_ClockConfig+0x184>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	4013      	ands	r3, r2
 8002c30:	683a      	ldr	r2, [r7, #0]
 8002c32:	429a      	cmp	r2, r3
 8002c34:	d211      	bcs.n	8002c5a <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c36:	4b1b      	ldr	r3, [pc, #108]	; (8002ca4 <HAL_RCC_ClockConfig+0x184>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	2201      	movs	r2, #1
 8002c3c:	4393      	bics	r3, r2
 8002c3e:	0019      	movs	r1, r3
 8002c40:	4b18      	ldr	r3, [pc, #96]	; (8002ca4 <HAL_RCC_ClockConfig+0x184>)
 8002c42:	683a      	ldr	r2, [r7, #0]
 8002c44:	430a      	orrs	r2, r1
 8002c46:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c48:	4b16      	ldr	r3, [pc, #88]	; (8002ca4 <HAL_RCC_ClockConfig+0x184>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	4013      	ands	r3, r2
 8002c50:	683a      	ldr	r2, [r7, #0]
 8002c52:	429a      	cmp	r2, r3
 8002c54:	d001      	beq.n	8002c5a <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e020      	b.n	8002c9c <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	2204      	movs	r2, #4
 8002c60:	4013      	ands	r3, r2
 8002c62:	d009      	beq.n	8002c78 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002c64:	4b10      	ldr	r3, [pc, #64]	; (8002ca8 <HAL_RCC_ClockConfig+0x188>)
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	4a11      	ldr	r2, [pc, #68]	; (8002cb0 <HAL_RCC_ClockConfig+0x190>)
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	0019      	movs	r1, r3
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	68da      	ldr	r2, [r3, #12]
 8002c72:	4b0d      	ldr	r3, [pc, #52]	; (8002ca8 <HAL_RCC_ClockConfig+0x188>)
 8002c74:	430a      	orrs	r2, r1
 8002c76:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002c78:	f000 f820 	bl	8002cbc <HAL_RCC_GetSysClockFreq>
 8002c7c:	0001      	movs	r1, r0
 8002c7e:	4b0a      	ldr	r3, [pc, #40]	; (8002ca8 <HAL_RCC_ClockConfig+0x188>)
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	091b      	lsrs	r3, r3, #4
 8002c84:	220f      	movs	r2, #15
 8002c86:	4013      	ands	r3, r2
 8002c88:	4a0a      	ldr	r2, [pc, #40]	; (8002cb4 <HAL_RCC_ClockConfig+0x194>)
 8002c8a:	5cd3      	ldrb	r3, [r2, r3]
 8002c8c:	000a      	movs	r2, r1
 8002c8e:	40da      	lsrs	r2, r3
 8002c90:	4b09      	ldr	r3, [pc, #36]	; (8002cb8 <HAL_RCC_ClockConfig+0x198>)
 8002c92:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002c94:	2000      	movs	r0, #0
 8002c96:	f7fe f9ff 	bl	8001098 <HAL_InitTick>
  
  return HAL_OK;
 8002c9a:	2300      	movs	r3, #0
}
 8002c9c:	0018      	movs	r0, r3
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	b004      	add	sp, #16
 8002ca2:	bd80      	pop	{r7, pc}
 8002ca4:	40022000 	.word	0x40022000
 8002ca8:	40021000 	.word	0x40021000
 8002cac:	00001388 	.word	0x00001388
 8002cb0:	fffff8ff 	.word	0xfffff8ff
 8002cb4:	08004d54 	.word	0x08004d54
 8002cb8:	20000000 	.word	0x20000000

08002cbc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cbc:	b590      	push	{r4, r7, lr}
 8002cbe:	b08f      	sub	sp, #60	; 0x3c
 8002cc0:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8002cc2:	2314      	movs	r3, #20
 8002cc4:	18fb      	adds	r3, r7, r3
 8002cc6:	4a2b      	ldr	r2, [pc, #172]	; (8002d74 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002cc8:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002cca:	c313      	stmia	r3!, {r0, r1, r4}
 8002ccc:	6812      	ldr	r2, [r2, #0]
 8002cce:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8002cd0:	1d3b      	adds	r3, r7, #4
 8002cd2:	4a29      	ldr	r2, [pc, #164]	; (8002d78 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002cd4:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002cd6:	c313      	stmia	r3!, {r0, r1, r4}
 8002cd8:	6812      	ldr	r2, [r2, #0]
 8002cda:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	637b      	str	r3, [r7, #52]	; 0x34
 8002ce8:	2300      	movs	r3, #0
 8002cea:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8002cec:	2300      	movs	r3, #0
 8002cee:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8002cf0:	4b22      	ldr	r3, [pc, #136]	; (8002d7c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002cf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cf8:	220c      	movs	r2, #12
 8002cfa:	4013      	ands	r3, r2
 8002cfc:	2b04      	cmp	r3, #4
 8002cfe:	d002      	beq.n	8002d06 <HAL_RCC_GetSysClockFreq+0x4a>
 8002d00:	2b08      	cmp	r3, #8
 8002d02:	d003      	beq.n	8002d0c <HAL_RCC_GetSysClockFreq+0x50>
 8002d04:	e02d      	b.n	8002d62 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002d06:	4b1e      	ldr	r3, [pc, #120]	; (8002d80 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002d08:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002d0a:	e02d      	b.n	8002d68 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002d0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d0e:	0c9b      	lsrs	r3, r3, #18
 8002d10:	220f      	movs	r2, #15
 8002d12:	4013      	ands	r3, r2
 8002d14:	2214      	movs	r2, #20
 8002d16:	18ba      	adds	r2, r7, r2
 8002d18:	5cd3      	ldrb	r3, [r2, r3]
 8002d1a:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002d1c:	4b17      	ldr	r3, [pc, #92]	; (8002d7c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d20:	220f      	movs	r2, #15
 8002d22:	4013      	ands	r3, r2
 8002d24:	1d3a      	adds	r2, r7, #4
 8002d26:	5cd3      	ldrb	r3, [r2, r3]
 8002d28:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002d2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d2c:	2380      	movs	r3, #128	; 0x80
 8002d2e:	025b      	lsls	r3, r3, #9
 8002d30:	4013      	ands	r3, r2
 8002d32:	d009      	beq.n	8002d48 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002d34:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d36:	4812      	ldr	r0, [pc, #72]	; (8002d80 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002d38:	f7fd f9e6 	bl	8000108 <__udivsi3>
 8002d3c:	0003      	movs	r3, r0
 8002d3e:	001a      	movs	r2, r3
 8002d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d42:	4353      	muls	r3, r2
 8002d44:	637b      	str	r3, [r7, #52]	; 0x34
 8002d46:	e009      	b.n	8002d5c <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002d48:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d4a:	000a      	movs	r2, r1
 8002d4c:	0152      	lsls	r2, r2, #5
 8002d4e:	1a52      	subs	r2, r2, r1
 8002d50:	0193      	lsls	r3, r2, #6
 8002d52:	1a9b      	subs	r3, r3, r2
 8002d54:	00db      	lsls	r3, r3, #3
 8002d56:	185b      	adds	r3, r3, r1
 8002d58:	021b      	lsls	r3, r3, #8
 8002d5a:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8002d5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d5e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002d60:	e002      	b.n	8002d68 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002d62:	4b07      	ldr	r3, [pc, #28]	; (8002d80 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002d64:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002d66:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002d6a:	0018      	movs	r0, r3
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	b00f      	add	sp, #60	; 0x3c
 8002d70:	bd90      	pop	{r4, r7, pc}
 8002d72:	46c0      	nop			; (mov r8, r8)
 8002d74:	08004c80 	.word	0x08004c80
 8002d78:	08004c90 	.word	0x08004c90
 8002d7c:	40021000 	.word	0x40021000
 8002d80:	007a1200 	.word	0x007a1200

08002d84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d88:	4b02      	ldr	r3, [pc, #8]	; (8002d94 <HAL_RCC_GetHCLKFreq+0x10>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
}
 8002d8c:	0018      	movs	r0, r3
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}
 8002d92:	46c0      	nop			; (mov r8, r8)
 8002d94:	20000000 	.word	0x20000000

08002d98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002d9c:	f7ff fff2 	bl	8002d84 <HAL_RCC_GetHCLKFreq>
 8002da0:	0001      	movs	r1, r0
 8002da2:	4b06      	ldr	r3, [pc, #24]	; (8002dbc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	0a1b      	lsrs	r3, r3, #8
 8002da8:	2207      	movs	r2, #7
 8002daa:	4013      	ands	r3, r2
 8002dac:	4a04      	ldr	r2, [pc, #16]	; (8002dc0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002dae:	5cd3      	ldrb	r3, [r2, r3]
 8002db0:	40d9      	lsrs	r1, r3
 8002db2:	000b      	movs	r3, r1
}    
 8002db4:	0018      	movs	r0, r3
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}
 8002dba:	46c0      	nop			; (mov r8, r8)
 8002dbc:	40021000 	.word	0x40021000
 8002dc0:	08004d64 	.word	0x08004d64

08002dc4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b086      	sub	sp, #24
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	2380      	movs	r3, #128	; 0x80
 8002dda:	025b      	lsls	r3, r3, #9
 8002ddc:	4013      	ands	r3, r2
 8002dde:	d100      	bne.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002de0:	e08f      	b.n	8002f02 <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8002de2:	2317      	movs	r3, #23
 8002de4:	18fb      	adds	r3, r7, r3
 8002de6:	2200      	movs	r2, #0
 8002de8:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dea:	4b5f      	ldr	r3, [pc, #380]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002dec:	69da      	ldr	r2, [r3, #28]
 8002dee:	2380      	movs	r3, #128	; 0x80
 8002df0:	055b      	lsls	r3, r3, #21
 8002df2:	4013      	ands	r3, r2
 8002df4:	d111      	bne.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002df6:	4b5c      	ldr	r3, [pc, #368]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002df8:	69da      	ldr	r2, [r3, #28]
 8002dfa:	4b5b      	ldr	r3, [pc, #364]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002dfc:	2180      	movs	r1, #128	; 0x80
 8002dfe:	0549      	lsls	r1, r1, #21
 8002e00:	430a      	orrs	r2, r1
 8002e02:	61da      	str	r2, [r3, #28]
 8002e04:	4b58      	ldr	r3, [pc, #352]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002e06:	69da      	ldr	r2, [r3, #28]
 8002e08:	2380      	movs	r3, #128	; 0x80
 8002e0a:	055b      	lsls	r3, r3, #21
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	60bb      	str	r3, [r7, #8]
 8002e10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e12:	2317      	movs	r3, #23
 8002e14:	18fb      	adds	r3, r7, r3
 8002e16:	2201      	movs	r2, #1
 8002e18:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e1a:	4b54      	ldr	r3, [pc, #336]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002e1c:	681a      	ldr	r2, [r3, #0]
 8002e1e:	2380      	movs	r3, #128	; 0x80
 8002e20:	005b      	lsls	r3, r3, #1
 8002e22:	4013      	ands	r3, r2
 8002e24:	d11a      	bne.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e26:	4b51      	ldr	r3, [pc, #324]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	4b50      	ldr	r3, [pc, #320]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002e2c:	2180      	movs	r1, #128	; 0x80
 8002e2e:	0049      	lsls	r1, r1, #1
 8002e30:	430a      	orrs	r2, r1
 8002e32:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e34:	f7fe f976 	bl	8001124 <HAL_GetTick>
 8002e38:	0003      	movs	r3, r0
 8002e3a:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e3c:	e008      	b.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e3e:	f7fe f971 	bl	8001124 <HAL_GetTick>
 8002e42:	0002      	movs	r2, r0
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	1ad3      	subs	r3, r2, r3
 8002e48:	2b64      	cmp	r3, #100	; 0x64
 8002e4a:	d901      	bls.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 8002e4c:	2303      	movs	r3, #3
 8002e4e:	e087      	b.n	8002f60 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e50:	4b46      	ldr	r3, [pc, #280]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002e52:	681a      	ldr	r2, [r3, #0]
 8002e54:	2380      	movs	r3, #128	; 0x80
 8002e56:	005b      	lsls	r3, r3, #1
 8002e58:	4013      	ands	r3, r2
 8002e5a:	d0f0      	beq.n	8002e3e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002e5c:	4b42      	ldr	r3, [pc, #264]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002e5e:	6a1a      	ldr	r2, [r3, #32]
 8002e60:	23c0      	movs	r3, #192	; 0xc0
 8002e62:	009b      	lsls	r3, r3, #2
 8002e64:	4013      	ands	r3, r2
 8002e66:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d034      	beq.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x114>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	685a      	ldr	r2, [r3, #4]
 8002e72:	23c0      	movs	r3, #192	; 0xc0
 8002e74:	009b      	lsls	r3, r3, #2
 8002e76:	4013      	ands	r3, r2
 8002e78:	68fa      	ldr	r2, [r7, #12]
 8002e7a:	429a      	cmp	r2, r3
 8002e7c:	d02c      	beq.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002e7e:	4b3a      	ldr	r3, [pc, #232]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002e80:	6a1b      	ldr	r3, [r3, #32]
 8002e82:	4a3b      	ldr	r2, [pc, #236]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e84:	4013      	ands	r3, r2
 8002e86:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002e88:	4b37      	ldr	r3, [pc, #220]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002e8a:	6a1a      	ldr	r2, [r3, #32]
 8002e8c:	4b36      	ldr	r3, [pc, #216]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002e8e:	2180      	movs	r1, #128	; 0x80
 8002e90:	0249      	lsls	r1, r1, #9
 8002e92:	430a      	orrs	r2, r1
 8002e94:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002e96:	4b34      	ldr	r3, [pc, #208]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002e98:	6a1a      	ldr	r2, [r3, #32]
 8002e9a:	4b33      	ldr	r3, [pc, #204]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002e9c:	4935      	ldr	r1, [pc, #212]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002e9e:	400a      	ands	r2, r1
 8002ea0:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002ea2:	4b31      	ldr	r3, [pc, #196]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002ea4:	68fa      	ldr	r2, [r7, #12]
 8002ea6:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	2201      	movs	r2, #1
 8002eac:	4013      	ands	r3, r2
 8002eae:	d013      	beq.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eb0:	f7fe f938 	bl	8001124 <HAL_GetTick>
 8002eb4:	0003      	movs	r3, r0
 8002eb6:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002eb8:	e009      	b.n	8002ece <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002eba:	f7fe f933 	bl	8001124 <HAL_GetTick>
 8002ebe:	0002      	movs	r2, r0
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	1ad3      	subs	r3, r2, r3
 8002ec4:	4a2c      	ldr	r2, [pc, #176]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d901      	bls.n	8002ece <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8002eca:	2303      	movs	r3, #3
 8002ecc:	e048      	b.n	8002f60 <HAL_RCCEx_PeriphCLKConfig+0x19c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ece:	4b26      	ldr	r3, [pc, #152]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002ed0:	6a1b      	ldr	r3, [r3, #32]
 8002ed2:	2202      	movs	r2, #2
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	d0f0      	beq.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ed8:	4b23      	ldr	r3, [pc, #140]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002eda:	6a1b      	ldr	r3, [r3, #32]
 8002edc:	4a24      	ldr	r2, [pc, #144]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ede:	4013      	ands	r3, r2
 8002ee0:	0019      	movs	r1, r3
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	685a      	ldr	r2, [r3, #4]
 8002ee6:	4b20      	ldr	r3, [pc, #128]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002ee8:	430a      	orrs	r2, r1
 8002eea:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002eec:	2317      	movs	r3, #23
 8002eee:	18fb      	adds	r3, r7, r3
 8002ef0:	781b      	ldrb	r3, [r3, #0]
 8002ef2:	2b01      	cmp	r3, #1
 8002ef4:	d105      	bne.n	8002f02 <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ef6:	4b1c      	ldr	r3, [pc, #112]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002ef8:	69da      	ldr	r2, [r3, #28]
 8002efa:	4b1b      	ldr	r3, [pc, #108]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002efc:	491f      	ldr	r1, [pc, #124]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002efe:	400a      	ands	r2, r1
 8002f00:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	2201      	movs	r2, #1
 8002f08:	4013      	ands	r3, r2
 8002f0a:	d009      	beq.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002f0c:	4b16      	ldr	r3, [pc, #88]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f10:	2203      	movs	r2, #3
 8002f12:	4393      	bics	r3, r2
 8002f14:	0019      	movs	r1, r3
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	689a      	ldr	r2, [r3, #8]
 8002f1a:	4b13      	ldr	r3, [pc, #76]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002f1c:	430a      	orrs	r2, r1
 8002f1e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	2220      	movs	r2, #32
 8002f26:	4013      	ands	r3, r2
 8002f28:	d009      	beq.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002f2a:	4b0f      	ldr	r3, [pc, #60]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f2e:	2210      	movs	r2, #16
 8002f30:	4393      	bics	r3, r2
 8002f32:	0019      	movs	r1, r3
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	68da      	ldr	r2, [r3, #12]
 8002f38:	4b0b      	ldr	r3, [pc, #44]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002f3a:	430a      	orrs	r2, r1
 8002f3c:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	2380      	movs	r3, #128	; 0x80
 8002f44:	00db      	lsls	r3, r3, #3
 8002f46:	4013      	ands	r3, r2
 8002f48:	d009      	beq.n	8002f5e <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002f4a:	4b07      	ldr	r3, [pc, #28]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f4e:	2240      	movs	r2, #64	; 0x40
 8002f50:	4393      	bics	r3, r2
 8002f52:	0019      	movs	r1, r3
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	691a      	ldr	r2, [r3, #16]
 8002f58:	4b03      	ldr	r3, [pc, #12]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002f5a:	430a      	orrs	r2, r1
 8002f5c:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002f5e:	2300      	movs	r3, #0
}
 8002f60:	0018      	movs	r0, r3
 8002f62:	46bd      	mov	sp, r7
 8002f64:	b006      	add	sp, #24
 8002f66:	bd80      	pop	{r7, pc}
 8002f68:	40021000 	.word	0x40021000
 8002f6c:	40007000 	.word	0x40007000
 8002f70:	fffffcff 	.word	0xfffffcff
 8002f74:	fffeffff 	.word	0xfffeffff
 8002f78:	00001388 	.word	0x00001388
 8002f7c:	efffffff 	.word	0xefffffff

08002f80 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b082      	sub	sp, #8
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d101      	bne.n	8002f92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e044      	b.n	800301c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d107      	bne.n	8002faa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2270      	movs	r2, #112	; 0x70
 8002f9e:	2100      	movs	r1, #0
 8002fa0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	0018      	movs	r0, r3
 8002fa6:	f7fd ffb9 	bl	8000f1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2224      	movs	r2, #36	; 0x24
 8002fae:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	2101      	movs	r1, #1
 8002fbc:	438a      	bics	r2, r1
 8002fbe:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	0018      	movs	r0, r3
 8002fc4:	f000 fa1c 	bl	8003400 <UART_SetConfig>
 8002fc8:	0003      	movs	r3, r0
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d101      	bne.n	8002fd2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e024      	b.n	800301c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d003      	beq.n	8002fe2 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	0018      	movs	r0, r3
 8002fde:	f000 fb95 	bl	800370c <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	685a      	ldr	r2, [r3, #4]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	490d      	ldr	r1, [pc, #52]	; (8003024 <HAL_UART_Init+0xa4>)
 8002fee:	400a      	ands	r2, r1
 8002ff0:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	689a      	ldr	r2, [r3, #8]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	212a      	movs	r1, #42	; 0x2a
 8002ffe:	438a      	bics	r2, r1
 8003000:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	681a      	ldr	r2, [r3, #0]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	2101      	movs	r1, #1
 800300e:	430a      	orrs	r2, r1
 8003010:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	0018      	movs	r0, r3
 8003016:	f000 fc2d 	bl	8003874 <UART_CheckIdleState>
 800301a:	0003      	movs	r3, r0
}
 800301c:	0018      	movs	r0, r3
 800301e:	46bd      	mov	sp, r7
 8003020:	b002      	add	sp, #8
 8003022:	bd80      	pop	{r7, pc}
 8003024:	ffffb7ff 	.word	0xffffb7ff

08003028 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b084      	sub	sp, #16
 800302c:	af00      	add	r7, sp, #0
 800302e:	60f8      	str	r0, [r7, #12]
 8003030:	60b9      	str	r1, [r7, #8]
 8003032:	1dbb      	adds	r3, r7, #6
 8003034:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800303a:	2b20      	cmp	r3, #32
 800303c:	d000      	beq.n	8003040 <HAL_UART_Receive_DMA+0x18>
 800303e:	e07f      	b.n	8003140 <HAL_UART_Receive_DMA+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d003      	beq.n	800304e <HAL_UART_Receive_DMA+0x26>
 8003046:	1dbb      	adds	r3, r7, #6
 8003048:	881b      	ldrh	r3, [r3, #0]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d101      	bne.n	8003052 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	e077      	b.n	8003142 <HAL_UART_Receive_DMA+0x11a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	689a      	ldr	r2, [r3, #8]
 8003056:	2380      	movs	r3, #128	; 0x80
 8003058:	015b      	lsls	r3, r3, #5
 800305a:	429a      	cmp	r2, r3
 800305c:	d109      	bne.n	8003072 <HAL_UART_Receive_DMA+0x4a>
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	691b      	ldr	r3, [r3, #16]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d105      	bne.n	8003072 <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	2201      	movs	r2, #1
 800306a:	4013      	ands	r3, r2
 800306c:	d001      	beq.n	8003072 <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	e067      	b.n	8003142 <HAL_UART_Receive_DMA+0x11a>
      }
    }

    __HAL_LOCK(huart);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	2270      	movs	r2, #112	; 0x70
 8003076:	5c9b      	ldrb	r3, [r3, r2]
 8003078:	2b01      	cmp	r3, #1
 800307a:	d101      	bne.n	8003080 <HAL_UART_Receive_DMA+0x58>
 800307c:	2302      	movs	r3, #2
 800307e:	e060      	b.n	8003142 <HAL_UART_Receive_DMA+0x11a>
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	2270      	movs	r2, #112	; 0x70
 8003084:	2101      	movs	r1, #1
 8003086:	5499      	strb	r1, [r3, r2]

    huart->pRxBuffPtr = pData;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	68ba      	ldr	r2, [r7, #8]
 800308c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	1dba      	adds	r2, r7, #6
 8003092:	2158      	movs	r1, #88	; 0x58
 8003094:	8812      	ldrh	r2, [r2, #0]
 8003096:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2200      	movs	r2, #0
 800309c:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	2222      	movs	r2, #34	; 0x22
 80030a2:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmarx != NULL)
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d02a      	beq.n	8003102 <HAL_UART_Receive_DMA+0xda>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030b0:	4a26      	ldr	r2, [pc, #152]	; (800314c <HAL_UART_Receive_DMA+0x124>)
 80030b2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030b8:	4a25      	ldr	r2, [pc, #148]	; (8003150 <HAL_UART_Receive_DMA+0x128>)
 80030ba:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030c0:	4a24      	ldr	r2, [pc, #144]	; (8003154 <HAL_UART_Receive_DMA+0x12c>)
 80030c2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030c8:	2200      	movs	r2, #0
 80030ca:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	3324      	adds	r3, #36	; 0x24
 80030d6:	0019      	movs	r1, r3
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030dc:	001a      	movs	r2, r3
 80030de:	1dbb      	adds	r3, r7, #6
 80030e0:	881b      	ldrh	r3, [r3, #0]
 80030e2:	f7fe f971 	bl	80013c8 <HAL_DMA_Start_IT>
 80030e6:	1e03      	subs	r3, r0, #0
 80030e8:	d00b      	beq.n	8003102 <HAL_UART_Receive_DMA+0xda>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2210      	movs	r2, #16
 80030ee:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2270      	movs	r2, #112	; 0x70
 80030f4:	2100      	movs	r1, #0
 80030f6:	5499      	strb	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	2220      	movs	r2, #32
 80030fc:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	e01f      	b.n	8003142 <HAL_UART_Receive_DMA+0x11a>
      }
    }
    __HAL_UNLOCK(huart);
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2270      	movs	r2, #112	; 0x70
 8003106:	2100      	movs	r1, #0
 8003108:	5499      	strb	r1, [r3, r2]

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	681a      	ldr	r2, [r3, #0]
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	2180      	movs	r1, #128	; 0x80
 8003116:	0049      	lsls	r1, r1, #1
 8003118:	430a      	orrs	r2, r1
 800311a:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	689a      	ldr	r2, [r3, #8]
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	2101      	movs	r1, #1
 8003128:	430a      	orrs	r2, r1
 800312a:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	689a      	ldr	r2, [r3, #8]
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	2140      	movs	r1, #64	; 0x40
 8003138:	430a      	orrs	r2, r1
 800313a:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 800313c:	2300      	movs	r3, #0
 800313e:	e000      	b.n	8003142 <HAL_UART_Receive_DMA+0x11a>
  }
  else
  {
    return HAL_BUSY;
 8003140:	2302      	movs	r3, #2
  }
}
 8003142:	0018      	movs	r0, r3
 8003144:	46bd      	mov	sp, r7
 8003146:	b004      	add	sp, #16
 8003148:	bd80      	pop	{r7, pc}
 800314a:	46c0      	nop			; (mov r8, r8)
 800314c:	08003a65 	.word	0x08003a65
 8003150:	08003acd 	.word	0x08003acd
 8003154:	08003aeb 	.word	0x08003aeb

08003158 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b088      	sub	sp, #32
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	69db      	ldr	r3, [r3, #28]
 8003166:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003178:	69fb      	ldr	r3, [r7, #28]
 800317a:	4a93      	ldr	r2, [pc, #588]	; (80033c8 <HAL_UART_IRQHandler+0x270>)
 800317c:	4013      	ands	r3, r2
 800317e:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d112      	bne.n	80031ac <HAL_UART_IRQHandler+0x54>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003186:	69fb      	ldr	r3, [r7, #28]
 8003188:	2220      	movs	r2, #32
 800318a:	4013      	ands	r3, r2
 800318c:	d00e      	beq.n	80031ac <HAL_UART_IRQHandler+0x54>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800318e:	69bb      	ldr	r3, [r7, #24]
 8003190:	2220      	movs	r2, #32
 8003192:	4013      	ands	r3, r2
 8003194:	d00a      	beq.n	80031ac <HAL_UART_IRQHandler+0x54>
    {
      if (huart->RxISR != NULL)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800319a:	2b00      	cmp	r3, #0
 800319c:	d100      	bne.n	80031a0 <HAL_UART_IRQHandler+0x48>
 800319e:	e10b      	b.n	80033b8 <HAL_UART_IRQHandler+0x260>
      {
        huart->RxISR(huart);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031a4:	687a      	ldr	r2, [r7, #4]
 80031a6:	0010      	movs	r0, r2
 80031a8:	4798      	blx	r3
      }
      return;
 80031aa:	e105      	b.n	80033b8 <HAL_UART_IRQHandler+0x260>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d100      	bne.n	80031b4 <HAL_UART_IRQHandler+0x5c>
 80031b2:	e0cd      	b.n	8003350 <HAL_UART_IRQHandler+0x1f8>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	2201      	movs	r2, #1
 80031b8:	4013      	ands	r3, r2
 80031ba:	d105      	bne.n	80031c8 <HAL_UART_IRQHandler+0x70>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 80031bc:	69ba      	ldr	r2, [r7, #24]
 80031be:	2390      	movs	r3, #144	; 0x90
 80031c0:	005b      	lsls	r3, r3, #1
 80031c2:	4013      	ands	r3, r2
 80031c4:	d100      	bne.n	80031c8 <HAL_UART_IRQHandler+0x70>
 80031c6:	e0c3      	b.n	8003350 <HAL_UART_IRQHandler+0x1f8>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80031c8:	69fb      	ldr	r3, [r7, #28]
 80031ca:	2201      	movs	r2, #1
 80031cc:	4013      	ands	r3, r2
 80031ce:	d00e      	beq.n	80031ee <HAL_UART_IRQHandler+0x96>
 80031d0:	69ba      	ldr	r2, [r7, #24]
 80031d2:	2380      	movs	r3, #128	; 0x80
 80031d4:	005b      	lsls	r3, r3, #1
 80031d6:	4013      	ands	r3, r2
 80031d8:	d009      	beq.n	80031ee <HAL_UART_IRQHandler+0x96>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	2201      	movs	r2, #1
 80031e0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80031e6:	2201      	movs	r2, #1
 80031e8:	431a      	orrs	r2, r3
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80031ee:	69fb      	ldr	r3, [r7, #28]
 80031f0:	2202      	movs	r2, #2
 80031f2:	4013      	ands	r3, r2
 80031f4:	d00d      	beq.n	8003212 <HAL_UART_IRQHandler+0xba>
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	2201      	movs	r2, #1
 80031fa:	4013      	ands	r3, r2
 80031fc:	d009      	beq.n	8003212 <HAL_UART_IRQHandler+0xba>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	2202      	movs	r2, #2
 8003204:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800320a:	2204      	movs	r2, #4
 800320c:	431a      	orrs	r2, r3
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003212:	69fb      	ldr	r3, [r7, #28]
 8003214:	2204      	movs	r2, #4
 8003216:	4013      	ands	r3, r2
 8003218:	d00d      	beq.n	8003236 <HAL_UART_IRQHandler+0xde>
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	2201      	movs	r2, #1
 800321e:	4013      	ands	r3, r2
 8003220:	d009      	beq.n	8003236 <HAL_UART_IRQHandler+0xde>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	2204      	movs	r2, #4
 8003228:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800322e:	2202      	movs	r2, #2
 8003230:	431a      	orrs	r2, r3
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003236:	69fb      	ldr	r3, [r7, #28]
 8003238:	2208      	movs	r2, #8
 800323a:	4013      	ands	r3, r2
 800323c:	d011      	beq.n	8003262 <HAL_UART_IRQHandler+0x10a>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800323e:	69bb      	ldr	r3, [r7, #24]
 8003240:	2220      	movs	r2, #32
 8003242:	4013      	ands	r3, r2
 8003244:	d103      	bne.n	800324e <HAL_UART_IRQHandler+0xf6>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	2201      	movs	r2, #1
 800324a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800324c:	d009      	beq.n	8003262 <HAL_UART_IRQHandler+0x10a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	2208      	movs	r2, #8
 8003254:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800325a:	2208      	movs	r2, #8
 800325c:	431a      	orrs	r2, r3
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003262:	69fa      	ldr	r2, [r7, #28]
 8003264:	2380      	movs	r3, #128	; 0x80
 8003266:	011b      	lsls	r3, r3, #4
 8003268:	4013      	ands	r3, r2
 800326a:	d00f      	beq.n	800328c <HAL_UART_IRQHandler+0x134>
 800326c:	69ba      	ldr	r2, [r7, #24]
 800326e:	2380      	movs	r3, #128	; 0x80
 8003270:	04db      	lsls	r3, r3, #19
 8003272:	4013      	ands	r3, r2
 8003274:	d00a      	beq.n	800328c <HAL_UART_IRQHandler+0x134>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	2280      	movs	r2, #128	; 0x80
 800327c:	0112      	lsls	r2, r2, #4
 800327e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003284:	2220      	movs	r2, #32
 8003286:	431a      	orrs	r2, r3
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003290:	2b00      	cmp	r3, #0
 8003292:	d100      	bne.n	8003296 <HAL_UART_IRQHandler+0x13e>
 8003294:	e092      	b.n	80033bc <HAL_UART_IRQHandler+0x264>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003296:	69fb      	ldr	r3, [r7, #28]
 8003298:	2220      	movs	r2, #32
 800329a:	4013      	ands	r3, r2
 800329c:	d00c      	beq.n	80032b8 <HAL_UART_IRQHandler+0x160>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800329e:	69bb      	ldr	r3, [r7, #24]
 80032a0:	2220      	movs	r2, #32
 80032a2:	4013      	ands	r3, r2
 80032a4:	d008      	beq.n	80032b8 <HAL_UART_IRQHandler+0x160>
      {
        if (huart->RxISR != NULL)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d004      	beq.n	80032b8 <HAL_UART_IRQHandler+0x160>
        {
          huart->RxISR(huart);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032b2:	687a      	ldr	r2, [r7, #4]
 80032b4:	0010      	movs	r0, r2
 80032b6:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80032bc:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	2240      	movs	r2, #64	; 0x40
 80032c6:	4013      	ands	r3, r2
 80032c8:	2b40      	cmp	r3, #64	; 0x40
 80032ca:	d003      	beq.n	80032d4 <HAL_UART_IRQHandler+0x17c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	2228      	movs	r2, #40	; 0x28
 80032d0:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80032d2:	d033      	beq.n	800333c <HAL_UART_IRQHandler+0x1e4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	0018      	movs	r0, r3
 80032d8:	f000 fba4 	bl	8003a24 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	2240      	movs	r2, #64	; 0x40
 80032e4:	4013      	ands	r3, r2
 80032e6:	2b40      	cmp	r3, #64	; 0x40
 80032e8:	d123      	bne.n	8003332 <HAL_UART_IRQHandler+0x1da>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	689a      	ldr	r2, [r3, #8]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	2140      	movs	r1, #64	; 0x40
 80032f6:	438a      	bics	r2, r1
 80032f8:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d012      	beq.n	8003328 <HAL_UART_IRQHandler+0x1d0>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003306:	4a31      	ldr	r2, [pc, #196]	; (80033cc <HAL_UART_IRQHandler+0x274>)
 8003308:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800330e:	0018      	movs	r0, r3
 8003310:	f7fe f8c0 	bl	8001494 <HAL_DMA_Abort_IT>
 8003314:	1e03      	subs	r3, r0, #0
 8003316:	d019      	beq.n	800334c <HAL_UART_IRQHandler+0x1f4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800331c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003322:	0018      	movs	r0, r3
 8003324:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003326:	e011      	b.n	800334c <HAL_UART_IRQHandler+0x1f4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	0018      	movs	r0, r3
 800332c:	f000 f860 	bl	80033f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003330:	e00c      	b.n	800334c <HAL_UART_IRQHandler+0x1f4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	0018      	movs	r0, r3
 8003336:	f000 f85b 	bl	80033f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800333a:	e007      	b.n	800334c <HAL_UART_IRQHandler+0x1f4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	0018      	movs	r0, r3
 8003340:	f000 f856 	bl	80033f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2200      	movs	r2, #0
 8003348:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 800334a:	e037      	b.n	80033bc <HAL_UART_IRQHandler+0x264>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800334c:	46c0      	nop			; (mov r8, r8)
    return;
 800334e:	e035      	b.n	80033bc <HAL_UART_IRQHandler+0x264>

  } /* End if some error occurs */
#if defined(USART_CR1_UESM)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003350:	69fa      	ldr	r2, [r7, #28]
 8003352:	2380      	movs	r3, #128	; 0x80
 8003354:	035b      	lsls	r3, r3, #13
 8003356:	4013      	ands	r3, r2
 8003358:	d00e      	beq.n	8003378 <HAL_UART_IRQHandler+0x220>
 800335a:	697a      	ldr	r2, [r7, #20]
 800335c:	2380      	movs	r3, #128	; 0x80
 800335e:	03db      	lsls	r3, r3, #15
 8003360:	4013      	ands	r3, r2
 8003362:	d009      	beq.n	8003378 <HAL_UART_IRQHandler+0x220>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	2280      	movs	r2, #128	; 0x80
 800336a:	0352      	lsls	r2, r2, #13
 800336c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	0018      	movs	r0, r3
 8003372:	f000 fc2a 	bl	8003bca <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003376:	e024      	b.n	80033c2 <HAL_UART_IRQHandler+0x26a>
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003378:	69fb      	ldr	r3, [r7, #28]
 800337a:	2280      	movs	r2, #128	; 0x80
 800337c:	4013      	ands	r3, r2
 800337e:	d00d      	beq.n	800339c <HAL_UART_IRQHandler+0x244>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003380:	69bb      	ldr	r3, [r7, #24]
 8003382:	2280      	movs	r2, #128	; 0x80
 8003384:	4013      	ands	r3, r2
 8003386:	d009      	beq.n	800339c <HAL_UART_IRQHandler+0x244>
  {
    if (huart->TxISR != NULL)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800338c:	2b00      	cmp	r3, #0
 800338e:	d017      	beq.n	80033c0 <HAL_UART_IRQHandler+0x268>
    {
      huart->TxISR(huart);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003394:	687a      	ldr	r2, [r7, #4]
 8003396:	0010      	movs	r0, r2
 8003398:	4798      	blx	r3
    }
    return;
 800339a:	e011      	b.n	80033c0 <HAL_UART_IRQHandler+0x268>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800339c:	69fb      	ldr	r3, [r7, #28]
 800339e:	2240      	movs	r2, #64	; 0x40
 80033a0:	4013      	ands	r3, r2
 80033a2:	d00e      	beq.n	80033c2 <HAL_UART_IRQHandler+0x26a>
 80033a4:	69bb      	ldr	r3, [r7, #24]
 80033a6:	2240      	movs	r2, #64	; 0x40
 80033a8:	4013      	ands	r3, r2
 80033aa:	d00a      	beq.n	80033c2 <HAL_UART_IRQHandler+0x26a>
  {
    UART_EndTransmit_IT(huart);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	0018      	movs	r0, r3
 80033b0:	f000 fbf1 	bl	8003b96 <UART_EndTransmit_IT>
    return;
 80033b4:	46c0      	nop			; (mov r8, r8)
 80033b6:	e004      	b.n	80033c2 <HAL_UART_IRQHandler+0x26a>
      return;
 80033b8:	46c0      	nop			; (mov r8, r8)
 80033ba:	e002      	b.n	80033c2 <HAL_UART_IRQHandler+0x26a>
    return;
 80033bc:	46c0      	nop			; (mov r8, r8)
 80033be:	e000      	b.n	80033c2 <HAL_UART_IRQHandler+0x26a>
    return;
 80033c0:	46c0      	nop			; (mov r8, r8)
  }

}
 80033c2:	46bd      	mov	sp, r7
 80033c4:	b008      	add	sp, #32
 80033c6:	bd80      	pop	{r7, pc}
 80033c8:	0000080f 	.word	0x0000080f
 80033cc:	08003b69 	.word	0x08003b69

080033d0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b082      	sub	sp, #8
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80033d8:	46c0      	nop			; (mov r8, r8)
 80033da:	46bd      	mov	sp, r7
 80033dc:	b002      	add	sp, #8
 80033de:	bd80      	pop	{r7, pc}

080033e0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b082      	sub	sp, #8
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80033e8:	46c0      	nop			; (mov r8, r8)
 80033ea:	46bd      	mov	sp, r7
 80033ec:	b002      	add	sp, #8
 80033ee:	bd80      	pop	{r7, pc}

080033f0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b082      	sub	sp, #8
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80033f8:	46c0      	nop			; (mov r8, r8)
 80033fa:	46bd      	mov	sp, r7
 80033fc:	b002      	add	sp, #8
 80033fe:	bd80      	pop	{r7, pc}

08003400 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b088      	sub	sp, #32
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8003408:	2300      	movs	r3, #0
 800340a:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800340c:	2317      	movs	r3, #23
 800340e:	18fb      	adds	r3, r7, r3
 8003410:	2200      	movs	r2, #0
 8003412:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	689a      	ldr	r2, [r3, #8]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	691b      	ldr	r3, [r3, #16]
 800341c:	431a      	orrs	r2, r3
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	695b      	ldr	r3, [r3, #20]
 8003422:	431a      	orrs	r2, r3
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	69db      	ldr	r3, [r3, #28]
 8003428:	4313      	orrs	r3, r2
 800342a:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4aad      	ldr	r2, [pc, #692]	; (80036e8 <UART_SetConfig+0x2e8>)
 8003434:	4013      	ands	r3, r2
 8003436:	0019      	movs	r1, r3
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	693a      	ldr	r2, [r7, #16]
 800343e:	430a      	orrs	r2, r1
 8003440:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	4aa8      	ldr	r2, [pc, #672]	; (80036ec <UART_SetConfig+0x2ec>)
 800344a:	4013      	ands	r3, r2
 800344c:	0019      	movs	r1, r3
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	68da      	ldr	r2, [r3, #12]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	430a      	orrs	r2, r1
 8003458:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	699b      	ldr	r3, [r3, #24]
 800345e:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6a1b      	ldr	r3, [r3, #32]
 8003464:	693a      	ldr	r2, [r7, #16]
 8003466:	4313      	orrs	r3, r2
 8003468:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	4a9f      	ldr	r2, [pc, #636]	; (80036f0 <UART_SetConfig+0x2f0>)
 8003472:	4013      	ands	r3, r2
 8003474:	0019      	movs	r1, r3
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	693a      	ldr	r2, [r7, #16]
 800347c:	430a      	orrs	r2, r1
 800347e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a9b      	ldr	r2, [pc, #620]	; (80036f4 <UART_SetConfig+0x2f4>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d125      	bne.n	80034d6 <UART_SetConfig+0xd6>
 800348a:	4b9b      	ldr	r3, [pc, #620]	; (80036f8 <UART_SetConfig+0x2f8>)
 800348c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800348e:	2203      	movs	r2, #3
 8003490:	4013      	ands	r3, r2
 8003492:	2b01      	cmp	r3, #1
 8003494:	d00f      	beq.n	80034b6 <UART_SetConfig+0xb6>
 8003496:	d304      	bcc.n	80034a2 <UART_SetConfig+0xa2>
 8003498:	2b02      	cmp	r3, #2
 800349a:	d011      	beq.n	80034c0 <UART_SetConfig+0xc0>
 800349c:	2b03      	cmp	r3, #3
 800349e:	d005      	beq.n	80034ac <UART_SetConfig+0xac>
 80034a0:	e013      	b.n	80034ca <UART_SetConfig+0xca>
 80034a2:	231f      	movs	r3, #31
 80034a4:	18fb      	adds	r3, r7, r3
 80034a6:	2200      	movs	r2, #0
 80034a8:	701a      	strb	r2, [r3, #0]
 80034aa:	e022      	b.n	80034f2 <UART_SetConfig+0xf2>
 80034ac:	231f      	movs	r3, #31
 80034ae:	18fb      	adds	r3, r7, r3
 80034b0:	2202      	movs	r2, #2
 80034b2:	701a      	strb	r2, [r3, #0]
 80034b4:	e01d      	b.n	80034f2 <UART_SetConfig+0xf2>
 80034b6:	231f      	movs	r3, #31
 80034b8:	18fb      	adds	r3, r7, r3
 80034ba:	2204      	movs	r2, #4
 80034bc:	701a      	strb	r2, [r3, #0]
 80034be:	e018      	b.n	80034f2 <UART_SetConfig+0xf2>
 80034c0:	231f      	movs	r3, #31
 80034c2:	18fb      	adds	r3, r7, r3
 80034c4:	2208      	movs	r2, #8
 80034c6:	701a      	strb	r2, [r3, #0]
 80034c8:	e013      	b.n	80034f2 <UART_SetConfig+0xf2>
 80034ca:	231f      	movs	r3, #31
 80034cc:	18fb      	adds	r3, r7, r3
 80034ce:	2210      	movs	r2, #16
 80034d0:	701a      	strb	r2, [r3, #0]
 80034d2:	46c0      	nop			; (mov r8, r8)
 80034d4:	e00d      	b.n	80034f2 <UART_SetConfig+0xf2>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a88      	ldr	r2, [pc, #544]	; (80036fc <UART_SetConfig+0x2fc>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d104      	bne.n	80034ea <UART_SetConfig+0xea>
 80034e0:	231f      	movs	r3, #31
 80034e2:	18fb      	adds	r3, r7, r3
 80034e4:	2200      	movs	r2, #0
 80034e6:	701a      	strb	r2, [r3, #0]
 80034e8:	e003      	b.n	80034f2 <UART_SetConfig+0xf2>
 80034ea:	231f      	movs	r3, #31
 80034ec:	18fb      	adds	r3, r7, r3
 80034ee:	2210      	movs	r2, #16
 80034f0:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	69da      	ldr	r2, [r3, #28]
 80034f6:	2380      	movs	r3, #128	; 0x80
 80034f8:	021b      	lsls	r3, r3, #8
 80034fa:	429a      	cmp	r2, r3
 80034fc:	d000      	beq.n	8003500 <UART_SetConfig+0x100>
 80034fe:	e07d      	b.n	80035fc <UART_SetConfig+0x1fc>
  {
    switch (clocksource)
 8003500:	231f      	movs	r3, #31
 8003502:	18fb      	adds	r3, r7, r3
 8003504:	781b      	ldrb	r3, [r3, #0]
 8003506:	2b02      	cmp	r3, #2
 8003508:	d01c      	beq.n	8003544 <UART_SetConfig+0x144>
 800350a:	dc02      	bgt.n	8003512 <UART_SetConfig+0x112>
 800350c:	2b00      	cmp	r3, #0
 800350e:	d005      	beq.n	800351c <UART_SetConfig+0x11c>
 8003510:	e04b      	b.n	80035aa <UART_SetConfig+0x1aa>
 8003512:	2b04      	cmp	r3, #4
 8003514:	d025      	beq.n	8003562 <UART_SetConfig+0x162>
 8003516:	2b08      	cmp	r3, #8
 8003518:	d037      	beq.n	800358a <UART_SetConfig+0x18a>
 800351a:	e046      	b.n	80035aa <UART_SetConfig+0x1aa>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800351c:	f7ff fc3c 	bl	8002d98 <HAL_RCC_GetPCLK1Freq>
 8003520:	0003      	movs	r3, r0
 8003522:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	005a      	lsls	r2, r3, #1
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	085b      	lsrs	r3, r3, #1
 800352e:	18d2      	adds	r2, r2, r3
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	0019      	movs	r1, r3
 8003536:	0010      	movs	r0, r2
 8003538:	f7fc fde6 	bl	8000108 <__udivsi3>
 800353c:	0003      	movs	r3, r0
 800353e:	b29b      	uxth	r3, r3
 8003540:	61bb      	str	r3, [r7, #24]
        break;
 8003542:	e037      	b.n	80035b4 <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	085b      	lsrs	r3, r3, #1
 800354a:	4a6d      	ldr	r2, [pc, #436]	; (8003700 <UART_SetConfig+0x300>)
 800354c:	189a      	adds	r2, r3, r2
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	0019      	movs	r1, r3
 8003554:	0010      	movs	r0, r2
 8003556:	f7fc fdd7 	bl	8000108 <__udivsi3>
 800355a:	0003      	movs	r3, r0
 800355c:	b29b      	uxth	r3, r3
 800355e:	61bb      	str	r3, [r7, #24]
        break;
 8003560:	e028      	b.n	80035b4 <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003562:	f7ff fbab 	bl	8002cbc <HAL_RCC_GetSysClockFreq>
 8003566:	0003      	movs	r3, r0
 8003568:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	005a      	lsls	r2, r3, #1
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	085b      	lsrs	r3, r3, #1
 8003574:	18d2      	adds	r2, r2, r3
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	0019      	movs	r1, r3
 800357c:	0010      	movs	r0, r2
 800357e:	f7fc fdc3 	bl	8000108 <__udivsi3>
 8003582:	0003      	movs	r3, r0
 8003584:	b29b      	uxth	r3, r3
 8003586:	61bb      	str	r3, [r7, #24]
        break;
 8003588:	e014      	b.n	80035b4 <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	085b      	lsrs	r3, r3, #1
 8003590:	2280      	movs	r2, #128	; 0x80
 8003592:	0252      	lsls	r2, r2, #9
 8003594:	189a      	adds	r2, r3, r2
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	0019      	movs	r1, r3
 800359c:	0010      	movs	r0, r2
 800359e:	f7fc fdb3 	bl	8000108 <__udivsi3>
 80035a2:	0003      	movs	r3, r0
 80035a4:	b29b      	uxth	r3, r3
 80035a6:	61bb      	str	r3, [r7, #24]
        break;
 80035a8:	e004      	b.n	80035b4 <UART_SetConfig+0x1b4>
      default:
        ret = HAL_ERROR;
 80035aa:	2317      	movs	r3, #23
 80035ac:	18fb      	adds	r3, r7, r3
 80035ae:	2201      	movs	r2, #1
 80035b0:	701a      	strb	r2, [r3, #0]
        break;
 80035b2:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80035b4:	69bb      	ldr	r3, [r7, #24]
 80035b6:	2b0f      	cmp	r3, #15
 80035b8:	d91b      	bls.n	80035f2 <UART_SetConfig+0x1f2>
 80035ba:	69bb      	ldr	r3, [r7, #24]
 80035bc:	4a51      	ldr	r2, [pc, #324]	; (8003704 <UART_SetConfig+0x304>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d817      	bhi.n	80035f2 <UART_SetConfig+0x1f2>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80035c2:	69bb      	ldr	r3, [r7, #24]
 80035c4:	b29a      	uxth	r2, r3
 80035c6:	200a      	movs	r0, #10
 80035c8:	183b      	adds	r3, r7, r0
 80035ca:	210f      	movs	r1, #15
 80035cc:	438a      	bics	r2, r1
 80035ce:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80035d0:	69bb      	ldr	r3, [r7, #24]
 80035d2:	085b      	lsrs	r3, r3, #1
 80035d4:	b29b      	uxth	r3, r3
 80035d6:	2207      	movs	r2, #7
 80035d8:	4013      	ands	r3, r2
 80035da:	b299      	uxth	r1, r3
 80035dc:	183b      	adds	r3, r7, r0
 80035de:	183a      	adds	r2, r7, r0
 80035e0:	8812      	ldrh	r2, [r2, #0]
 80035e2:	430a      	orrs	r2, r1
 80035e4:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	183a      	adds	r2, r7, r0
 80035ec:	8812      	ldrh	r2, [r2, #0]
 80035ee:	60da      	str	r2, [r3, #12]
 80035f0:	e06c      	b.n	80036cc <UART_SetConfig+0x2cc>
    }
    else
    {
      ret = HAL_ERROR;
 80035f2:	2317      	movs	r3, #23
 80035f4:	18fb      	adds	r3, r7, r3
 80035f6:	2201      	movs	r2, #1
 80035f8:	701a      	strb	r2, [r3, #0]
 80035fa:	e067      	b.n	80036cc <UART_SetConfig+0x2cc>
    }
  }
  else
  {
    switch (clocksource)
 80035fc:	231f      	movs	r3, #31
 80035fe:	18fb      	adds	r3, r7, r3
 8003600:	781b      	ldrb	r3, [r3, #0]
 8003602:	2b02      	cmp	r3, #2
 8003604:	d01b      	beq.n	800363e <UART_SetConfig+0x23e>
 8003606:	dc02      	bgt.n	800360e <UART_SetConfig+0x20e>
 8003608:	2b00      	cmp	r3, #0
 800360a:	d005      	beq.n	8003618 <UART_SetConfig+0x218>
 800360c:	e049      	b.n	80036a2 <UART_SetConfig+0x2a2>
 800360e:	2b04      	cmp	r3, #4
 8003610:	d024      	beq.n	800365c <UART_SetConfig+0x25c>
 8003612:	2b08      	cmp	r3, #8
 8003614:	d035      	beq.n	8003682 <UART_SetConfig+0x282>
 8003616:	e044      	b.n	80036a2 <UART_SetConfig+0x2a2>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003618:	f7ff fbbe 	bl	8002d98 <HAL_RCC_GetPCLK1Freq>
 800361c:	0003      	movs	r3, r0
 800361e:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	085a      	lsrs	r2, r3, #1
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	18d2      	adds	r2, r2, r3
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	0019      	movs	r1, r3
 8003630:	0010      	movs	r0, r2
 8003632:	f7fc fd69 	bl	8000108 <__udivsi3>
 8003636:	0003      	movs	r3, r0
 8003638:	b29b      	uxth	r3, r3
 800363a:	61bb      	str	r3, [r7, #24]
        break;
 800363c:	e036      	b.n	80036ac <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	085b      	lsrs	r3, r3, #1
 8003644:	4a30      	ldr	r2, [pc, #192]	; (8003708 <UART_SetConfig+0x308>)
 8003646:	189a      	adds	r2, r3, r2
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	0019      	movs	r1, r3
 800364e:	0010      	movs	r0, r2
 8003650:	f7fc fd5a 	bl	8000108 <__udivsi3>
 8003654:	0003      	movs	r3, r0
 8003656:	b29b      	uxth	r3, r3
 8003658:	61bb      	str	r3, [r7, #24]
        break;
 800365a:	e027      	b.n	80036ac <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800365c:	f7ff fb2e 	bl	8002cbc <HAL_RCC_GetSysClockFreq>
 8003660:	0003      	movs	r3, r0
 8003662:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	085a      	lsrs	r2, r3, #1
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	18d2      	adds	r2, r2, r3
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	0019      	movs	r1, r3
 8003674:	0010      	movs	r0, r2
 8003676:	f7fc fd47 	bl	8000108 <__udivsi3>
 800367a:	0003      	movs	r3, r0
 800367c:	b29b      	uxth	r3, r3
 800367e:	61bb      	str	r3, [r7, #24]
        break;
 8003680:	e014      	b.n	80036ac <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	085b      	lsrs	r3, r3, #1
 8003688:	2280      	movs	r2, #128	; 0x80
 800368a:	0212      	lsls	r2, r2, #8
 800368c:	189a      	adds	r2, r3, r2
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	0019      	movs	r1, r3
 8003694:	0010      	movs	r0, r2
 8003696:	f7fc fd37 	bl	8000108 <__udivsi3>
 800369a:	0003      	movs	r3, r0
 800369c:	b29b      	uxth	r3, r3
 800369e:	61bb      	str	r3, [r7, #24]
        break;
 80036a0:	e004      	b.n	80036ac <UART_SetConfig+0x2ac>
      default:
        ret = HAL_ERROR;
 80036a2:	2317      	movs	r3, #23
 80036a4:	18fb      	adds	r3, r7, r3
 80036a6:	2201      	movs	r2, #1
 80036a8:	701a      	strb	r2, [r3, #0]
        break;
 80036aa:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80036ac:	69bb      	ldr	r3, [r7, #24]
 80036ae:	2b0f      	cmp	r3, #15
 80036b0:	d908      	bls.n	80036c4 <UART_SetConfig+0x2c4>
 80036b2:	69bb      	ldr	r3, [r7, #24]
 80036b4:	4a13      	ldr	r2, [pc, #76]	; (8003704 <UART_SetConfig+0x304>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d804      	bhi.n	80036c4 <UART_SetConfig+0x2c4>
    {
      huart->Instance->BRR = usartdiv;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	69ba      	ldr	r2, [r7, #24]
 80036c0:	60da      	str	r2, [r3, #12]
 80036c2:	e003      	b.n	80036cc <UART_SetConfig+0x2cc>
    }
    else
    {
      ret = HAL_ERROR;
 80036c4:	2317      	movs	r3, #23
 80036c6:	18fb      	adds	r3, r7, r3
 80036c8:	2201      	movs	r2, #1
 80036ca:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2200      	movs	r2, #0
 80036d0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2200      	movs	r2, #0
 80036d6:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80036d8:	2317      	movs	r3, #23
 80036da:	18fb      	adds	r3, r7, r3
 80036dc:	781b      	ldrb	r3, [r3, #0]
}
 80036de:	0018      	movs	r0, r3
 80036e0:	46bd      	mov	sp, r7
 80036e2:	b008      	add	sp, #32
 80036e4:	bd80      	pop	{r7, pc}
 80036e6:	46c0      	nop			; (mov r8, r8)
 80036e8:	ffff69f3 	.word	0xffff69f3
 80036ec:	ffffcfff 	.word	0xffffcfff
 80036f0:	fffff4ff 	.word	0xfffff4ff
 80036f4:	40013800 	.word	0x40013800
 80036f8:	40021000 	.word	0x40021000
 80036fc:	40004400 	.word	0x40004400
 8003700:	00f42400 	.word	0x00f42400
 8003704:	0000ffff 	.word	0x0000ffff
 8003708:	007a1200 	.word	0x007a1200

0800370c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b082      	sub	sp, #8
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003718:	2201      	movs	r2, #1
 800371a:	4013      	ands	r3, r2
 800371c:	d00b      	beq.n	8003736 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	4a4a      	ldr	r2, [pc, #296]	; (8003850 <UART_AdvFeatureConfig+0x144>)
 8003726:	4013      	ands	r3, r2
 8003728:	0019      	movs	r1, r3
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	430a      	orrs	r2, r1
 8003734:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800373a:	2202      	movs	r2, #2
 800373c:	4013      	ands	r3, r2
 800373e:	d00b      	beq.n	8003758 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	4a43      	ldr	r2, [pc, #268]	; (8003854 <UART_AdvFeatureConfig+0x148>)
 8003748:	4013      	ands	r3, r2
 800374a:	0019      	movs	r1, r3
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	430a      	orrs	r2, r1
 8003756:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800375c:	2204      	movs	r2, #4
 800375e:	4013      	ands	r3, r2
 8003760:	d00b      	beq.n	800377a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	4a3b      	ldr	r2, [pc, #236]	; (8003858 <UART_AdvFeatureConfig+0x14c>)
 800376a:	4013      	ands	r3, r2
 800376c:	0019      	movs	r1, r3
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	430a      	orrs	r2, r1
 8003778:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800377e:	2208      	movs	r2, #8
 8003780:	4013      	ands	r3, r2
 8003782:	d00b      	beq.n	800379c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	4a34      	ldr	r2, [pc, #208]	; (800385c <UART_AdvFeatureConfig+0x150>)
 800378c:	4013      	ands	r3, r2
 800378e:	0019      	movs	r1, r3
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	430a      	orrs	r2, r1
 800379a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a0:	2210      	movs	r2, #16
 80037a2:	4013      	ands	r3, r2
 80037a4:	d00b      	beq.n	80037be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	4a2c      	ldr	r2, [pc, #176]	; (8003860 <UART_AdvFeatureConfig+0x154>)
 80037ae:	4013      	ands	r3, r2
 80037b0:	0019      	movs	r1, r3
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	430a      	orrs	r2, r1
 80037bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c2:	2220      	movs	r2, #32
 80037c4:	4013      	ands	r3, r2
 80037c6:	d00b      	beq.n	80037e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	4a25      	ldr	r2, [pc, #148]	; (8003864 <UART_AdvFeatureConfig+0x158>)
 80037d0:	4013      	ands	r3, r2
 80037d2:	0019      	movs	r1, r3
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	430a      	orrs	r2, r1
 80037de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e4:	2240      	movs	r2, #64	; 0x40
 80037e6:	4013      	ands	r3, r2
 80037e8:	d01d      	beq.n	8003826 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	4a1d      	ldr	r2, [pc, #116]	; (8003868 <UART_AdvFeatureConfig+0x15c>)
 80037f2:	4013      	ands	r3, r2
 80037f4:	0019      	movs	r1, r3
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	430a      	orrs	r2, r1
 8003800:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003806:	2380      	movs	r3, #128	; 0x80
 8003808:	035b      	lsls	r3, r3, #13
 800380a:	429a      	cmp	r2, r3
 800380c:	d10b      	bne.n	8003826 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	4a15      	ldr	r2, [pc, #84]	; (800386c <UART_AdvFeatureConfig+0x160>)
 8003816:	4013      	ands	r3, r2
 8003818:	0019      	movs	r1, r3
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	430a      	orrs	r2, r1
 8003824:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800382a:	2280      	movs	r2, #128	; 0x80
 800382c:	4013      	ands	r3, r2
 800382e:	d00b      	beq.n	8003848 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	4a0e      	ldr	r2, [pc, #56]	; (8003870 <UART_AdvFeatureConfig+0x164>)
 8003838:	4013      	ands	r3, r2
 800383a:	0019      	movs	r1, r3
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	430a      	orrs	r2, r1
 8003846:	605a      	str	r2, [r3, #4]
  }
}
 8003848:	46c0      	nop			; (mov r8, r8)
 800384a:	46bd      	mov	sp, r7
 800384c:	b002      	add	sp, #8
 800384e:	bd80      	pop	{r7, pc}
 8003850:	fffdffff 	.word	0xfffdffff
 8003854:	fffeffff 	.word	0xfffeffff
 8003858:	fffbffff 	.word	0xfffbffff
 800385c:	ffff7fff 	.word	0xffff7fff
 8003860:	ffffefff 	.word	0xffffefff
 8003864:	ffffdfff 	.word	0xffffdfff
 8003868:	ffefffff 	.word	0xffefffff
 800386c:	ff9fffff 	.word	0xff9fffff
 8003870:	fff7ffff 	.word	0xfff7ffff

08003874 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b086      	sub	sp, #24
 8003878:	af02      	add	r7, sp, #8
 800387a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2200      	movs	r2, #0
 8003880:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003882:	f7fd fc4f 	bl	8001124 <HAL_GetTick>
 8003886:	0003      	movs	r3, r0
 8003888:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	2208      	movs	r2, #8
 8003892:	4013      	ands	r3, r2
 8003894:	2b08      	cmp	r3, #8
 8003896:	d10d      	bne.n	80038b4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003898:	68fa      	ldr	r2, [r7, #12]
 800389a:	2380      	movs	r3, #128	; 0x80
 800389c:	0399      	lsls	r1, r3, #14
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	4b16      	ldr	r3, [pc, #88]	; (80038fc <UART_CheckIdleState+0x88>)
 80038a2:	9300      	str	r3, [sp, #0]
 80038a4:	0013      	movs	r3, r2
 80038a6:	2200      	movs	r2, #0
 80038a8:	f000 f82a 	bl	8003900 <UART_WaitOnFlagUntilTimeout>
 80038ac:	1e03      	subs	r3, r0, #0
 80038ae:	d001      	beq.n	80038b4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80038b0:	2303      	movs	r3, #3
 80038b2:	e01f      	b.n	80038f4 <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	2204      	movs	r2, #4
 80038bc:	4013      	ands	r3, r2
 80038be:	2b04      	cmp	r3, #4
 80038c0:	d10d      	bne.n	80038de <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80038c2:	68fa      	ldr	r2, [r7, #12]
 80038c4:	2380      	movs	r3, #128	; 0x80
 80038c6:	03d9      	lsls	r1, r3, #15
 80038c8:	6878      	ldr	r0, [r7, #4]
 80038ca:	4b0c      	ldr	r3, [pc, #48]	; (80038fc <UART_CheckIdleState+0x88>)
 80038cc:	9300      	str	r3, [sp, #0]
 80038ce:	0013      	movs	r3, r2
 80038d0:	2200      	movs	r2, #0
 80038d2:	f000 f815 	bl	8003900 <UART_WaitOnFlagUntilTimeout>
 80038d6:	1e03      	subs	r3, r0, #0
 80038d8:	d001      	beq.n	80038de <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80038da:	2303      	movs	r3, #3
 80038dc:	e00a      	b.n	80038f4 <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2220      	movs	r2, #32
 80038e2:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2220      	movs	r2, #32
 80038e8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2270      	movs	r2, #112	; 0x70
 80038ee:	2100      	movs	r1, #0
 80038f0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80038f2:	2300      	movs	r3, #0
}
 80038f4:	0018      	movs	r0, r3
 80038f6:	46bd      	mov	sp, r7
 80038f8:	b004      	add	sp, #16
 80038fa:	bd80      	pop	{r7, pc}
 80038fc:	01ffffff 	.word	0x01ffffff

08003900 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b084      	sub	sp, #16
 8003904:	af00      	add	r7, sp, #0
 8003906:	60f8      	str	r0, [r7, #12]
 8003908:	60b9      	str	r1, [r7, #8]
 800390a:	603b      	str	r3, [r7, #0]
 800390c:	1dfb      	adds	r3, r7, #7
 800390e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003910:	e05d      	b.n	80039ce <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003912:	69bb      	ldr	r3, [r7, #24]
 8003914:	3301      	adds	r3, #1
 8003916:	d05a      	beq.n	80039ce <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003918:	f7fd fc04 	bl	8001124 <HAL_GetTick>
 800391c:	0002      	movs	r2, r0
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	1ad3      	subs	r3, r2, r3
 8003922:	69ba      	ldr	r2, [r7, #24]
 8003924:	429a      	cmp	r2, r3
 8003926:	d302      	bcc.n	800392e <UART_WaitOnFlagUntilTimeout+0x2e>
 8003928:	69bb      	ldr	r3, [r7, #24]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d11b      	bne.n	8003966 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	681a      	ldr	r2, [r3, #0]
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	492f      	ldr	r1, [pc, #188]	; (80039f8 <UART_WaitOnFlagUntilTimeout+0xf8>)
 800393a:	400a      	ands	r2, r1
 800393c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	689a      	ldr	r2, [r3, #8]
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	2101      	movs	r1, #1
 800394a:	438a      	bics	r2, r1
 800394c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	2220      	movs	r2, #32
 8003952:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	2220      	movs	r2, #32
 8003958:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	2270      	movs	r2, #112	; 0x70
 800395e:	2100      	movs	r1, #0
 8003960:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003962:	2303      	movs	r3, #3
 8003964:	e043      	b.n	80039ee <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	2204      	movs	r2, #4
 800396e:	4013      	ands	r3, r2
 8003970:	d02d      	beq.n	80039ce <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	69da      	ldr	r2, [r3, #28]
 8003978:	2380      	movs	r3, #128	; 0x80
 800397a:	011b      	lsls	r3, r3, #4
 800397c:	401a      	ands	r2, r3
 800397e:	2380      	movs	r3, #128	; 0x80
 8003980:	011b      	lsls	r3, r3, #4
 8003982:	429a      	cmp	r2, r3
 8003984:	d123      	bne.n	80039ce <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	2280      	movs	r2, #128	; 0x80
 800398c:	0112      	lsls	r2, r2, #4
 800398e:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4917      	ldr	r1, [pc, #92]	; (80039f8 <UART_WaitOnFlagUntilTimeout+0xf8>)
 800399c:	400a      	ands	r2, r1
 800399e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	689a      	ldr	r2, [r3, #8]
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	2101      	movs	r1, #1
 80039ac:	438a      	bics	r2, r1
 80039ae:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2220      	movs	r2, #32
 80039b4:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	2220      	movs	r2, #32
 80039ba:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2220      	movs	r2, #32
 80039c0:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	2270      	movs	r2, #112	; 0x70
 80039c6:	2100      	movs	r1, #0
 80039c8:	5499      	strb	r1, [r3, r2]
          
          return HAL_TIMEOUT;
 80039ca:	2303      	movs	r3, #3
 80039cc:	e00f      	b.n	80039ee <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	69db      	ldr	r3, [r3, #28]
 80039d4:	68ba      	ldr	r2, [r7, #8]
 80039d6:	4013      	ands	r3, r2
 80039d8:	68ba      	ldr	r2, [r7, #8]
 80039da:	1ad3      	subs	r3, r2, r3
 80039dc:	425a      	negs	r2, r3
 80039de:	4153      	adcs	r3, r2
 80039e0:	b2db      	uxtb	r3, r3
 80039e2:	001a      	movs	r2, r3
 80039e4:	1dfb      	adds	r3, r7, #7
 80039e6:	781b      	ldrb	r3, [r3, #0]
 80039e8:	429a      	cmp	r2, r3
 80039ea:	d092      	beq.n	8003912 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80039ec:	2300      	movs	r3, #0
}
 80039ee:	0018      	movs	r0, r3
 80039f0:	46bd      	mov	sp, r7
 80039f2:	b004      	add	sp, #16
 80039f4:	bd80      	pop	{r7, pc}
 80039f6:	46c0      	nop			; (mov r8, r8)
 80039f8:	fffffe5f 	.word	0xfffffe5f

080039fc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b082      	sub	sp, #8
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	681a      	ldr	r2, [r3, #0]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	21c0      	movs	r1, #192	; 0xc0
 8003a10:	438a      	bics	r2, r1
 8003a12:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2220      	movs	r2, #32
 8003a18:	675a      	str	r2, [r3, #116]	; 0x74
}
 8003a1a:	46c0      	nop			; (mov r8, r8)
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	b002      	add	sp, #8
 8003a20:	bd80      	pop	{r7, pc}
	...

08003a24 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b082      	sub	sp, #8
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	681a      	ldr	r2, [r3, #0]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	490a      	ldr	r1, [pc, #40]	; (8003a60 <UART_EndRxTransfer+0x3c>)
 8003a38:	400a      	ands	r2, r1
 8003a3a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	689a      	ldr	r2, [r3, #8]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	2101      	movs	r1, #1
 8003a48:	438a      	bics	r2, r1
 8003a4a:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2220      	movs	r2, #32
 8003a50:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2200      	movs	r2, #0
 8003a56:	661a      	str	r2, [r3, #96]	; 0x60
}
 8003a58:	46c0      	nop			; (mov r8, r8)
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	b002      	add	sp, #8
 8003a5e:	bd80      	pop	{r7, pc}
 8003a60:	fffffedf 	.word	0xfffffedf

08003a64 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b084      	sub	sp, #16
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a70:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	699b      	ldr	r3, [r3, #24]
 8003a76:	2b20      	cmp	r3, #32
 8003a78:	d01e      	beq.n	8003ab8 <UART_DMAReceiveCplt+0x54>
  {
    huart->RxXferCount = 0U;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	225a      	movs	r2, #90	; 0x5a
 8003a7e:	2100      	movs	r1, #0
 8003a80:	5299      	strh	r1, [r3, r2]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	681a      	ldr	r2, [r3, #0]
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	490e      	ldr	r1, [pc, #56]	; (8003ac8 <UART_DMAReceiveCplt+0x64>)
 8003a8e:	400a      	ands	r2, r1
 8003a90:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	689a      	ldr	r2, [r3, #8]
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	2101      	movs	r1, #1
 8003a9e:	438a      	bics	r2, r1
 8003aa0:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	689a      	ldr	r2, [r3, #8]
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	2140      	movs	r1, #64	; 0x40
 8003aae:	438a      	bics	r2, r1
 8003ab0:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	2220      	movs	r2, #32
 8003ab6:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	0018      	movs	r0, r3
 8003abc:	f000 f8bc 	bl	8003c38 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003ac0:	46c0      	nop			; (mov r8, r8)
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	b004      	add	sp, #16
 8003ac6:	bd80      	pop	{r7, pc}
 8003ac8:	fffffeff 	.word	0xfffffeff

08003acc <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b084      	sub	sp, #16
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad8:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	0018      	movs	r0, r3
 8003ade:	f7ff fc7f 	bl	80033e0 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003ae2:	46c0      	nop			; (mov r8, r8)
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	b004      	add	sp, #16
 8003ae8:	bd80      	pop	{r7, pc}

08003aea <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003aea:	b580      	push	{r7, lr}
 8003aec:	b086      	sub	sp, #24
 8003aee:	af00      	add	r7, sp, #0
 8003af0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af6:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8003af8:	697b      	ldr	r3, [r7, #20]
 8003afa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003afc:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b02:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	2280      	movs	r2, #128	; 0x80
 8003b0c:	4013      	ands	r3, r2
 8003b0e:	2b80      	cmp	r3, #128	; 0x80
 8003b10:	d10a      	bne.n	8003b28 <UART_DMAError+0x3e>
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	2b21      	cmp	r3, #33	; 0x21
 8003b16:	d107      	bne.n	8003b28 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	2252      	movs	r2, #82	; 0x52
 8003b1c:	2100      	movs	r1, #0
 8003b1e:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	0018      	movs	r0, r3
 8003b24:	f7ff ff6a 	bl	80039fc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8003b28:	697b      	ldr	r3, [r7, #20]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	2240      	movs	r2, #64	; 0x40
 8003b30:	4013      	ands	r3, r2
 8003b32:	2b40      	cmp	r3, #64	; 0x40
 8003b34:	d10a      	bne.n	8003b4c <UART_DMAError+0x62>
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	2b22      	cmp	r3, #34	; 0x22
 8003b3a:	d107      	bne.n	8003b4c <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	225a      	movs	r2, #90	; 0x5a
 8003b40:	2100      	movs	r1, #0
 8003b42:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	0018      	movs	r0, r3
 8003b48:	f7ff ff6c 	bl	8003a24 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003b4c:	697b      	ldr	r3, [r7, #20]
 8003b4e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b50:	2210      	movs	r2, #16
 8003b52:	431a      	orrs	r2, r3
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	67da      	str	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	0018      	movs	r0, r3
 8003b5c:	f7ff fc48 	bl	80033f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003b60:	46c0      	nop			; (mov r8, r8)
 8003b62:	46bd      	mov	sp, r7
 8003b64:	b006      	add	sp, #24
 8003b66:	bd80      	pop	{r7, pc}

08003b68 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b084      	sub	sp, #16
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b74:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	225a      	movs	r2, #90	; 0x5a
 8003b7a:	2100      	movs	r1, #0
 8003b7c:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	2252      	movs	r2, #82	; 0x52
 8003b82:	2100      	movs	r1, #0
 8003b84:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	0018      	movs	r0, r3
 8003b8a:	f7ff fc31 	bl	80033f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003b8e:	46c0      	nop			; (mov r8, r8)
 8003b90:	46bd      	mov	sp, r7
 8003b92:	b004      	add	sp, #16
 8003b94:	bd80      	pop	{r7, pc}

08003b96 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003b96:	b580      	push	{r7, lr}
 8003b98:	b082      	sub	sp, #8
 8003b9a:	af00      	add	r7, sp, #0
 8003b9c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	681a      	ldr	r2, [r3, #0]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	2140      	movs	r1, #64	; 0x40
 8003baa:	438a      	bics	r2, r1
 8003bac:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2220      	movs	r2, #32
 8003bb2:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	0018      	movs	r0, r3
 8003bbe:	f7ff fc07 	bl	80033d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003bc2:	46c0      	nop			; (mov r8, r8)
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	b002      	add	sp, #8
 8003bc8:	bd80      	pop	{r7, pc}

08003bca <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003bca:	b580      	push	{r7, lr}
 8003bcc:	b082      	sub	sp, #8
 8003bce:	af00      	add	r7, sp, #0
 8003bd0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003bd2:	46c0      	nop			; (mov r8, r8)
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	b002      	add	sp, #8
 8003bd8:	bd80      	pop	{r7, pc}
	...

08003bdc <I2C_DeviceScan>:
void pop_msg_out_buf_stack();

char msg_out_buf[4][15] = {"1","2","3"};


SM_DeviceFoundTypedef I2C_DeviceScan() {
 8003bdc:	b590      	push	{r4, r7, lr}
 8003bde:	b083      	sub	sp, #12
 8003be0:	af00      	add	r7, sp, #0

	SM_DeviceFoundTypedef smbus_status = SMBUS_DEVICE_MISSING;
 8003be2:	1dfb      	adds	r3, r7, #7
 8003be4:	2200      	movs	r2, #0
 8003be6:	701a      	strb	r2, [r3, #0]

    HAL_StatusTypeDef res;
    for(uint16_t i = 0; i < 128; i++)
 8003be8:	1d3b      	adds	r3, r7, #4
 8003bea:	2200      	movs	r2, #0
 8003bec:	801a      	strh	r2, [r3, #0]
 8003bee:	e017      	b.n	8003c20 <I2C_DeviceScan+0x44>
    {
        res = HAL_I2C_IsDeviceReady(&hi2c1, i << 1, 1, 10);
 8003bf0:	1d3b      	adds	r3, r7, #4
 8003bf2:	881b      	ldrh	r3, [r3, #0]
 8003bf4:	18db      	adds	r3, r3, r3
 8003bf6:	b299      	uxth	r1, r3
 8003bf8:	1cfc      	adds	r4, r7, #3
 8003bfa:	480e      	ldr	r0, [pc, #56]	; (8003c34 <I2C_DeviceScan+0x58>)
 8003bfc:	230a      	movs	r3, #10
 8003bfe:	2201      	movs	r2, #1
 8003c00:	f7fe f8e4 	bl	8001dcc <HAL_I2C_IsDeviceReady>
 8003c04:	0003      	movs	r3, r0
 8003c06:	7023      	strb	r3, [r4, #0]
        if(res == HAL_OK)
 8003c08:	1cfb      	adds	r3, r7, #3
 8003c0a:	781b      	ldrb	r3, [r3, #0]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d102      	bne.n	8003c16 <I2C_DeviceScan+0x3a>
        {
           	smbus_status = SMBUS_DEVICE_FOUND;
 8003c10:	1dfb      	adds	r3, r7, #7
 8003c12:	2201      	movs	r2, #1
 8003c14:	701a      	strb	r2, [r3, #0]
    for(uint16_t i = 0; i < 128; i++)
 8003c16:	1d3b      	adds	r3, r7, #4
 8003c18:	881a      	ldrh	r2, [r3, #0]
 8003c1a:	1d3b      	adds	r3, r7, #4
 8003c1c:	3201      	adds	r2, #1
 8003c1e:	801a      	strh	r2, [r3, #0]
 8003c20:	1d3b      	adds	r3, r7, #4
 8003c22:	881b      	ldrh	r3, [r3, #0]
 8003c24:	2b7f      	cmp	r3, #127	; 0x7f
 8003c26:	d9e3      	bls.n	8003bf0 <I2C_DeviceScan+0x14>
        }
    }

    return smbus_status;
 8003c28:	1dfb      	adds	r3, r7, #7
 8003c2a:	781b      	ldrb	r3, [r3, #0]
}
 8003c2c:	0018      	movs	r0, r3
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	b003      	add	sp, #12
 8003c32:	bd90      	pop	{r4, r7, pc}
 8003c34:	200004f4 	.word	0x200004f4

08003c38 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b084      	sub	sp, #16
 8003c3c:	af02      	add	r7, sp, #8
 8003c3e:	6078      	str	r0, [r7, #4]
	// blink led on rx
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8003c40:	2390      	movs	r3, #144	; 0x90
 8003c42:	05db      	lsls	r3, r3, #23
 8003c44:	2120      	movs	r1, #32
 8003c46:	0018      	movs	r0, r3
 8003c48:	f7fd fee1 	bl	8001a0e <HAL_GPIO_TogglePin>
	if(uart_data_in[0] == '\r')
 8003c4c:	4b0c      	ldr	r3, [pc, #48]	; (8003c80 <HAL_UART_RxCpltCallback+0x48>)
 8003c4e:	781b      	ldrb	r3, [r3, #0]
 8003c50:	2b0d      	cmp	r3, #13
 8003c52:	d108      	bne.n	8003c66 <HAL_UART_RxCpltCallback+0x2e>
	{

		pop_msg_out_buf_stack();
 8003c54:	f000 f880 	bl	8003d58 <pop_msg_out_buf_stack>
		memset(msg_out_buf[0], 0, 15);
 8003c58:	4b0a      	ldr	r3, [pc, #40]	; (8003c84 <HAL_UART_RxCpltCallback+0x4c>)
 8003c5a:	220f      	movs	r2, #15
 8003c5c:	2100      	movs	r1, #0
 8003c5e:	0018      	movs	r0, r3
 8003c60:	f000 fbfc 	bl	800445c <memset>
	{
		snprintf(msg_out_buf[0], sizeof(msg_out_buf), "%s%s", msg_out_buf[0], uart_data_in);
	}


}
 8003c64:	e008      	b.n	8003c78 <HAL_UART_RxCpltCallback+0x40>
		snprintf(msg_out_buf[0], sizeof(msg_out_buf), "%s%s", msg_out_buf[0], uart_data_in);
 8003c66:	4907      	ldr	r1, [pc, #28]	; (8003c84 <HAL_UART_RxCpltCallback+0x4c>)
 8003c68:	4a07      	ldr	r2, [pc, #28]	; (8003c88 <HAL_UART_RxCpltCallback+0x50>)
 8003c6a:	4806      	ldr	r0, [pc, #24]	; (8003c84 <HAL_UART_RxCpltCallback+0x4c>)
 8003c6c:	4b04      	ldr	r3, [pc, #16]	; (8003c80 <HAL_UART_RxCpltCallback+0x48>)
 8003c6e:	9300      	str	r3, [sp, #0]
 8003c70:	000b      	movs	r3, r1
 8003c72:	213c      	movs	r1, #60	; 0x3c
 8003c74:	f000 fbfa 	bl	800446c <sniprintf>
}
 8003c78:	46c0      	nop			; (mov r8, r8)
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	b002      	add	sp, #8
 8003c7e:	bd80      	pop	{r7, pc}
 8003c80:	20000540 	.word	0x20000540
 8003c84:	2000000c 	.word	0x2000000c
 8003c88:	08004ca0 	.word	0x08004ca0

08003c8c <test_i2c_device>:

void test_i2c_device()
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b082      	sub	sp, #8
 8003c90:	af00      	add	r7, sp, #0
	  if(I2C_DeviceScan())
 8003c92:	f7ff ffa3 	bl	8003bdc <I2C_DeviceScan>
 8003c96:	1e03      	subs	r3, r0, #0
 8003c98:	d033      	beq.n	8003d02 <test_i2c_device+0x76>
	  {
		  // start test blink
		  for(int t=0; t<4; t++)
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	607b      	str	r3, [r7, #4]
 8003c9e:	e00b      	b.n	8003cb8 <test_i2c_device+0x2c>
		  {
			  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8003ca0:	2390      	movs	r3, #144	; 0x90
 8003ca2:	05db      	lsls	r3, r3, #23
 8003ca4:	2120      	movs	r1, #32
 8003ca6:	0018      	movs	r0, r3
 8003ca8:	f7fd feb1 	bl	8001a0e <HAL_GPIO_TogglePin>
			  HAL_Delay(100);
 8003cac:	2064      	movs	r0, #100	; 0x64
 8003cae:	f7fd fa43 	bl	8001138 <HAL_Delay>
		  for(int t=0; t<4; t++)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	3301      	adds	r3, #1
 8003cb6:	607b      	str	r3, [r7, #4]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2b03      	cmp	r3, #3
 8003cbc:	ddf0      	ble.n	8003ca0 <test_i2c_device+0x14>
		  }
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8003cbe:	2390      	movs	r3, #144	; 0x90
 8003cc0:	05db      	lsls	r3, r3, #23
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	2120      	movs	r1, #32
 8003cc6:	0018      	movs	r0, r3
 8003cc8:	f7fd fe84 	bl	80019d4 <HAL_GPIO_WritePin>

		  ssd1306_TestAll();
 8003ccc:	f000 fb74 	bl	80043b8 <ssd1306_TestAll>

		  // end test blink
		  for(int t=0; t<4; t++)
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	603b      	str	r3, [r7, #0]
 8003cd4:	e00b      	b.n	8003cee <test_i2c_device+0x62>
		  {
			  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8003cd6:	2390      	movs	r3, #144	; 0x90
 8003cd8:	05db      	lsls	r3, r3, #23
 8003cda:	2120      	movs	r1, #32
 8003cdc:	0018      	movs	r0, r3
 8003cde:	f7fd fe96 	bl	8001a0e <HAL_GPIO_TogglePin>
			  HAL_Delay(100);
 8003ce2:	2064      	movs	r0, #100	; 0x64
 8003ce4:	f7fd fa28 	bl	8001138 <HAL_Delay>
		  for(int t=0; t<4; t++)
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	3301      	adds	r3, #1
 8003cec:	603b      	str	r3, [r7, #0]
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	2b03      	cmp	r3, #3
 8003cf2:	ddf0      	ble.n	8003cd6 <test_i2c_device+0x4a>
		  }
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8003cf4:	2390      	movs	r3, #144	; 0x90
 8003cf6:	05db      	lsls	r3, r3, #23
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	2120      	movs	r1, #32
 8003cfc:	0018      	movs	r0, r3
 8003cfe:	f7fd fe69 	bl	80019d4 <HAL_GPIO_WritePin>
	  }
}
 8003d02:	46c0      	nop			; (mov r8, r8)
 8003d04:	46bd      	mov	sp, r7
 8003d06:	b002      	add	sp, #8
 8003d08:	bd80      	pop	{r7, pc}
	...

08003d0c <i2c_display_loop>:

void i2c_display_loop()
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	af00      	add	r7, sp, #0
	  ssd1306_Fill(Black);
 8003d10:	2000      	movs	r0, #0
 8003d12:	f000 f8db 	bl	8003ecc <ssd1306_Fill>
	  ssd1306_SetCursor(2, 40);
 8003d16:	2128      	movs	r1, #40	; 0x28
 8003d18:	2002      	movs	r0, #2
 8003d1a:	f000 fa51 	bl	80041c0 <ssd1306_SetCursor>
	  ssd1306_WriteString(msg_out_buf[0], Font_11x18, White);
 8003d1e:	4a0b      	ldr	r2, [pc, #44]	; (8003d4c <i2c_display_loop+0x40>)
 8003d20:	480b      	ldr	r0, [pc, #44]	; (8003d50 <i2c_display_loop+0x44>)
 8003d22:	2301      	movs	r3, #1
 8003d24:	6811      	ldr	r1, [r2, #0]
 8003d26:	6852      	ldr	r2, [r2, #4]
 8003d28:	f000 fa20 	bl	800416c <ssd1306_WriteString>
	  ssd1306_SetCursor(2, 20);
 8003d2c:	2114      	movs	r1, #20
 8003d2e:	2002      	movs	r0, #2
 8003d30:	f000 fa46 	bl	80041c0 <ssd1306_SetCursor>
	  ssd1306_WriteString(msg_out_buf[1], Font_11x18, White);
 8003d34:	4a05      	ldr	r2, [pc, #20]	; (8003d4c <i2c_display_loop+0x40>)
 8003d36:	4807      	ldr	r0, [pc, #28]	; (8003d54 <i2c_display_loop+0x48>)
 8003d38:	2301      	movs	r3, #1
 8003d3a:	6811      	ldr	r1, [r2, #0]
 8003d3c:	6852      	ldr	r2, [r2, #4]
 8003d3e:	f000 fa15 	bl	800416c <ssd1306_WriteString>
	  ssd1306_UpdateScreen();
 8003d42:	f000 f8e7 	bl	8003f14 <ssd1306_UpdateScreen>
}
 8003d46:	46c0      	nop			; (mov r8, r8)
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bd80      	pop	{r7, pc}
 8003d4c:	20000050 	.word	0x20000050
 8003d50:	2000000c 	.word	0x2000000c
 8003d54:	2000001b 	.word	0x2000001b

08003d58 <pop_msg_out_buf_stack>:

void pop_msg_out_buf_stack()
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	af00      	add	r7, sp, #0
	memmove(msg_out_buf[1], msg_out_buf[0], sizeof(msg_out_buf[0])-1);
 8003d5c:	4a05      	ldr	r2, [pc, #20]	; (8003d74 <pop_msg_out_buf_stack+0x1c>)
 8003d5e:	4b06      	ldr	r3, [pc, #24]	; (8003d78 <pop_msg_out_buf_stack+0x20>)
 8003d60:	0010      	movs	r0, r2
 8003d62:	0019      	movs	r1, r3
 8003d64:	230e      	movs	r3, #14
 8003d66:	001a      	movs	r2, r3
 8003d68:	f000 fb5c 	bl	8004424 <memcpy>

}
 8003d6c:	46c0      	nop			; (mov r8, r8)
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}
 8003d72:	46c0      	nop			; (mov r8, r8)
 8003d74:	2000001b 	.word	0x2000001b
 8003d78:	2000000c 	.word	0x2000000c

08003d7c <ssd1306_Reset>:
#include "ssd1306.h"

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	af00      	add	r7, sp, #0
	/* for I2C - do nothing */
}
 8003d80:	46c0      	nop			; (mov r8, r8)
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}
	...

08003d88 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b086      	sub	sp, #24
 8003d8c:	af04      	add	r7, sp, #16
 8003d8e:	0002      	movs	r2, r0
 8003d90:	1dfb      	adds	r3, r7, #7
 8003d92:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8003d94:	4808      	ldr	r0, [pc, #32]	; (8003db8 <ssd1306_WriteCommand+0x30>)
 8003d96:	2301      	movs	r3, #1
 8003d98:	425b      	negs	r3, r3
 8003d9a:	9302      	str	r3, [sp, #8]
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	9301      	str	r3, [sp, #4]
 8003da0:	1dfb      	adds	r3, r7, #7
 8003da2:	9300      	str	r3, [sp, #0]
 8003da4:	2301      	movs	r3, #1
 8003da6:	2200      	movs	r2, #0
 8003da8:	2178      	movs	r1, #120	; 0x78
 8003daa:	f7fd fee1 	bl	8001b70 <HAL_I2C_Mem_Write>
}
 8003dae:	46c0      	nop			; (mov r8, r8)
 8003db0:	46bd      	mov	sp, r7
 8003db2:	b002      	add	sp, #8
 8003db4:	bd80      	pop	{r7, pc}
 8003db6:	46c0      	nop			; (mov r8, r8)
 8003db8:	200004f4 	.word	0x200004f4

08003dbc <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b086      	sub	sp, #24
 8003dc0:	af04      	add	r7, sp, #16
 8003dc2:	6078      	str	r0, [r7, #4]
 8003dc4:	6039      	str	r1, [r7, #0]
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	b29b      	uxth	r3, r3
 8003dca:	4808      	ldr	r0, [pc, #32]	; (8003dec <ssd1306_WriteData+0x30>)
 8003dcc:	2201      	movs	r2, #1
 8003dce:	4252      	negs	r2, r2
 8003dd0:	9202      	str	r2, [sp, #8]
 8003dd2:	9301      	str	r3, [sp, #4]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	9300      	str	r3, [sp, #0]
 8003dd8:	2301      	movs	r3, #1
 8003dda:	2240      	movs	r2, #64	; 0x40
 8003ddc:	2178      	movs	r1, #120	; 0x78
 8003dde:	f7fd fec7 	bl	8001b70 <HAL_I2C_Mem_Write>
}
 8003de2:	46c0      	nop			; (mov r8, r8)
 8003de4:	46bd      	mov	sp, r7
 8003de6:	b002      	add	sp, #8
 8003de8:	bd80      	pop	{r7, pc}
 8003dea:	46c0      	nop			; (mov r8, r8)
 8003dec:	200004f4 	.word	0x200004f4

08003df0 <ssd1306_Init>:

// Screen object
static SSD1306_t SSD1306;

// Initialize the oled screen
void ssd1306_Init(void) {
 8003df0:	b580      	push	{r7, lr}
 8003df2:	af00      	add	r7, sp, #0
	// Reset OLED
	ssd1306_Reset();
 8003df4:	f7ff ffc2 	bl	8003d7c <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8003df8:	2064      	movs	r0, #100	; 0x64
 8003dfa:	f7fd f99d 	bl	8001138 <HAL_Delay>
    
    // Init OLED
    ssd1306_WriteCommand(0xAE); //display off
 8003dfe:	20ae      	movs	r0, #174	; 0xae
 8003e00:	f7ff ffc2 	bl	8003d88 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode   
 8003e04:	2020      	movs	r0, #32
 8003e06:	f7ff ffbf 	bl	8003d88 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); // 00,Horizontal Addressing Mode; 01,Vertical Addressing Mode;
 8003e0a:	2010      	movs	r0, #16
 8003e0c:	f7ff ffbc 	bl	8003d88 <ssd1306_WriteCommand>
                                // 10,Page Addressing Mode (RESET); 11,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8003e10:	20b0      	movs	r0, #176	; 0xb0
 8003e12:	f7ff ffb9 	bl	8003d88 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8003e16:	20c8      	movs	r0, #200	; 0xc8
 8003e18:	f7ff ffb6 	bl	8003d88 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8003e1c:	2000      	movs	r0, #0
 8003e1e:	f7ff ffb3 	bl	8003d88 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8003e22:	2010      	movs	r0, #16
 8003e24:	f7ff ffb0 	bl	8003d88 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8003e28:	2040      	movs	r0, #64	; 0x40
 8003e2a:	f7ff ffad 	bl	8003d88 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x81); //--set contrast control register - CHECK
 8003e2e:	2081      	movs	r0, #129	; 0x81
 8003e30:	f7ff ffaa 	bl	8003d88 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xFF);
 8003e34:	20ff      	movs	r0, #255	; 0xff
 8003e36:	f7ff ffa7 	bl	8003d88 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8003e3a:	20a1      	movs	r0, #161	; 0xa1
 8003e3c:	f7ff ffa4 	bl	8003d88 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8003e40:	20a6      	movs	r0, #166	; 0xa6
 8003e42:	f7ff ffa1 	bl	8003d88 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8003e46:	20a8      	movs	r0, #168	; 0xa8
 8003e48:	f7ff ff9e 	bl	8003d88 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); //
 8003e4c:	203f      	movs	r0, #63	; 0x3f
 8003e4e:	f7ff ff9b 	bl	8003d88 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8003e52:	20a4      	movs	r0, #164	; 0xa4
 8003e54:	f7ff ff98 	bl	8003d88 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8003e58:	20d3      	movs	r0, #211	; 0xd3
 8003e5a:	f7ff ff95 	bl	8003d88 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8003e5e:	2000      	movs	r0, #0
 8003e60:	f7ff ff92 	bl	8003d88 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8003e64:	20d5      	movs	r0, #213	; 0xd5
 8003e66:	f7ff ff8f 	bl	8003d88 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8003e6a:	20f0      	movs	r0, #240	; 0xf0
 8003e6c:	f7ff ff8c 	bl	8003d88 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8003e70:	20d9      	movs	r0, #217	; 0xd9
 8003e72:	f7ff ff89 	bl	8003d88 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8003e76:	2022      	movs	r0, #34	; 0x22
 8003e78:	f7ff ff86 	bl	8003d88 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8003e7c:	20da      	movs	r0, #218	; 0xda
 8003e7e:	f7ff ff83 	bl	8003d88 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
 8003e82:	2012      	movs	r0, #18
 8003e84:	f7ff ff80 	bl	8003d88 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8003e88:	20db      	movs	r0, #219	; 0xdb
 8003e8a:	f7ff ff7d 	bl	8003d88 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8003e8e:	2020      	movs	r0, #32
 8003e90:	f7ff ff7a 	bl	8003d88 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8003e94:	208d      	movs	r0, #141	; 0x8d
 8003e96:	f7ff ff77 	bl	8003d88 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8003e9a:	2014      	movs	r0, #20
 8003e9c:	f7ff ff74 	bl	8003d88 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xAF); //--turn on SSD1306 panel
 8003ea0:	20af      	movs	r0, #175	; 0xaf
 8003ea2:	f7ff ff71 	bl	8003d88 <ssd1306_WriteCommand>

    // Clear screen
    ssd1306_Fill(Black);
 8003ea6:	2000      	movs	r0, #0
 8003ea8:	f000 f810 	bl	8003ecc <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8003eac:	f000 f832 	bl	8003f14 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8003eb0:	4b05      	ldr	r3, [pc, #20]	; (8003ec8 <ssd1306_Init+0xd8>)
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8003eb6:	4b04      	ldr	r3, [pc, #16]	; (8003ec8 <ssd1306_Init+0xd8>)
 8003eb8:	2200      	movs	r2, #0
 8003eba:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8003ebc:	4b02      	ldr	r3, [pc, #8]	; (8003ec8 <ssd1306_Init+0xd8>)
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	715a      	strb	r2, [r3, #5]
}
 8003ec2:	46c0      	nop			; (mov r8, r8)
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bd80      	pop	{r7, pc}
 8003ec8:	200004e4 	.word	0x200004e4

08003ecc <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b084      	sub	sp, #16
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	0002      	movs	r2, r0
 8003ed4:	1dfb      	adds	r3, r7, #7
 8003ed6:	701a      	strb	r2, [r3, #0]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8003ed8:	2300      	movs	r3, #0
 8003eda:	60fb      	str	r3, [r7, #12]
 8003edc:	e00e      	b.n	8003efc <ssd1306_Fill+0x30>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8003ede:	1dfb      	adds	r3, r7, #7
 8003ee0:	781b      	ldrb	r3, [r3, #0]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d101      	bne.n	8003eea <ssd1306_Fill+0x1e>
 8003ee6:	2100      	movs	r1, #0
 8003ee8:	e000      	b.n	8003eec <ssd1306_Fill+0x20>
 8003eea:	21ff      	movs	r1, #255	; 0xff
 8003eec:	4a07      	ldr	r2, [pc, #28]	; (8003f0c <ssd1306_Fill+0x40>)
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	18d3      	adds	r3, r2, r3
 8003ef2:	1c0a      	adds	r2, r1, #0
 8003ef4:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	3301      	adds	r3, #1
 8003efa:	60fb      	str	r3, [r7, #12]
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	4a04      	ldr	r2, [pc, #16]	; (8003f10 <ssd1306_Fill+0x44>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d9ec      	bls.n	8003ede <ssd1306_Fill+0x12>
    }
}
 8003f04:	46c0      	nop			; (mov r8, r8)
 8003f06:	46bd      	mov	sp, r7
 8003f08:	b004      	add	sp, #16
 8003f0a:	bd80      	pop	{r7, pc}
 8003f0c:	200000e4 	.word	0x200000e4
 8003f10:	000003ff 	.word	0x000003ff

08003f14 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b082      	sub	sp, #8
 8003f18:	af00      	add	r7, sp, #0
    uint8_t i;
    for(i = 0; i < 8; i++) {
 8003f1a:	1dfb      	adds	r3, r7, #7
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	701a      	strb	r2, [r3, #0]
 8003f20:	e01a      	b.n	8003f58 <ssd1306_UpdateScreen+0x44>
        ssd1306_WriteCommand(0xB0 + i);
 8003f22:	1dfb      	adds	r3, r7, #7
 8003f24:	781b      	ldrb	r3, [r3, #0]
 8003f26:	3b50      	subs	r3, #80	; 0x50
 8003f28:	b2db      	uxtb	r3, r3
 8003f2a:	0018      	movs	r0, r3
 8003f2c:	f7ff ff2c 	bl	8003d88 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 8003f30:	2000      	movs	r0, #0
 8003f32:	f7ff ff29 	bl	8003d88 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 8003f36:	2010      	movs	r0, #16
 8003f38:	f7ff ff26 	bl	8003d88 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8003f3c:	1dfb      	adds	r3, r7, #7
 8003f3e:	781b      	ldrb	r3, [r3, #0]
 8003f40:	01da      	lsls	r2, r3, #7
 8003f42:	4b09      	ldr	r3, [pc, #36]	; (8003f68 <ssd1306_UpdateScreen+0x54>)
 8003f44:	18d3      	adds	r3, r2, r3
 8003f46:	2180      	movs	r1, #128	; 0x80
 8003f48:	0018      	movs	r0, r3
 8003f4a:	f7ff ff37 	bl	8003dbc <ssd1306_WriteData>
    for(i = 0; i < 8; i++) {
 8003f4e:	1dfb      	adds	r3, r7, #7
 8003f50:	781a      	ldrb	r2, [r3, #0]
 8003f52:	1dfb      	adds	r3, r7, #7
 8003f54:	3201      	adds	r2, #1
 8003f56:	701a      	strb	r2, [r3, #0]
 8003f58:	1dfb      	adds	r3, r7, #7
 8003f5a:	781b      	ldrb	r3, [r3, #0]
 8003f5c:	2b07      	cmp	r3, #7
 8003f5e:	d9e0      	bls.n	8003f22 <ssd1306_UpdateScreen+0xe>
    }
}
 8003f60:	46c0      	nop			; (mov r8, r8)
 8003f62:	46bd      	mov	sp, r7
 8003f64:	b002      	add	sp, #8
 8003f66:	bd80      	pop	{r7, pc}
 8003f68:	200000e4 	.word	0x200000e4

08003f6c <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8003f6c:	b590      	push	{r4, r7, lr}
 8003f6e:	b083      	sub	sp, #12
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	0004      	movs	r4, r0
 8003f74:	0008      	movs	r0, r1
 8003f76:	0011      	movs	r1, r2
 8003f78:	1dfb      	adds	r3, r7, #7
 8003f7a:	1c22      	adds	r2, r4, #0
 8003f7c:	701a      	strb	r2, [r3, #0]
 8003f7e:	1dbb      	adds	r3, r7, #6
 8003f80:	1c02      	adds	r2, r0, #0
 8003f82:	701a      	strb	r2, [r3, #0]
 8003f84:	1d7b      	adds	r3, r7, #5
 8003f86:	1c0a      	adds	r2, r1, #0
 8003f88:	701a      	strb	r2, [r3, #0]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8003f8a:	1dfb      	adds	r3, r7, #7
 8003f8c:	781b      	ldrb	r3, [r3, #0]
 8003f8e:	b25b      	sxtb	r3, r3
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	db52      	blt.n	800403a <ssd1306_DrawPixel+0xce>
 8003f94:	1dbb      	adds	r3, r7, #6
 8003f96:	781b      	ldrb	r3, [r3, #0]
 8003f98:	2b3f      	cmp	r3, #63	; 0x3f
 8003f9a:	d84e      	bhi.n	800403a <ssd1306_DrawPixel+0xce>
        // Don't write outside the buffer
        return;
    }
    
    // Check if pixel should be inverted
    if(SSD1306.Inverted) {
 8003f9c:	4b29      	ldr	r3, [pc, #164]	; (8004044 <ssd1306_DrawPixel+0xd8>)
 8003f9e:	791b      	ldrb	r3, [r3, #4]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d006      	beq.n	8003fb2 <ssd1306_DrawPixel+0x46>
        color = (SSD1306_COLOR)!color;
 8003fa4:	1d7b      	adds	r3, r7, #5
 8003fa6:	781b      	ldrb	r3, [r3, #0]
 8003fa8:	425a      	negs	r2, r3
 8003faa:	4153      	adcs	r3, r2
 8003fac:	b2da      	uxtb	r2, r3
 8003fae:	1d7b      	adds	r3, r7, #5
 8003fb0:	701a      	strb	r2, [r3, #0]
    }
    
    // Draw in the right color
    if(color == White) {
 8003fb2:	1d7b      	adds	r3, r7, #5
 8003fb4:	781b      	ldrb	r3, [r3, #0]
 8003fb6:	2b01      	cmp	r3, #1
 8003fb8:	d11e      	bne.n	8003ff8 <ssd1306_DrawPixel+0x8c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8003fba:	1dfb      	adds	r3, r7, #7
 8003fbc:	781a      	ldrb	r2, [r3, #0]
 8003fbe:	1dbb      	adds	r3, r7, #6
 8003fc0:	781b      	ldrb	r3, [r3, #0]
 8003fc2:	08db      	lsrs	r3, r3, #3
 8003fc4:	b2d8      	uxtb	r0, r3
 8003fc6:	0003      	movs	r3, r0
 8003fc8:	01db      	lsls	r3, r3, #7
 8003fca:	18d3      	adds	r3, r2, r3
 8003fcc:	4a1e      	ldr	r2, [pc, #120]	; (8004048 <ssd1306_DrawPixel+0xdc>)
 8003fce:	5cd3      	ldrb	r3, [r2, r3]
 8003fd0:	b25a      	sxtb	r2, r3
 8003fd2:	1dbb      	adds	r3, r7, #6
 8003fd4:	781b      	ldrb	r3, [r3, #0]
 8003fd6:	2107      	movs	r1, #7
 8003fd8:	400b      	ands	r3, r1
 8003fda:	2101      	movs	r1, #1
 8003fdc:	4099      	lsls	r1, r3
 8003fde:	000b      	movs	r3, r1
 8003fe0:	b25b      	sxtb	r3, r3
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	b259      	sxtb	r1, r3
 8003fe6:	1dfb      	adds	r3, r7, #7
 8003fe8:	781a      	ldrb	r2, [r3, #0]
 8003fea:	0003      	movs	r3, r0
 8003fec:	01db      	lsls	r3, r3, #7
 8003fee:	18d3      	adds	r3, r2, r3
 8003ff0:	b2c9      	uxtb	r1, r1
 8003ff2:	4a15      	ldr	r2, [pc, #84]	; (8004048 <ssd1306_DrawPixel+0xdc>)
 8003ff4:	54d1      	strb	r1, [r2, r3]
 8003ff6:	e021      	b.n	800403c <ssd1306_DrawPixel+0xd0>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8003ff8:	1dfb      	adds	r3, r7, #7
 8003ffa:	781a      	ldrb	r2, [r3, #0]
 8003ffc:	1dbb      	adds	r3, r7, #6
 8003ffe:	781b      	ldrb	r3, [r3, #0]
 8004000:	08db      	lsrs	r3, r3, #3
 8004002:	b2d8      	uxtb	r0, r3
 8004004:	0003      	movs	r3, r0
 8004006:	01db      	lsls	r3, r3, #7
 8004008:	18d3      	adds	r3, r2, r3
 800400a:	4a0f      	ldr	r2, [pc, #60]	; (8004048 <ssd1306_DrawPixel+0xdc>)
 800400c:	5cd3      	ldrb	r3, [r2, r3]
 800400e:	b25b      	sxtb	r3, r3
 8004010:	1dba      	adds	r2, r7, #6
 8004012:	7812      	ldrb	r2, [r2, #0]
 8004014:	2107      	movs	r1, #7
 8004016:	400a      	ands	r2, r1
 8004018:	2101      	movs	r1, #1
 800401a:	4091      	lsls	r1, r2
 800401c:	000a      	movs	r2, r1
 800401e:	b252      	sxtb	r2, r2
 8004020:	43d2      	mvns	r2, r2
 8004022:	b252      	sxtb	r2, r2
 8004024:	4013      	ands	r3, r2
 8004026:	b259      	sxtb	r1, r3
 8004028:	1dfb      	adds	r3, r7, #7
 800402a:	781a      	ldrb	r2, [r3, #0]
 800402c:	0003      	movs	r3, r0
 800402e:	01db      	lsls	r3, r3, #7
 8004030:	18d3      	adds	r3, r2, r3
 8004032:	b2c9      	uxtb	r1, r1
 8004034:	4a04      	ldr	r2, [pc, #16]	; (8004048 <ssd1306_DrawPixel+0xdc>)
 8004036:	54d1      	strb	r1, [r2, r3]
 8004038:	e000      	b.n	800403c <ssd1306_DrawPixel+0xd0>
        return;
 800403a:	46c0      	nop			; (mov r8, r8)
    }
}
 800403c:	46bd      	mov	sp, r7
 800403e:	b003      	add	sp, #12
 8004040:	bd90      	pop	{r4, r7, pc}
 8004042:	46c0      	nop			; (mov r8, r8)
 8004044:	200004e4 	.word	0x200004e4
 8004048:	200000e4 	.word	0x200000e4

0800404c <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch         => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color     => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 800404c:	b590      	push	{r4, r7, lr}
 800404e:	b089      	sub	sp, #36	; 0x24
 8004050:	af00      	add	r7, sp, #0
 8004052:	0004      	movs	r4, r0
 8004054:	1d38      	adds	r0, r7, #4
 8004056:	6001      	str	r1, [r0, #0]
 8004058:	6042      	str	r2, [r0, #4]
 800405a:	0019      	movs	r1, r3
 800405c:	230f      	movs	r3, #15
 800405e:	18fb      	adds	r3, r7, r3
 8004060:	1c22      	adds	r2, r4, #0
 8004062:	701a      	strb	r2, [r3, #0]
 8004064:	230e      	movs	r3, #14
 8004066:	18fb      	adds	r3, r7, r3
 8004068:	1c0a      	adds	r2, r1, #0
 800406a:	701a      	strb	r2, [r3, #0]
    uint32_t i, b, j;
    
    // Check remaining space on current line
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 800406c:	4b3e      	ldr	r3, [pc, #248]	; (8004168 <ssd1306_WriteChar+0x11c>)
 800406e:	881b      	ldrh	r3, [r3, #0]
 8004070:	001a      	movs	r2, r3
 8004072:	1d3b      	adds	r3, r7, #4
 8004074:	781b      	ldrb	r3, [r3, #0]
 8004076:	18d3      	adds	r3, r2, r3
 8004078:	2b7f      	cmp	r3, #127	; 0x7f
 800407a:	dc07      	bgt.n	800408c <ssd1306_WriteChar+0x40>
        SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 800407c:	4b3a      	ldr	r3, [pc, #232]	; (8004168 <ssd1306_WriteChar+0x11c>)
 800407e:	885b      	ldrh	r3, [r3, #2]
 8004080:	001a      	movs	r2, r3
 8004082:	1d3b      	adds	r3, r7, #4
 8004084:	785b      	ldrb	r3, [r3, #1]
 8004086:	18d3      	adds	r3, r2, r3
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8004088:	2b3f      	cmp	r3, #63	; 0x3f
 800408a:	dd01      	ble.n	8004090 <ssd1306_WriteChar+0x44>
    {
        // Not enough space on current line
        return 0;
 800408c:	2300      	movs	r3, #0
 800408e:	e066      	b.n	800415e <ssd1306_WriteChar+0x112>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8004090:	2300      	movs	r3, #0
 8004092:	61fb      	str	r3, [r7, #28]
 8004094:	e051      	b.n	800413a <ssd1306_WriteChar+0xee>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8004096:	1d3b      	adds	r3, r7, #4
 8004098:	685a      	ldr	r2, [r3, #4]
 800409a:	230f      	movs	r3, #15
 800409c:	18fb      	adds	r3, r7, r3
 800409e:	781b      	ldrb	r3, [r3, #0]
 80040a0:	3b20      	subs	r3, #32
 80040a2:	1d39      	adds	r1, r7, #4
 80040a4:	7849      	ldrb	r1, [r1, #1]
 80040a6:	434b      	muls	r3, r1
 80040a8:	0019      	movs	r1, r3
 80040aa:	69fb      	ldr	r3, [r7, #28]
 80040ac:	18cb      	adds	r3, r1, r3
 80040ae:	005b      	lsls	r3, r3, #1
 80040b0:	18d3      	adds	r3, r2, r3
 80040b2:	881b      	ldrh	r3, [r3, #0]
 80040b4:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 80040b6:	2300      	movs	r3, #0
 80040b8:	61bb      	str	r3, [r7, #24]
 80040ba:	e035      	b.n	8004128 <ssd1306_WriteChar+0xdc>
            if((b << j) & 0x8000)  {
 80040bc:	697a      	ldr	r2, [r7, #20]
 80040be:	69bb      	ldr	r3, [r7, #24]
 80040c0:	409a      	lsls	r2, r3
 80040c2:	2380      	movs	r3, #128	; 0x80
 80040c4:	021b      	lsls	r3, r3, #8
 80040c6:	4013      	ands	r3, r2
 80040c8:	d014      	beq.n	80040f4 <ssd1306_WriteChar+0xa8>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80040ca:	4b27      	ldr	r3, [pc, #156]	; (8004168 <ssd1306_WriteChar+0x11c>)
 80040cc:	881b      	ldrh	r3, [r3, #0]
 80040ce:	b2da      	uxtb	r2, r3
 80040d0:	69bb      	ldr	r3, [r7, #24]
 80040d2:	b2db      	uxtb	r3, r3
 80040d4:	18d3      	adds	r3, r2, r3
 80040d6:	b2d8      	uxtb	r0, r3
 80040d8:	4b23      	ldr	r3, [pc, #140]	; (8004168 <ssd1306_WriteChar+0x11c>)
 80040da:	885b      	ldrh	r3, [r3, #2]
 80040dc:	b2da      	uxtb	r2, r3
 80040de:	69fb      	ldr	r3, [r7, #28]
 80040e0:	b2db      	uxtb	r3, r3
 80040e2:	18d3      	adds	r3, r2, r3
 80040e4:	b2d9      	uxtb	r1, r3
 80040e6:	230e      	movs	r3, #14
 80040e8:	18fb      	adds	r3, r7, r3
 80040ea:	781b      	ldrb	r3, [r3, #0]
 80040ec:	001a      	movs	r2, r3
 80040ee:	f7ff ff3d 	bl	8003f6c <ssd1306_DrawPixel>
 80040f2:	e016      	b.n	8004122 <ssd1306_WriteChar+0xd6>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80040f4:	4b1c      	ldr	r3, [pc, #112]	; (8004168 <ssd1306_WriteChar+0x11c>)
 80040f6:	881b      	ldrh	r3, [r3, #0]
 80040f8:	b2da      	uxtb	r2, r3
 80040fa:	69bb      	ldr	r3, [r7, #24]
 80040fc:	b2db      	uxtb	r3, r3
 80040fe:	18d3      	adds	r3, r2, r3
 8004100:	b2d8      	uxtb	r0, r3
 8004102:	4b19      	ldr	r3, [pc, #100]	; (8004168 <ssd1306_WriteChar+0x11c>)
 8004104:	885b      	ldrh	r3, [r3, #2]
 8004106:	b2da      	uxtb	r2, r3
 8004108:	69fb      	ldr	r3, [r7, #28]
 800410a:	b2db      	uxtb	r3, r3
 800410c:	18d3      	adds	r3, r2, r3
 800410e:	b2d9      	uxtb	r1, r3
 8004110:	230e      	movs	r3, #14
 8004112:	18fb      	adds	r3, r7, r3
 8004114:	781b      	ldrb	r3, [r3, #0]
 8004116:	425a      	negs	r2, r3
 8004118:	4153      	adcs	r3, r2
 800411a:	b2db      	uxtb	r3, r3
 800411c:	001a      	movs	r2, r3
 800411e:	f7ff ff25 	bl	8003f6c <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8004122:	69bb      	ldr	r3, [r7, #24]
 8004124:	3301      	adds	r3, #1
 8004126:	61bb      	str	r3, [r7, #24]
 8004128:	1d3b      	adds	r3, r7, #4
 800412a:	781b      	ldrb	r3, [r3, #0]
 800412c:	001a      	movs	r2, r3
 800412e:	69bb      	ldr	r3, [r7, #24]
 8004130:	4293      	cmp	r3, r2
 8004132:	d3c3      	bcc.n	80040bc <ssd1306_WriteChar+0x70>
    for(i = 0; i < Font.FontHeight; i++) {
 8004134:	69fb      	ldr	r3, [r7, #28]
 8004136:	3301      	adds	r3, #1
 8004138:	61fb      	str	r3, [r7, #28]
 800413a:	1d3b      	adds	r3, r7, #4
 800413c:	785b      	ldrb	r3, [r3, #1]
 800413e:	001a      	movs	r2, r3
 8004140:	69fb      	ldr	r3, [r7, #28]
 8004142:	4293      	cmp	r3, r2
 8004144:	d3a7      	bcc.n	8004096 <ssd1306_WriteChar+0x4a>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8004146:	4b08      	ldr	r3, [pc, #32]	; (8004168 <ssd1306_WriteChar+0x11c>)
 8004148:	881a      	ldrh	r2, [r3, #0]
 800414a:	1d3b      	adds	r3, r7, #4
 800414c:	781b      	ldrb	r3, [r3, #0]
 800414e:	b29b      	uxth	r3, r3
 8004150:	18d3      	adds	r3, r2, r3
 8004152:	b29a      	uxth	r2, r3
 8004154:	4b04      	ldr	r3, [pc, #16]	; (8004168 <ssd1306_WriteChar+0x11c>)
 8004156:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8004158:	230f      	movs	r3, #15
 800415a:	18fb      	adds	r3, r7, r3
 800415c:	781b      	ldrb	r3, [r3, #0]
}
 800415e:	0018      	movs	r0, r3
 8004160:	46bd      	mov	sp, r7
 8004162:	b009      	add	sp, #36	; 0x24
 8004164:	bd90      	pop	{r4, r7, pc}
 8004166:	46c0      	nop			; (mov r8, r8)
 8004168:	200004e4 	.word	0x200004e4

0800416c <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 800416c:	b580      	push	{r7, lr}
 800416e:	b084      	sub	sp, #16
 8004170:	af00      	add	r7, sp, #0
 8004172:	60f8      	str	r0, [r7, #12]
 8004174:	1d38      	adds	r0, r7, #4
 8004176:	6001      	str	r1, [r0, #0]
 8004178:	6042      	str	r2, [r0, #4]
 800417a:	001a      	movs	r2, r3
 800417c:	1cfb      	adds	r3, r7, #3
 800417e:	701a      	strb	r2, [r3, #0]
    // Write until null-byte
    while (*str) {
 8004180:	e014      	b.n	80041ac <ssd1306_WriteString+0x40>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	7818      	ldrb	r0, [r3, #0]
 8004186:	1cfb      	adds	r3, r7, #3
 8004188:	781b      	ldrb	r3, [r3, #0]
 800418a:	1d3a      	adds	r2, r7, #4
 800418c:	6811      	ldr	r1, [r2, #0]
 800418e:	6852      	ldr	r2, [r2, #4]
 8004190:	f7ff ff5c 	bl	800404c <ssd1306_WriteChar>
 8004194:	0003      	movs	r3, r0
 8004196:	001a      	movs	r2, r3
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	781b      	ldrb	r3, [r3, #0]
 800419c:	429a      	cmp	r2, r3
 800419e:	d002      	beq.n	80041a6 <ssd1306_WriteString+0x3a>
            // Char could not be written
            return *str;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	781b      	ldrb	r3, [r3, #0]
 80041a4:	e008      	b.n	80041b8 <ssd1306_WriteString+0x4c>
        }
        
        // Next char
        str++;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	3301      	adds	r3, #1
 80041aa:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	781b      	ldrb	r3, [r3, #0]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d1e6      	bne.n	8004182 <ssd1306_WriteString+0x16>
    }
    
    // Everything ok
    return *str;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	781b      	ldrb	r3, [r3, #0]
}
 80041b8:	0018      	movs	r0, r3
 80041ba:	46bd      	mov	sp, r7
 80041bc:	b004      	add	sp, #16
 80041be:	bd80      	pop	{r7, pc}

080041c0 <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b082      	sub	sp, #8
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	0002      	movs	r2, r0
 80041c8:	1dfb      	adds	r3, r7, #7
 80041ca:	701a      	strb	r2, [r3, #0]
 80041cc:	1dbb      	adds	r3, r7, #6
 80041ce:	1c0a      	adds	r2, r1, #0
 80041d0:	701a      	strb	r2, [r3, #0]
    SSD1306.CurrentX = x;
 80041d2:	1dfb      	adds	r3, r7, #7
 80041d4:	781b      	ldrb	r3, [r3, #0]
 80041d6:	b29a      	uxth	r2, r3
 80041d8:	4b05      	ldr	r3, [pc, #20]	; (80041f0 <ssd1306_SetCursor+0x30>)
 80041da:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80041dc:	1dbb      	adds	r3, r7, #6
 80041de:	781b      	ldrb	r3, [r3, #0]
 80041e0:	b29a      	uxth	r2, r3
 80041e2:	4b03      	ldr	r3, [pc, #12]	; (80041f0 <ssd1306_SetCursor+0x30>)
 80041e4:	805a      	strh	r2, [r3, #2]
}
 80041e6:	46c0      	nop			; (mov r8, r8)
 80041e8:	46bd      	mov	sp, r7
 80041ea:	b002      	add	sp, #8
 80041ec:	bd80      	pop	{r7, pc}
 80041ee:	46c0      	nop			; (mov r8, r8)
 80041f0:	200004e4 	.word	0x200004e4

080041f4 <ssd1306_TestFonts>:
    } while((end - start) < 8000);
   
    HAL_Delay(1000);
}

void ssd1306_TestFonts() {
 80041f4:	b580      	push	{r7, lr}
 80041f6:	af00      	add	r7, sp, #0
    ssd1306_Fill(Black);
 80041f8:	2000      	movs	r0, #0
 80041fa:	f7ff fe67 	bl	8003ecc <ssd1306_Fill>
    ssd1306_SetCursor(2, 0);
 80041fe:	2100      	movs	r1, #0
 8004200:	2002      	movs	r0, #2
 8004202:	f7ff ffdd 	bl	80041c0 <ssd1306_SetCursor>
    ssd1306_WriteString("Font 16x26", Font_16x26, White);
 8004206:	4a11      	ldr	r2, [pc, #68]	; (800424c <ssd1306_TestFonts+0x58>)
 8004208:	4811      	ldr	r0, [pc, #68]	; (8004250 <ssd1306_TestFonts+0x5c>)
 800420a:	2301      	movs	r3, #1
 800420c:	6811      	ldr	r1, [r2, #0]
 800420e:	6852      	ldr	r2, [r2, #4]
 8004210:	f7ff ffac 	bl	800416c <ssd1306_WriteString>
    ssd1306_SetCursor(2, 26);
 8004214:	211a      	movs	r1, #26
 8004216:	2002      	movs	r0, #2
 8004218:	f7ff ffd2 	bl	80041c0 <ssd1306_SetCursor>
    ssd1306_WriteString("Font 11x18", Font_11x18, White);
 800421c:	4a0d      	ldr	r2, [pc, #52]	; (8004254 <ssd1306_TestFonts+0x60>)
 800421e:	480e      	ldr	r0, [pc, #56]	; (8004258 <ssd1306_TestFonts+0x64>)
 8004220:	2301      	movs	r3, #1
 8004222:	6811      	ldr	r1, [r2, #0]
 8004224:	6852      	ldr	r2, [r2, #4]
 8004226:	f7ff ffa1 	bl	800416c <ssd1306_WriteString>
    ssd1306_SetCursor(2, 26+18);
 800422a:	212c      	movs	r1, #44	; 0x2c
 800422c:	2002      	movs	r0, #2
 800422e:	f7ff ffc7 	bl	80041c0 <ssd1306_SetCursor>
    ssd1306_WriteString("Font 7x10", Font_7x10, White);
 8004232:	4a0a      	ldr	r2, [pc, #40]	; (800425c <ssd1306_TestFonts+0x68>)
 8004234:	480a      	ldr	r0, [pc, #40]	; (8004260 <ssd1306_TestFonts+0x6c>)
 8004236:	2301      	movs	r3, #1
 8004238:	6811      	ldr	r1, [r2, #0]
 800423a:	6852      	ldr	r2, [r2, #4]
 800423c:	f7ff ff96 	bl	800416c <ssd1306_WriteString>
    ssd1306_UpdateScreen();
 8004240:	f7ff fe68 	bl	8003f14 <ssd1306_UpdateScreen>
}
 8004244:	46c0      	nop			; (mov r8, r8)
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}
 800424a:	46c0      	nop			; (mov r8, r8)
 800424c:	20000058 	.word	0x20000058
 8004250:	08004ca8 	.word	0x08004ca8
 8004254:	20000050 	.word	0x20000050
 8004258:	08004cb4 	.word	0x08004cb4
 800425c:	20000048 	.word	0x20000048
 8004260:	08004cc0 	.word	0x08004cc0

08004264 <ssd1306_TestFPS>:

void ssd1306_TestFPS() {
 8004264:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004266:	b0a3      	sub	sp, #140	; 0x8c
 8004268:	af00      	add	r7, sp, #0
    ssd1306_Fill(White);
 800426a:	2001      	movs	r0, #1
 800426c:	f7ff fe2e 	bl	8003ecc <ssd1306_Fill>
   
    uint32_t start = HAL_GetTick();
 8004270:	f7fc ff58 	bl	8001124 <HAL_GetTick>
 8004274:	0003      	movs	r3, r0
 8004276:	2280      	movs	r2, #128	; 0x80
 8004278:	18b9      	adds	r1, r7, r2
 800427a:	600b      	str	r3, [r1, #0]
    uint32_t end = start;
 800427c:	18bb      	adds	r3, r7, r2
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	67fb      	str	r3, [r7, #124]	; 0x7c
    int fps = 0;
 8004282:	2300      	movs	r3, #0
 8004284:	2284      	movs	r2, #132	; 0x84
 8004286:	18ba      	adds	r2, r7, r2
 8004288:	6013      	str	r3, [r2, #0]
    char message[] = " 115200 baud, 8 data bits, 1 stop bit and no parity";
 800428a:	2344      	movs	r3, #68	; 0x44
 800428c:	18fa      	adds	r2, r7, r3
 800428e:	4b44      	ldr	r3, [pc, #272]	; (80043a0 <ssd1306_TestFPS+0x13c>)
 8004290:	0010      	movs	r0, r2
 8004292:	0019      	movs	r1, r3
 8004294:	2334      	movs	r3, #52	; 0x34
 8004296:	001a      	movs	r2, r3
 8004298:	f000 f8c4 	bl	8004424 <memcpy>
   
    ssd1306_SetCursor(2,0);
 800429c:	2100      	movs	r1, #0
 800429e:	2002      	movs	r0, #2
 80042a0:	f7ff ff8e 	bl	80041c0 <ssd1306_SetCursor>
    ssd1306_WriteString("Open a TTY", Font_11x18, Black);
 80042a4:	4a3f      	ldr	r2, [pc, #252]	; (80043a4 <ssd1306_TestFPS+0x140>)
 80042a6:	4840      	ldr	r0, [pc, #256]	; (80043a8 <ssd1306_TestFPS+0x144>)
 80042a8:	2300      	movs	r3, #0
 80042aa:	6811      	ldr	r1, [r2, #0]
 80042ac:	6852      	ldr	r2, [r2, #4]
 80042ae:	f7ff ff5d 	bl	800416c <ssd1306_WriteString>
   
    do {
        ssd1306_SetCursor(2, 18);
 80042b2:	2112      	movs	r1, #18
 80042b4:	2002      	movs	r0, #2
 80042b6:	f7ff ff83 	bl	80041c0 <ssd1306_SetCursor>
        ssd1306_WriteString(message, Font_11x18, Black);
 80042ba:	4a3a      	ldr	r2, [pc, #232]	; (80043a4 <ssd1306_TestFPS+0x140>)
 80042bc:	2444      	movs	r4, #68	; 0x44
 80042be:	1938      	adds	r0, r7, r4
 80042c0:	2300      	movs	r3, #0
 80042c2:	6811      	ldr	r1, [r2, #0]
 80042c4:	6852      	ldr	r2, [r2, #4]
 80042c6:	f7ff ff51 	bl	800416c <ssd1306_WriteString>
        ssd1306_UpdateScreen();
 80042ca:	f7ff fe23 	bl	8003f14 <ssd1306_UpdateScreen>
       
        char ch = message[0];
 80042ce:	257b      	movs	r5, #123	; 0x7b
 80042d0:	197b      	adds	r3, r7, r5
 80042d2:	193a      	adds	r2, r7, r4
 80042d4:	7812      	ldrb	r2, [r2, #0]
 80042d6:	701a      	strb	r2, [r3, #0]
        memmove(message, message+1, sizeof(message)-2);
 80042d8:	193b      	adds	r3, r7, r4
 80042da:	3301      	adds	r3, #1
 80042dc:	1938      	adds	r0, r7, r4
 80042de:	2232      	movs	r2, #50	; 0x32
 80042e0:	0019      	movs	r1, r3
 80042e2:	f000 f8a8 	bl	8004436 <memmove>
        message[sizeof(message)-2] = ch;
 80042e6:	193b      	adds	r3, r7, r4
 80042e8:	197a      	adds	r2, r7, r5
 80042ea:	2132      	movs	r1, #50	; 0x32
 80042ec:	7812      	ldrb	r2, [r2, #0]
 80042ee:	545a      	strb	r2, [r3, r1]

        fps++;
 80042f0:	2284      	movs	r2, #132	; 0x84
 80042f2:	18bb      	adds	r3, r7, r2
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	3301      	adds	r3, #1
 80042f8:	18ba      	adds	r2, r7, r2
 80042fa:	6013      	str	r3, [r2, #0]
        end = HAL_GetTick();
 80042fc:	f7fc ff12 	bl	8001124 <HAL_GetTick>
 8004300:	0003      	movs	r3, r0
 8004302:	67fb      	str	r3, [r7, #124]	; 0x7c
    } while((end - start) < 10000);
 8004304:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004306:	2380      	movs	r3, #128	; 0x80
 8004308:	18fb      	adds	r3, r7, r3
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	1ad3      	subs	r3, r2, r3
 800430e:	4a27      	ldr	r2, [pc, #156]	; (80043ac <ssd1306_TestFPS+0x148>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d9ce      	bls.n	80042b2 <ssd1306_TestFPS+0x4e>
   
    HAL_Delay(1000);
 8004314:	23fa      	movs	r3, #250	; 0xfa
 8004316:	009b      	lsls	r3, r3, #2
 8004318:	0018      	movs	r0, r3
 800431a:	f7fc ff0d 	bl	8001138 <HAL_Delay>

    char buff[64];
    fps = (float)fps / ((end - start) / 1000.0);
 800431e:	2684      	movs	r6, #132	; 0x84
 8004320:	19bb      	adds	r3, r7, r6
 8004322:	6818      	ldr	r0, [r3, #0]
 8004324:	f7fb ff7c 	bl	8000220 <__aeabi_i2f>
 8004328:	1c03      	adds	r3, r0, #0
 800432a:	1c18      	adds	r0, r3, #0
 800432c:	f7fc fb2c 	bl	8000988 <__aeabi_f2d>
 8004330:	0004      	movs	r4, r0
 8004332:	000d      	movs	r5, r1
 8004334:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004336:	2380      	movs	r3, #128	; 0x80
 8004338:	18fb      	adds	r3, r7, r3
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	1ad3      	subs	r3, r2, r3
 800433e:	0018      	movs	r0, r3
 8004340:	f7fc faf0 	bl	8000924 <__aeabi_ui2d>
 8004344:	2200      	movs	r2, #0
 8004346:	4b1a      	ldr	r3, [pc, #104]	; (80043b0 <ssd1306_TestFPS+0x14c>)
 8004348:	f7fb ffb4 	bl	80002b4 <__aeabi_ddiv>
 800434c:	0002      	movs	r2, r0
 800434e:	000b      	movs	r3, r1
 8004350:	0020      	movs	r0, r4
 8004352:	0029      	movs	r1, r5
 8004354:	f7fb ffae 	bl	80002b4 <__aeabi_ddiv>
 8004358:	0003      	movs	r3, r0
 800435a:	000c      	movs	r4, r1
 800435c:	0018      	movs	r0, r3
 800435e:	0021      	movs	r1, r4
 8004360:	f7fc faaa 	bl	80008b8 <__aeabi_d2iz>
 8004364:	0003      	movs	r3, r0
 8004366:	19ba      	adds	r2, r7, r6
 8004368:	6013      	str	r3, [r2, #0]
    snprintf(buff, sizeof(buff), "~%d FPS", fps);
 800436a:	19bb      	adds	r3, r7, r6
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a11      	ldr	r2, [pc, #68]	; (80043b4 <ssd1306_TestFPS+0x150>)
 8004370:	1d38      	adds	r0, r7, #4
 8004372:	2140      	movs	r1, #64	; 0x40
 8004374:	f000 f87a 	bl	800446c <sniprintf>
   
    ssd1306_Fill(White);
 8004378:	2001      	movs	r0, #1
 800437a:	f7ff fda7 	bl	8003ecc <ssd1306_Fill>
    ssd1306_SetCursor(2, 18);
 800437e:	2112      	movs	r1, #18
 8004380:	2002      	movs	r0, #2
 8004382:	f7ff ff1d 	bl	80041c0 <ssd1306_SetCursor>
    ssd1306_WriteString(buff, Font_11x18, Black);
 8004386:	4a07      	ldr	r2, [pc, #28]	; (80043a4 <ssd1306_TestFPS+0x140>)
 8004388:	1d38      	adds	r0, r7, #4
 800438a:	2300      	movs	r3, #0
 800438c:	6811      	ldr	r1, [r2, #0]
 800438e:	6852      	ldr	r2, [r2, #4]
 8004390:	f7ff feec 	bl	800416c <ssd1306_WriteString>
    ssd1306_UpdateScreen();
 8004394:	f7ff fdbe 	bl	8003f14 <ssd1306_UpdateScreen>
}
 8004398:	46c0      	nop			; (mov r8, r8)
 800439a:	46bd      	mov	sp, r7
 800439c:	b023      	add	sp, #140	; 0x8c
 800439e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80043a0:	08004ce0 	.word	0x08004ce0
 80043a4:	20000050 	.word	0x20000050
 80043a8:	08004ccc 	.word	0x08004ccc
 80043ac:	0000270f 	.word	0x0000270f
 80043b0:	408f4000 	.word	0x408f4000
 80043b4:	08004cd8 	.word	0x08004cd8

080043b8 <ssd1306_TestAll>:

void ssd1306_TestAll() {
 80043b8:	b580      	push	{r7, lr}
 80043ba:	af00      	add	r7, sp, #0
    ssd1306_Init();
 80043bc:	f7ff fd18 	bl	8003df0 <ssd1306_Init>
    ssd1306_TestFPS();
 80043c0:	f7ff ff50 	bl	8004264 <ssd1306_TestFPS>
//    HAL_Delay(3000);
//    ssd1306_TestBorder();
    ssd1306_TestFonts();
 80043c4:	f7ff ff16 	bl	80041f4 <ssd1306_TestFonts>
}
 80043c8:	46c0      	nop			; (mov r8, r8)
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}
	...

080043d0 <__errno>:
 80043d0:	4b01      	ldr	r3, [pc, #4]	; (80043d8 <__errno+0x8>)
 80043d2:	6818      	ldr	r0, [r3, #0]
 80043d4:	4770      	bx	lr
 80043d6:	46c0      	nop			; (mov r8, r8)
 80043d8:	20000060 	.word	0x20000060

080043dc <__libc_init_array>:
 80043dc:	b570      	push	{r4, r5, r6, lr}
 80043de:	2600      	movs	r6, #0
 80043e0:	4d0c      	ldr	r5, [pc, #48]	; (8004414 <__libc_init_array+0x38>)
 80043e2:	4c0d      	ldr	r4, [pc, #52]	; (8004418 <__libc_init_array+0x3c>)
 80043e4:	1b64      	subs	r4, r4, r5
 80043e6:	10a4      	asrs	r4, r4, #2
 80043e8:	42a6      	cmp	r6, r4
 80043ea:	d109      	bne.n	8004400 <__libc_init_array+0x24>
 80043ec:	2600      	movs	r6, #0
 80043ee:	f000 fc3b 	bl	8004c68 <_init>
 80043f2:	4d0a      	ldr	r5, [pc, #40]	; (800441c <__libc_init_array+0x40>)
 80043f4:	4c0a      	ldr	r4, [pc, #40]	; (8004420 <__libc_init_array+0x44>)
 80043f6:	1b64      	subs	r4, r4, r5
 80043f8:	10a4      	asrs	r4, r4, #2
 80043fa:	42a6      	cmp	r6, r4
 80043fc:	d105      	bne.n	800440a <__libc_init_array+0x2e>
 80043fe:	bd70      	pop	{r4, r5, r6, pc}
 8004400:	00b3      	lsls	r3, r6, #2
 8004402:	58eb      	ldr	r3, [r5, r3]
 8004404:	4798      	blx	r3
 8004406:	3601      	adds	r6, #1
 8004408:	e7ee      	b.n	80043e8 <__libc_init_array+0xc>
 800440a:	00b3      	lsls	r3, r6, #2
 800440c:	58eb      	ldr	r3, [r5, r3]
 800440e:	4798      	blx	r3
 8004410:	3601      	adds	r6, #1
 8004412:	e7f2      	b.n	80043fa <__libc_init_array+0x1e>
 8004414:	080075b4 	.word	0x080075b4
 8004418:	080075b4 	.word	0x080075b4
 800441c:	080075b4 	.word	0x080075b4
 8004420:	080075b8 	.word	0x080075b8

08004424 <memcpy>:
 8004424:	2300      	movs	r3, #0
 8004426:	b510      	push	{r4, lr}
 8004428:	429a      	cmp	r2, r3
 800442a:	d100      	bne.n	800442e <memcpy+0xa>
 800442c:	bd10      	pop	{r4, pc}
 800442e:	5ccc      	ldrb	r4, [r1, r3]
 8004430:	54c4      	strb	r4, [r0, r3]
 8004432:	3301      	adds	r3, #1
 8004434:	e7f8      	b.n	8004428 <memcpy+0x4>

08004436 <memmove>:
 8004436:	b510      	push	{r4, lr}
 8004438:	4288      	cmp	r0, r1
 800443a:	d902      	bls.n	8004442 <memmove+0xc>
 800443c:	188b      	adds	r3, r1, r2
 800443e:	4298      	cmp	r0, r3
 8004440:	d303      	bcc.n	800444a <memmove+0x14>
 8004442:	2300      	movs	r3, #0
 8004444:	e007      	b.n	8004456 <memmove+0x20>
 8004446:	5c8b      	ldrb	r3, [r1, r2]
 8004448:	5483      	strb	r3, [r0, r2]
 800444a:	3a01      	subs	r2, #1
 800444c:	d2fb      	bcs.n	8004446 <memmove+0x10>
 800444e:	bd10      	pop	{r4, pc}
 8004450:	5ccc      	ldrb	r4, [r1, r3]
 8004452:	54c4      	strb	r4, [r0, r3]
 8004454:	3301      	adds	r3, #1
 8004456:	429a      	cmp	r2, r3
 8004458:	d1fa      	bne.n	8004450 <memmove+0x1a>
 800445a:	e7f8      	b.n	800444e <memmove+0x18>

0800445c <memset>:
 800445c:	0003      	movs	r3, r0
 800445e:	1812      	adds	r2, r2, r0
 8004460:	4293      	cmp	r3, r2
 8004462:	d100      	bne.n	8004466 <memset+0xa>
 8004464:	4770      	bx	lr
 8004466:	7019      	strb	r1, [r3, #0]
 8004468:	3301      	adds	r3, #1
 800446a:	e7f9      	b.n	8004460 <memset+0x4>

0800446c <sniprintf>:
 800446c:	b40c      	push	{r2, r3}
 800446e:	b530      	push	{r4, r5, lr}
 8004470:	4b16      	ldr	r3, [pc, #88]	; (80044cc <sniprintf+0x60>)
 8004472:	b09d      	sub	sp, #116	; 0x74
 8004474:	1e0c      	subs	r4, r1, #0
 8004476:	681d      	ldr	r5, [r3, #0]
 8004478:	da08      	bge.n	800448c <sniprintf+0x20>
 800447a:	238b      	movs	r3, #139	; 0x8b
 800447c:	2001      	movs	r0, #1
 800447e:	602b      	str	r3, [r5, #0]
 8004480:	4240      	negs	r0, r0
 8004482:	b01d      	add	sp, #116	; 0x74
 8004484:	bc30      	pop	{r4, r5}
 8004486:	bc08      	pop	{r3}
 8004488:	b002      	add	sp, #8
 800448a:	4718      	bx	r3
 800448c:	2382      	movs	r3, #130	; 0x82
 800448e:	a902      	add	r1, sp, #8
 8004490:	009b      	lsls	r3, r3, #2
 8004492:	818b      	strh	r3, [r1, #12]
 8004494:	2300      	movs	r3, #0
 8004496:	9002      	str	r0, [sp, #8]
 8004498:	6108      	str	r0, [r1, #16]
 800449a:	429c      	cmp	r4, r3
 800449c:	d000      	beq.n	80044a0 <sniprintf+0x34>
 800449e:	1e63      	subs	r3, r4, #1
 80044a0:	608b      	str	r3, [r1, #8]
 80044a2:	614b      	str	r3, [r1, #20]
 80044a4:	2301      	movs	r3, #1
 80044a6:	425b      	negs	r3, r3
 80044a8:	81cb      	strh	r3, [r1, #14]
 80044aa:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80044ac:	ab21      	add	r3, sp, #132	; 0x84
 80044ae:	0028      	movs	r0, r5
 80044b0:	9301      	str	r3, [sp, #4]
 80044b2:	f000 f86f 	bl	8004594 <_svfiprintf_r>
 80044b6:	1c43      	adds	r3, r0, #1
 80044b8:	da01      	bge.n	80044be <sniprintf+0x52>
 80044ba:	238b      	movs	r3, #139	; 0x8b
 80044bc:	602b      	str	r3, [r5, #0]
 80044be:	2c00      	cmp	r4, #0
 80044c0:	d0df      	beq.n	8004482 <sniprintf+0x16>
 80044c2:	2300      	movs	r3, #0
 80044c4:	9a02      	ldr	r2, [sp, #8]
 80044c6:	7013      	strb	r3, [r2, #0]
 80044c8:	e7db      	b.n	8004482 <sniprintf+0x16>
 80044ca:	46c0      	nop			; (mov r8, r8)
 80044cc:	20000060 	.word	0x20000060

080044d0 <__ssputs_r>:
 80044d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80044d2:	688e      	ldr	r6, [r1, #8]
 80044d4:	b085      	sub	sp, #20
 80044d6:	0007      	movs	r7, r0
 80044d8:	000c      	movs	r4, r1
 80044da:	9203      	str	r2, [sp, #12]
 80044dc:	9301      	str	r3, [sp, #4]
 80044de:	429e      	cmp	r6, r3
 80044e0:	d83c      	bhi.n	800455c <__ssputs_r+0x8c>
 80044e2:	2390      	movs	r3, #144	; 0x90
 80044e4:	898a      	ldrh	r2, [r1, #12]
 80044e6:	00db      	lsls	r3, r3, #3
 80044e8:	421a      	tst	r2, r3
 80044ea:	d034      	beq.n	8004556 <__ssputs_r+0x86>
 80044ec:	2503      	movs	r5, #3
 80044ee:	6909      	ldr	r1, [r1, #16]
 80044f0:	6823      	ldr	r3, [r4, #0]
 80044f2:	1a5b      	subs	r3, r3, r1
 80044f4:	9302      	str	r3, [sp, #8]
 80044f6:	6963      	ldr	r3, [r4, #20]
 80044f8:	9802      	ldr	r0, [sp, #8]
 80044fa:	435d      	muls	r5, r3
 80044fc:	0feb      	lsrs	r3, r5, #31
 80044fe:	195d      	adds	r5, r3, r5
 8004500:	9b01      	ldr	r3, [sp, #4]
 8004502:	106d      	asrs	r5, r5, #1
 8004504:	3301      	adds	r3, #1
 8004506:	181b      	adds	r3, r3, r0
 8004508:	42ab      	cmp	r3, r5
 800450a:	d900      	bls.n	800450e <__ssputs_r+0x3e>
 800450c:	001d      	movs	r5, r3
 800450e:	0553      	lsls	r3, r2, #21
 8004510:	d532      	bpl.n	8004578 <__ssputs_r+0xa8>
 8004512:	0029      	movs	r1, r5
 8004514:	0038      	movs	r0, r7
 8004516:	f000 fb07 	bl	8004b28 <_malloc_r>
 800451a:	1e06      	subs	r6, r0, #0
 800451c:	d109      	bne.n	8004532 <__ssputs_r+0x62>
 800451e:	230c      	movs	r3, #12
 8004520:	603b      	str	r3, [r7, #0]
 8004522:	2340      	movs	r3, #64	; 0x40
 8004524:	2001      	movs	r0, #1
 8004526:	89a2      	ldrh	r2, [r4, #12]
 8004528:	4240      	negs	r0, r0
 800452a:	4313      	orrs	r3, r2
 800452c:	81a3      	strh	r3, [r4, #12]
 800452e:	b005      	add	sp, #20
 8004530:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004532:	9a02      	ldr	r2, [sp, #8]
 8004534:	6921      	ldr	r1, [r4, #16]
 8004536:	f7ff ff75 	bl	8004424 <memcpy>
 800453a:	89a3      	ldrh	r3, [r4, #12]
 800453c:	4a14      	ldr	r2, [pc, #80]	; (8004590 <__ssputs_r+0xc0>)
 800453e:	401a      	ands	r2, r3
 8004540:	2380      	movs	r3, #128	; 0x80
 8004542:	4313      	orrs	r3, r2
 8004544:	81a3      	strh	r3, [r4, #12]
 8004546:	9b02      	ldr	r3, [sp, #8]
 8004548:	6126      	str	r6, [r4, #16]
 800454a:	18f6      	adds	r6, r6, r3
 800454c:	6026      	str	r6, [r4, #0]
 800454e:	6165      	str	r5, [r4, #20]
 8004550:	9e01      	ldr	r6, [sp, #4]
 8004552:	1aed      	subs	r5, r5, r3
 8004554:	60a5      	str	r5, [r4, #8]
 8004556:	9b01      	ldr	r3, [sp, #4]
 8004558:	429e      	cmp	r6, r3
 800455a:	d900      	bls.n	800455e <__ssputs_r+0x8e>
 800455c:	9e01      	ldr	r6, [sp, #4]
 800455e:	0032      	movs	r2, r6
 8004560:	9903      	ldr	r1, [sp, #12]
 8004562:	6820      	ldr	r0, [r4, #0]
 8004564:	f7ff ff67 	bl	8004436 <memmove>
 8004568:	68a3      	ldr	r3, [r4, #8]
 800456a:	2000      	movs	r0, #0
 800456c:	1b9b      	subs	r3, r3, r6
 800456e:	60a3      	str	r3, [r4, #8]
 8004570:	6823      	ldr	r3, [r4, #0]
 8004572:	199e      	adds	r6, r3, r6
 8004574:	6026      	str	r6, [r4, #0]
 8004576:	e7da      	b.n	800452e <__ssputs_r+0x5e>
 8004578:	002a      	movs	r2, r5
 800457a:	0038      	movs	r0, r7
 800457c:	f000 fb32 	bl	8004be4 <_realloc_r>
 8004580:	1e06      	subs	r6, r0, #0
 8004582:	d1e0      	bne.n	8004546 <__ssputs_r+0x76>
 8004584:	6921      	ldr	r1, [r4, #16]
 8004586:	0038      	movs	r0, r7
 8004588:	f000 fa84 	bl	8004a94 <_free_r>
 800458c:	e7c7      	b.n	800451e <__ssputs_r+0x4e>
 800458e:	46c0      	nop			; (mov r8, r8)
 8004590:	fffffb7f 	.word	0xfffffb7f

08004594 <_svfiprintf_r>:
 8004594:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004596:	b0a1      	sub	sp, #132	; 0x84
 8004598:	9003      	str	r0, [sp, #12]
 800459a:	001d      	movs	r5, r3
 800459c:	898b      	ldrh	r3, [r1, #12]
 800459e:	000f      	movs	r7, r1
 80045a0:	0016      	movs	r6, r2
 80045a2:	061b      	lsls	r3, r3, #24
 80045a4:	d511      	bpl.n	80045ca <_svfiprintf_r+0x36>
 80045a6:	690b      	ldr	r3, [r1, #16]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d10e      	bne.n	80045ca <_svfiprintf_r+0x36>
 80045ac:	2140      	movs	r1, #64	; 0x40
 80045ae:	f000 fabb 	bl	8004b28 <_malloc_r>
 80045b2:	6038      	str	r0, [r7, #0]
 80045b4:	6138      	str	r0, [r7, #16]
 80045b6:	2800      	cmp	r0, #0
 80045b8:	d105      	bne.n	80045c6 <_svfiprintf_r+0x32>
 80045ba:	230c      	movs	r3, #12
 80045bc:	9a03      	ldr	r2, [sp, #12]
 80045be:	3801      	subs	r0, #1
 80045c0:	6013      	str	r3, [r2, #0]
 80045c2:	b021      	add	sp, #132	; 0x84
 80045c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80045c6:	2340      	movs	r3, #64	; 0x40
 80045c8:	617b      	str	r3, [r7, #20]
 80045ca:	2300      	movs	r3, #0
 80045cc:	ac08      	add	r4, sp, #32
 80045ce:	6163      	str	r3, [r4, #20]
 80045d0:	3320      	adds	r3, #32
 80045d2:	7663      	strb	r3, [r4, #25]
 80045d4:	3310      	adds	r3, #16
 80045d6:	76a3      	strb	r3, [r4, #26]
 80045d8:	9507      	str	r5, [sp, #28]
 80045da:	0035      	movs	r5, r6
 80045dc:	782b      	ldrb	r3, [r5, #0]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d001      	beq.n	80045e6 <_svfiprintf_r+0x52>
 80045e2:	2b25      	cmp	r3, #37	; 0x25
 80045e4:	d146      	bne.n	8004674 <_svfiprintf_r+0xe0>
 80045e6:	1bab      	subs	r3, r5, r6
 80045e8:	9305      	str	r3, [sp, #20]
 80045ea:	d00c      	beq.n	8004606 <_svfiprintf_r+0x72>
 80045ec:	0032      	movs	r2, r6
 80045ee:	0039      	movs	r1, r7
 80045f0:	9803      	ldr	r0, [sp, #12]
 80045f2:	f7ff ff6d 	bl	80044d0 <__ssputs_r>
 80045f6:	1c43      	adds	r3, r0, #1
 80045f8:	d100      	bne.n	80045fc <_svfiprintf_r+0x68>
 80045fa:	e0ae      	b.n	800475a <_svfiprintf_r+0x1c6>
 80045fc:	6962      	ldr	r2, [r4, #20]
 80045fe:	9b05      	ldr	r3, [sp, #20]
 8004600:	4694      	mov	ip, r2
 8004602:	4463      	add	r3, ip
 8004604:	6163      	str	r3, [r4, #20]
 8004606:	782b      	ldrb	r3, [r5, #0]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d100      	bne.n	800460e <_svfiprintf_r+0x7a>
 800460c:	e0a5      	b.n	800475a <_svfiprintf_r+0x1c6>
 800460e:	2201      	movs	r2, #1
 8004610:	2300      	movs	r3, #0
 8004612:	4252      	negs	r2, r2
 8004614:	6062      	str	r2, [r4, #4]
 8004616:	a904      	add	r1, sp, #16
 8004618:	3254      	adds	r2, #84	; 0x54
 800461a:	1852      	adds	r2, r2, r1
 800461c:	1c6e      	adds	r6, r5, #1
 800461e:	6023      	str	r3, [r4, #0]
 8004620:	60e3      	str	r3, [r4, #12]
 8004622:	60a3      	str	r3, [r4, #8]
 8004624:	7013      	strb	r3, [r2, #0]
 8004626:	65a3      	str	r3, [r4, #88]	; 0x58
 8004628:	7831      	ldrb	r1, [r6, #0]
 800462a:	2205      	movs	r2, #5
 800462c:	4853      	ldr	r0, [pc, #332]	; (800477c <_svfiprintf_r+0x1e8>)
 800462e:	f000 fa25 	bl	8004a7c <memchr>
 8004632:	1c75      	adds	r5, r6, #1
 8004634:	2800      	cmp	r0, #0
 8004636:	d11f      	bne.n	8004678 <_svfiprintf_r+0xe4>
 8004638:	6822      	ldr	r2, [r4, #0]
 800463a:	06d3      	lsls	r3, r2, #27
 800463c:	d504      	bpl.n	8004648 <_svfiprintf_r+0xb4>
 800463e:	2353      	movs	r3, #83	; 0x53
 8004640:	a904      	add	r1, sp, #16
 8004642:	185b      	adds	r3, r3, r1
 8004644:	2120      	movs	r1, #32
 8004646:	7019      	strb	r1, [r3, #0]
 8004648:	0713      	lsls	r3, r2, #28
 800464a:	d504      	bpl.n	8004656 <_svfiprintf_r+0xc2>
 800464c:	2353      	movs	r3, #83	; 0x53
 800464e:	a904      	add	r1, sp, #16
 8004650:	185b      	adds	r3, r3, r1
 8004652:	212b      	movs	r1, #43	; 0x2b
 8004654:	7019      	strb	r1, [r3, #0]
 8004656:	7833      	ldrb	r3, [r6, #0]
 8004658:	2b2a      	cmp	r3, #42	; 0x2a
 800465a:	d016      	beq.n	800468a <_svfiprintf_r+0xf6>
 800465c:	0035      	movs	r5, r6
 800465e:	2100      	movs	r1, #0
 8004660:	200a      	movs	r0, #10
 8004662:	68e3      	ldr	r3, [r4, #12]
 8004664:	782a      	ldrb	r2, [r5, #0]
 8004666:	1c6e      	adds	r6, r5, #1
 8004668:	3a30      	subs	r2, #48	; 0x30
 800466a:	2a09      	cmp	r2, #9
 800466c:	d94e      	bls.n	800470c <_svfiprintf_r+0x178>
 800466e:	2900      	cmp	r1, #0
 8004670:	d018      	beq.n	80046a4 <_svfiprintf_r+0x110>
 8004672:	e010      	b.n	8004696 <_svfiprintf_r+0x102>
 8004674:	3501      	adds	r5, #1
 8004676:	e7b1      	b.n	80045dc <_svfiprintf_r+0x48>
 8004678:	4b40      	ldr	r3, [pc, #256]	; (800477c <_svfiprintf_r+0x1e8>)
 800467a:	6822      	ldr	r2, [r4, #0]
 800467c:	1ac0      	subs	r0, r0, r3
 800467e:	2301      	movs	r3, #1
 8004680:	4083      	lsls	r3, r0
 8004682:	4313      	orrs	r3, r2
 8004684:	6023      	str	r3, [r4, #0]
 8004686:	002e      	movs	r6, r5
 8004688:	e7ce      	b.n	8004628 <_svfiprintf_r+0x94>
 800468a:	9b07      	ldr	r3, [sp, #28]
 800468c:	1d19      	adds	r1, r3, #4
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	9107      	str	r1, [sp, #28]
 8004692:	2b00      	cmp	r3, #0
 8004694:	db01      	blt.n	800469a <_svfiprintf_r+0x106>
 8004696:	930b      	str	r3, [sp, #44]	; 0x2c
 8004698:	e004      	b.n	80046a4 <_svfiprintf_r+0x110>
 800469a:	425b      	negs	r3, r3
 800469c:	60e3      	str	r3, [r4, #12]
 800469e:	2302      	movs	r3, #2
 80046a0:	4313      	orrs	r3, r2
 80046a2:	6023      	str	r3, [r4, #0]
 80046a4:	782b      	ldrb	r3, [r5, #0]
 80046a6:	2b2e      	cmp	r3, #46	; 0x2e
 80046a8:	d10a      	bne.n	80046c0 <_svfiprintf_r+0x12c>
 80046aa:	786b      	ldrb	r3, [r5, #1]
 80046ac:	2b2a      	cmp	r3, #42	; 0x2a
 80046ae:	d135      	bne.n	800471c <_svfiprintf_r+0x188>
 80046b0:	9b07      	ldr	r3, [sp, #28]
 80046b2:	3502      	adds	r5, #2
 80046b4:	1d1a      	adds	r2, r3, #4
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	9207      	str	r2, [sp, #28]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	db2b      	blt.n	8004716 <_svfiprintf_r+0x182>
 80046be:	9309      	str	r3, [sp, #36]	; 0x24
 80046c0:	4e2f      	ldr	r6, [pc, #188]	; (8004780 <_svfiprintf_r+0x1ec>)
 80046c2:	7829      	ldrb	r1, [r5, #0]
 80046c4:	2203      	movs	r2, #3
 80046c6:	0030      	movs	r0, r6
 80046c8:	f000 f9d8 	bl	8004a7c <memchr>
 80046cc:	2800      	cmp	r0, #0
 80046ce:	d006      	beq.n	80046de <_svfiprintf_r+0x14a>
 80046d0:	2340      	movs	r3, #64	; 0x40
 80046d2:	1b80      	subs	r0, r0, r6
 80046d4:	4083      	lsls	r3, r0
 80046d6:	6822      	ldr	r2, [r4, #0]
 80046d8:	3501      	adds	r5, #1
 80046da:	4313      	orrs	r3, r2
 80046dc:	6023      	str	r3, [r4, #0]
 80046de:	7829      	ldrb	r1, [r5, #0]
 80046e0:	2206      	movs	r2, #6
 80046e2:	4828      	ldr	r0, [pc, #160]	; (8004784 <_svfiprintf_r+0x1f0>)
 80046e4:	1c6e      	adds	r6, r5, #1
 80046e6:	7621      	strb	r1, [r4, #24]
 80046e8:	f000 f9c8 	bl	8004a7c <memchr>
 80046ec:	2800      	cmp	r0, #0
 80046ee:	d03c      	beq.n	800476a <_svfiprintf_r+0x1d6>
 80046f0:	4b25      	ldr	r3, [pc, #148]	; (8004788 <_svfiprintf_r+0x1f4>)
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d125      	bne.n	8004742 <_svfiprintf_r+0x1ae>
 80046f6:	2207      	movs	r2, #7
 80046f8:	9b07      	ldr	r3, [sp, #28]
 80046fa:	3307      	adds	r3, #7
 80046fc:	4393      	bics	r3, r2
 80046fe:	3308      	adds	r3, #8
 8004700:	9307      	str	r3, [sp, #28]
 8004702:	6963      	ldr	r3, [r4, #20]
 8004704:	9a04      	ldr	r2, [sp, #16]
 8004706:	189b      	adds	r3, r3, r2
 8004708:	6163      	str	r3, [r4, #20]
 800470a:	e766      	b.n	80045da <_svfiprintf_r+0x46>
 800470c:	4343      	muls	r3, r0
 800470e:	2101      	movs	r1, #1
 8004710:	189b      	adds	r3, r3, r2
 8004712:	0035      	movs	r5, r6
 8004714:	e7a6      	b.n	8004664 <_svfiprintf_r+0xd0>
 8004716:	2301      	movs	r3, #1
 8004718:	425b      	negs	r3, r3
 800471a:	e7d0      	b.n	80046be <_svfiprintf_r+0x12a>
 800471c:	2300      	movs	r3, #0
 800471e:	200a      	movs	r0, #10
 8004720:	001a      	movs	r2, r3
 8004722:	3501      	adds	r5, #1
 8004724:	6063      	str	r3, [r4, #4]
 8004726:	7829      	ldrb	r1, [r5, #0]
 8004728:	1c6e      	adds	r6, r5, #1
 800472a:	3930      	subs	r1, #48	; 0x30
 800472c:	2909      	cmp	r1, #9
 800472e:	d903      	bls.n	8004738 <_svfiprintf_r+0x1a4>
 8004730:	2b00      	cmp	r3, #0
 8004732:	d0c5      	beq.n	80046c0 <_svfiprintf_r+0x12c>
 8004734:	9209      	str	r2, [sp, #36]	; 0x24
 8004736:	e7c3      	b.n	80046c0 <_svfiprintf_r+0x12c>
 8004738:	4342      	muls	r2, r0
 800473a:	2301      	movs	r3, #1
 800473c:	1852      	adds	r2, r2, r1
 800473e:	0035      	movs	r5, r6
 8004740:	e7f1      	b.n	8004726 <_svfiprintf_r+0x192>
 8004742:	ab07      	add	r3, sp, #28
 8004744:	9300      	str	r3, [sp, #0]
 8004746:	003a      	movs	r2, r7
 8004748:	4b10      	ldr	r3, [pc, #64]	; (800478c <_svfiprintf_r+0x1f8>)
 800474a:	0021      	movs	r1, r4
 800474c:	9803      	ldr	r0, [sp, #12]
 800474e:	e000      	b.n	8004752 <_svfiprintf_r+0x1be>
 8004750:	bf00      	nop
 8004752:	9004      	str	r0, [sp, #16]
 8004754:	9b04      	ldr	r3, [sp, #16]
 8004756:	3301      	adds	r3, #1
 8004758:	d1d3      	bne.n	8004702 <_svfiprintf_r+0x16e>
 800475a:	89bb      	ldrh	r3, [r7, #12]
 800475c:	980d      	ldr	r0, [sp, #52]	; 0x34
 800475e:	065b      	lsls	r3, r3, #25
 8004760:	d400      	bmi.n	8004764 <_svfiprintf_r+0x1d0>
 8004762:	e72e      	b.n	80045c2 <_svfiprintf_r+0x2e>
 8004764:	2001      	movs	r0, #1
 8004766:	4240      	negs	r0, r0
 8004768:	e72b      	b.n	80045c2 <_svfiprintf_r+0x2e>
 800476a:	ab07      	add	r3, sp, #28
 800476c:	9300      	str	r3, [sp, #0]
 800476e:	003a      	movs	r2, r7
 8004770:	4b06      	ldr	r3, [pc, #24]	; (800478c <_svfiprintf_r+0x1f8>)
 8004772:	0021      	movs	r1, r4
 8004774:	9803      	ldr	r0, [sp, #12]
 8004776:	f000 f879 	bl	800486c <_printf_i>
 800477a:	e7ea      	b.n	8004752 <_svfiprintf_r+0x1be>
 800477c:	08007580 	.word	0x08007580
 8004780:	08007586 	.word	0x08007586
 8004784:	0800758a 	.word	0x0800758a
 8004788:	00000000 	.word	0x00000000
 800478c:	080044d1 	.word	0x080044d1

08004790 <_printf_common>:
 8004790:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004792:	0015      	movs	r5, r2
 8004794:	9301      	str	r3, [sp, #4]
 8004796:	688a      	ldr	r2, [r1, #8]
 8004798:	690b      	ldr	r3, [r1, #16]
 800479a:	9000      	str	r0, [sp, #0]
 800479c:	000c      	movs	r4, r1
 800479e:	4293      	cmp	r3, r2
 80047a0:	da00      	bge.n	80047a4 <_printf_common+0x14>
 80047a2:	0013      	movs	r3, r2
 80047a4:	0022      	movs	r2, r4
 80047a6:	602b      	str	r3, [r5, #0]
 80047a8:	3243      	adds	r2, #67	; 0x43
 80047aa:	7812      	ldrb	r2, [r2, #0]
 80047ac:	2a00      	cmp	r2, #0
 80047ae:	d001      	beq.n	80047b4 <_printf_common+0x24>
 80047b0:	3301      	adds	r3, #1
 80047b2:	602b      	str	r3, [r5, #0]
 80047b4:	6823      	ldr	r3, [r4, #0]
 80047b6:	069b      	lsls	r3, r3, #26
 80047b8:	d502      	bpl.n	80047c0 <_printf_common+0x30>
 80047ba:	682b      	ldr	r3, [r5, #0]
 80047bc:	3302      	adds	r3, #2
 80047be:	602b      	str	r3, [r5, #0]
 80047c0:	2706      	movs	r7, #6
 80047c2:	6823      	ldr	r3, [r4, #0]
 80047c4:	401f      	ands	r7, r3
 80047c6:	d027      	beq.n	8004818 <_printf_common+0x88>
 80047c8:	0023      	movs	r3, r4
 80047ca:	3343      	adds	r3, #67	; 0x43
 80047cc:	781b      	ldrb	r3, [r3, #0]
 80047ce:	1e5a      	subs	r2, r3, #1
 80047d0:	4193      	sbcs	r3, r2
 80047d2:	6822      	ldr	r2, [r4, #0]
 80047d4:	0692      	lsls	r2, r2, #26
 80047d6:	d430      	bmi.n	800483a <_printf_common+0xaa>
 80047d8:	0022      	movs	r2, r4
 80047da:	9901      	ldr	r1, [sp, #4]
 80047dc:	3243      	adds	r2, #67	; 0x43
 80047de:	9800      	ldr	r0, [sp, #0]
 80047e0:	9e08      	ldr	r6, [sp, #32]
 80047e2:	47b0      	blx	r6
 80047e4:	1c43      	adds	r3, r0, #1
 80047e6:	d025      	beq.n	8004834 <_printf_common+0xa4>
 80047e8:	2306      	movs	r3, #6
 80047ea:	6820      	ldr	r0, [r4, #0]
 80047ec:	682a      	ldr	r2, [r5, #0]
 80047ee:	68e1      	ldr	r1, [r4, #12]
 80047f0:	4003      	ands	r3, r0
 80047f2:	2500      	movs	r5, #0
 80047f4:	2b04      	cmp	r3, #4
 80047f6:	d103      	bne.n	8004800 <_printf_common+0x70>
 80047f8:	1a8d      	subs	r5, r1, r2
 80047fa:	43eb      	mvns	r3, r5
 80047fc:	17db      	asrs	r3, r3, #31
 80047fe:	401d      	ands	r5, r3
 8004800:	68a3      	ldr	r3, [r4, #8]
 8004802:	6922      	ldr	r2, [r4, #16]
 8004804:	4293      	cmp	r3, r2
 8004806:	dd01      	ble.n	800480c <_printf_common+0x7c>
 8004808:	1a9b      	subs	r3, r3, r2
 800480a:	18ed      	adds	r5, r5, r3
 800480c:	2700      	movs	r7, #0
 800480e:	42bd      	cmp	r5, r7
 8004810:	d120      	bne.n	8004854 <_printf_common+0xc4>
 8004812:	2000      	movs	r0, #0
 8004814:	e010      	b.n	8004838 <_printf_common+0xa8>
 8004816:	3701      	adds	r7, #1
 8004818:	68e3      	ldr	r3, [r4, #12]
 800481a:	682a      	ldr	r2, [r5, #0]
 800481c:	1a9b      	subs	r3, r3, r2
 800481e:	42bb      	cmp	r3, r7
 8004820:	ddd2      	ble.n	80047c8 <_printf_common+0x38>
 8004822:	0022      	movs	r2, r4
 8004824:	2301      	movs	r3, #1
 8004826:	3219      	adds	r2, #25
 8004828:	9901      	ldr	r1, [sp, #4]
 800482a:	9800      	ldr	r0, [sp, #0]
 800482c:	9e08      	ldr	r6, [sp, #32]
 800482e:	47b0      	blx	r6
 8004830:	1c43      	adds	r3, r0, #1
 8004832:	d1f0      	bne.n	8004816 <_printf_common+0x86>
 8004834:	2001      	movs	r0, #1
 8004836:	4240      	negs	r0, r0
 8004838:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800483a:	2030      	movs	r0, #48	; 0x30
 800483c:	18e1      	adds	r1, r4, r3
 800483e:	3143      	adds	r1, #67	; 0x43
 8004840:	7008      	strb	r0, [r1, #0]
 8004842:	0021      	movs	r1, r4
 8004844:	1c5a      	adds	r2, r3, #1
 8004846:	3145      	adds	r1, #69	; 0x45
 8004848:	7809      	ldrb	r1, [r1, #0]
 800484a:	18a2      	adds	r2, r4, r2
 800484c:	3243      	adds	r2, #67	; 0x43
 800484e:	3302      	adds	r3, #2
 8004850:	7011      	strb	r1, [r2, #0]
 8004852:	e7c1      	b.n	80047d8 <_printf_common+0x48>
 8004854:	0022      	movs	r2, r4
 8004856:	2301      	movs	r3, #1
 8004858:	321a      	adds	r2, #26
 800485a:	9901      	ldr	r1, [sp, #4]
 800485c:	9800      	ldr	r0, [sp, #0]
 800485e:	9e08      	ldr	r6, [sp, #32]
 8004860:	47b0      	blx	r6
 8004862:	1c43      	adds	r3, r0, #1
 8004864:	d0e6      	beq.n	8004834 <_printf_common+0xa4>
 8004866:	3701      	adds	r7, #1
 8004868:	e7d1      	b.n	800480e <_printf_common+0x7e>
	...

0800486c <_printf_i>:
 800486c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800486e:	b089      	sub	sp, #36	; 0x24
 8004870:	9204      	str	r2, [sp, #16]
 8004872:	000a      	movs	r2, r1
 8004874:	3243      	adds	r2, #67	; 0x43
 8004876:	9305      	str	r3, [sp, #20]
 8004878:	9003      	str	r0, [sp, #12]
 800487a:	9202      	str	r2, [sp, #8]
 800487c:	7e0a      	ldrb	r2, [r1, #24]
 800487e:	000c      	movs	r4, r1
 8004880:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004882:	2a6e      	cmp	r2, #110	; 0x6e
 8004884:	d100      	bne.n	8004888 <_printf_i+0x1c>
 8004886:	e086      	b.n	8004996 <_printf_i+0x12a>
 8004888:	d81f      	bhi.n	80048ca <_printf_i+0x5e>
 800488a:	2a63      	cmp	r2, #99	; 0x63
 800488c:	d033      	beq.n	80048f6 <_printf_i+0x8a>
 800488e:	d808      	bhi.n	80048a2 <_printf_i+0x36>
 8004890:	2a00      	cmp	r2, #0
 8004892:	d100      	bne.n	8004896 <_printf_i+0x2a>
 8004894:	e08c      	b.n	80049b0 <_printf_i+0x144>
 8004896:	2a58      	cmp	r2, #88	; 0x58
 8004898:	d04d      	beq.n	8004936 <_printf_i+0xca>
 800489a:	0025      	movs	r5, r4
 800489c:	3542      	adds	r5, #66	; 0x42
 800489e:	702a      	strb	r2, [r5, #0]
 80048a0:	e030      	b.n	8004904 <_printf_i+0x98>
 80048a2:	2a64      	cmp	r2, #100	; 0x64
 80048a4:	d001      	beq.n	80048aa <_printf_i+0x3e>
 80048a6:	2a69      	cmp	r2, #105	; 0x69
 80048a8:	d1f7      	bne.n	800489a <_printf_i+0x2e>
 80048aa:	6819      	ldr	r1, [r3, #0]
 80048ac:	6825      	ldr	r5, [r4, #0]
 80048ae:	1d0a      	adds	r2, r1, #4
 80048b0:	0628      	lsls	r0, r5, #24
 80048b2:	d529      	bpl.n	8004908 <_printf_i+0x9c>
 80048b4:	6808      	ldr	r0, [r1, #0]
 80048b6:	601a      	str	r2, [r3, #0]
 80048b8:	2800      	cmp	r0, #0
 80048ba:	da03      	bge.n	80048c4 <_printf_i+0x58>
 80048bc:	232d      	movs	r3, #45	; 0x2d
 80048be:	9a02      	ldr	r2, [sp, #8]
 80048c0:	4240      	negs	r0, r0
 80048c2:	7013      	strb	r3, [r2, #0]
 80048c4:	4e6b      	ldr	r6, [pc, #428]	; (8004a74 <_printf_i+0x208>)
 80048c6:	270a      	movs	r7, #10
 80048c8:	e04f      	b.n	800496a <_printf_i+0xfe>
 80048ca:	2a73      	cmp	r2, #115	; 0x73
 80048cc:	d074      	beq.n	80049b8 <_printf_i+0x14c>
 80048ce:	d808      	bhi.n	80048e2 <_printf_i+0x76>
 80048d0:	2a6f      	cmp	r2, #111	; 0x6f
 80048d2:	d01f      	beq.n	8004914 <_printf_i+0xa8>
 80048d4:	2a70      	cmp	r2, #112	; 0x70
 80048d6:	d1e0      	bne.n	800489a <_printf_i+0x2e>
 80048d8:	2220      	movs	r2, #32
 80048da:	6809      	ldr	r1, [r1, #0]
 80048dc:	430a      	orrs	r2, r1
 80048de:	6022      	str	r2, [r4, #0]
 80048e0:	e003      	b.n	80048ea <_printf_i+0x7e>
 80048e2:	2a75      	cmp	r2, #117	; 0x75
 80048e4:	d016      	beq.n	8004914 <_printf_i+0xa8>
 80048e6:	2a78      	cmp	r2, #120	; 0x78
 80048e8:	d1d7      	bne.n	800489a <_printf_i+0x2e>
 80048ea:	0022      	movs	r2, r4
 80048ec:	2178      	movs	r1, #120	; 0x78
 80048ee:	3245      	adds	r2, #69	; 0x45
 80048f0:	7011      	strb	r1, [r2, #0]
 80048f2:	4e61      	ldr	r6, [pc, #388]	; (8004a78 <_printf_i+0x20c>)
 80048f4:	e022      	b.n	800493c <_printf_i+0xd0>
 80048f6:	0025      	movs	r5, r4
 80048f8:	681a      	ldr	r2, [r3, #0]
 80048fa:	3542      	adds	r5, #66	; 0x42
 80048fc:	1d11      	adds	r1, r2, #4
 80048fe:	6019      	str	r1, [r3, #0]
 8004900:	6813      	ldr	r3, [r2, #0]
 8004902:	702b      	strb	r3, [r5, #0]
 8004904:	2301      	movs	r3, #1
 8004906:	e065      	b.n	80049d4 <_printf_i+0x168>
 8004908:	6808      	ldr	r0, [r1, #0]
 800490a:	601a      	str	r2, [r3, #0]
 800490c:	0669      	lsls	r1, r5, #25
 800490e:	d5d3      	bpl.n	80048b8 <_printf_i+0x4c>
 8004910:	b200      	sxth	r0, r0
 8004912:	e7d1      	b.n	80048b8 <_printf_i+0x4c>
 8004914:	6819      	ldr	r1, [r3, #0]
 8004916:	6825      	ldr	r5, [r4, #0]
 8004918:	1d08      	adds	r0, r1, #4
 800491a:	6018      	str	r0, [r3, #0]
 800491c:	6808      	ldr	r0, [r1, #0]
 800491e:	062e      	lsls	r6, r5, #24
 8004920:	d505      	bpl.n	800492e <_printf_i+0xc2>
 8004922:	4e54      	ldr	r6, [pc, #336]	; (8004a74 <_printf_i+0x208>)
 8004924:	2708      	movs	r7, #8
 8004926:	2a6f      	cmp	r2, #111	; 0x6f
 8004928:	d01b      	beq.n	8004962 <_printf_i+0xf6>
 800492a:	270a      	movs	r7, #10
 800492c:	e019      	b.n	8004962 <_printf_i+0xf6>
 800492e:	066d      	lsls	r5, r5, #25
 8004930:	d5f7      	bpl.n	8004922 <_printf_i+0xb6>
 8004932:	b280      	uxth	r0, r0
 8004934:	e7f5      	b.n	8004922 <_printf_i+0xb6>
 8004936:	3145      	adds	r1, #69	; 0x45
 8004938:	4e4e      	ldr	r6, [pc, #312]	; (8004a74 <_printf_i+0x208>)
 800493a:	700a      	strb	r2, [r1, #0]
 800493c:	6818      	ldr	r0, [r3, #0]
 800493e:	6822      	ldr	r2, [r4, #0]
 8004940:	1d01      	adds	r1, r0, #4
 8004942:	6800      	ldr	r0, [r0, #0]
 8004944:	6019      	str	r1, [r3, #0]
 8004946:	0615      	lsls	r5, r2, #24
 8004948:	d521      	bpl.n	800498e <_printf_i+0x122>
 800494a:	07d3      	lsls	r3, r2, #31
 800494c:	d502      	bpl.n	8004954 <_printf_i+0xe8>
 800494e:	2320      	movs	r3, #32
 8004950:	431a      	orrs	r2, r3
 8004952:	6022      	str	r2, [r4, #0]
 8004954:	2710      	movs	r7, #16
 8004956:	2800      	cmp	r0, #0
 8004958:	d103      	bne.n	8004962 <_printf_i+0xf6>
 800495a:	2320      	movs	r3, #32
 800495c:	6822      	ldr	r2, [r4, #0]
 800495e:	439a      	bics	r2, r3
 8004960:	6022      	str	r2, [r4, #0]
 8004962:	0023      	movs	r3, r4
 8004964:	2200      	movs	r2, #0
 8004966:	3343      	adds	r3, #67	; 0x43
 8004968:	701a      	strb	r2, [r3, #0]
 800496a:	6863      	ldr	r3, [r4, #4]
 800496c:	60a3      	str	r3, [r4, #8]
 800496e:	2b00      	cmp	r3, #0
 8004970:	db58      	blt.n	8004a24 <_printf_i+0x1b8>
 8004972:	2204      	movs	r2, #4
 8004974:	6821      	ldr	r1, [r4, #0]
 8004976:	4391      	bics	r1, r2
 8004978:	6021      	str	r1, [r4, #0]
 800497a:	2800      	cmp	r0, #0
 800497c:	d154      	bne.n	8004a28 <_printf_i+0x1bc>
 800497e:	9d02      	ldr	r5, [sp, #8]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d05a      	beq.n	8004a3a <_printf_i+0x1ce>
 8004984:	0025      	movs	r5, r4
 8004986:	7833      	ldrb	r3, [r6, #0]
 8004988:	3542      	adds	r5, #66	; 0x42
 800498a:	702b      	strb	r3, [r5, #0]
 800498c:	e055      	b.n	8004a3a <_printf_i+0x1ce>
 800498e:	0655      	lsls	r5, r2, #25
 8004990:	d5db      	bpl.n	800494a <_printf_i+0xde>
 8004992:	b280      	uxth	r0, r0
 8004994:	e7d9      	b.n	800494a <_printf_i+0xde>
 8004996:	681a      	ldr	r2, [r3, #0]
 8004998:	680d      	ldr	r5, [r1, #0]
 800499a:	1d10      	adds	r0, r2, #4
 800499c:	6949      	ldr	r1, [r1, #20]
 800499e:	6018      	str	r0, [r3, #0]
 80049a0:	6813      	ldr	r3, [r2, #0]
 80049a2:	062e      	lsls	r6, r5, #24
 80049a4:	d501      	bpl.n	80049aa <_printf_i+0x13e>
 80049a6:	6019      	str	r1, [r3, #0]
 80049a8:	e002      	b.n	80049b0 <_printf_i+0x144>
 80049aa:	066d      	lsls	r5, r5, #25
 80049ac:	d5fb      	bpl.n	80049a6 <_printf_i+0x13a>
 80049ae:	8019      	strh	r1, [r3, #0]
 80049b0:	2300      	movs	r3, #0
 80049b2:	9d02      	ldr	r5, [sp, #8]
 80049b4:	6123      	str	r3, [r4, #16]
 80049b6:	e04f      	b.n	8004a58 <_printf_i+0x1ec>
 80049b8:	681a      	ldr	r2, [r3, #0]
 80049ba:	1d11      	adds	r1, r2, #4
 80049bc:	6019      	str	r1, [r3, #0]
 80049be:	6815      	ldr	r5, [r2, #0]
 80049c0:	2100      	movs	r1, #0
 80049c2:	6862      	ldr	r2, [r4, #4]
 80049c4:	0028      	movs	r0, r5
 80049c6:	f000 f859 	bl	8004a7c <memchr>
 80049ca:	2800      	cmp	r0, #0
 80049cc:	d001      	beq.n	80049d2 <_printf_i+0x166>
 80049ce:	1b40      	subs	r0, r0, r5
 80049d0:	6060      	str	r0, [r4, #4]
 80049d2:	6863      	ldr	r3, [r4, #4]
 80049d4:	6123      	str	r3, [r4, #16]
 80049d6:	2300      	movs	r3, #0
 80049d8:	9a02      	ldr	r2, [sp, #8]
 80049da:	7013      	strb	r3, [r2, #0]
 80049dc:	e03c      	b.n	8004a58 <_printf_i+0x1ec>
 80049de:	6923      	ldr	r3, [r4, #16]
 80049e0:	002a      	movs	r2, r5
 80049e2:	9904      	ldr	r1, [sp, #16]
 80049e4:	9803      	ldr	r0, [sp, #12]
 80049e6:	9d05      	ldr	r5, [sp, #20]
 80049e8:	47a8      	blx	r5
 80049ea:	1c43      	adds	r3, r0, #1
 80049ec:	d03e      	beq.n	8004a6c <_printf_i+0x200>
 80049ee:	6823      	ldr	r3, [r4, #0]
 80049f0:	079b      	lsls	r3, r3, #30
 80049f2:	d415      	bmi.n	8004a20 <_printf_i+0x1b4>
 80049f4:	9b07      	ldr	r3, [sp, #28]
 80049f6:	68e0      	ldr	r0, [r4, #12]
 80049f8:	4298      	cmp	r0, r3
 80049fa:	da39      	bge.n	8004a70 <_printf_i+0x204>
 80049fc:	0018      	movs	r0, r3
 80049fe:	e037      	b.n	8004a70 <_printf_i+0x204>
 8004a00:	0022      	movs	r2, r4
 8004a02:	2301      	movs	r3, #1
 8004a04:	3219      	adds	r2, #25
 8004a06:	9904      	ldr	r1, [sp, #16]
 8004a08:	9803      	ldr	r0, [sp, #12]
 8004a0a:	9e05      	ldr	r6, [sp, #20]
 8004a0c:	47b0      	blx	r6
 8004a0e:	1c43      	adds	r3, r0, #1
 8004a10:	d02c      	beq.n	8004a6c <_printf_i+0x200>
 8004a12:	3501      	adds	r5, #1
 8004a14:	68e3      	ldr	r3, [r4, #12]
 8004a16:	9a07      	ldr	r2, [sp, #28]
 8004a18:	1a9b      	subs	r3, r3, r2
 8004a1a:	42ab      	cmp	r3, r5
 8004a1c:	dcf0      	bgt.n	8004a00 <_printf_i+0x194>
 8004a1e:	e7e9      	b.n	80049f4 <_printf_i+0x188>
 8004a20:	2500      	movs	r5, #0
 8004a22:	e7f7      	b.n	8004a14 <_printf_i+0x1a8>
 8004a24:	2800      	cmp	r0, #0
 8004a26:	d0ad      	beq.n	8004984 <_printf_i+0x118>
 8004a28:	9d02      	ldr	r5, [sp, #8]
 8004a2a:	0039      	movs	r1, r7
 8004a2c:	f7fb fbf2 	bl	8000214 <__aeabi_uidivmod>
 8004a30:	5c73      	ldrb	r3, [r6, r1]
 8004a32:	3d01      	subs	r5, #1
 8004a34:	702b      	strb	r3, [r5, #0]
 8004a36:	2800      	cmp	r0, #0
 8004a38:	d1f7      	bne.n	8004a2a <_printf_i+0x1be>
 8004a3a:	2f08      	cmp	r7, #8
 8004a3c:	d109      	bne.n	8004a52 <_printf_i+0x1e6>
 8004a3e:	6823      	ldr	r3, [r4, #0]
 8004a40:	07db      	lsls	r3, r3, #31
 8004a42:	d506      	bpl.n	8004a52 <_printf_i+0x1e6>
 8004a44:	6863      	ldr	r3, [r4, #4]
 8004a46:	6922      	ldr	r2, [r4, #16]
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	dc02      	bgt.n	8004a52 <_printf_i+0x1e6>
 8004a4c:	2330      	movs	r3, #48	; 0x30
 8004a4e:	3d01      	subs	r5, #1
 8004a50:	702b      	strb	r3, [r5, #0]
 8004a52:	9b02      	ldr	r3, [sp, #8]
 8004a54:	1b5b      	subs	r3, r3, r5
 8004a56:	6123      	str	r3, [r4, #16]
 8004a58:	9b05      	ldr	r3, [sp, #20]
 8004a5a:	aa07      	add	r2, sp, #28
 8004a5c:	9300      	str	r3, [sp, #0]
 8004a5e:	0021      	movs	r1, r4
 8004a60:	9b04      	ldr	r3, [sp, #16]
 8004a62:	9803      	ldr	r0, [sp, #12]
 8004a64:	f7ff fe94 	bl	8004790 <_printf_common>
 8004a68:	1c43      	adds	r3, r0, #1
 8004a6a:	d1b8      	bne.n	80049de <_printf_i+0x172>
 8004a6c:	2001      	movs	r0, #1
 8004a6e:	4240      	negs	r0, r0
 8004a70:	b009      	add	sp, #36	; 0x24
 8004a72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a74:	08007591 	.word	0x08007591
 8004a78:	080075a2 	.word	0x080075a2

08004a7c <memchr>:
 8004a7c:	b2c9      	uxtb	r1, r1
 8004a7e:	1882      	adds	r2, r0, r2
 8004a80:	4290      	cmp	r0, r2
 8004a82:	d101      	bne.n	8004a88 <memchr+0xc>
 8004a84:	2000      	movs	r0, #0
 8004a86:	4770      	bx	lr
 8004a88:	7803      	ldrb	r3, [r0, #0]
 8004a8a:	428b      	cmp	r3, r1
 8004a8c:	d0fb      	beq.n	8004a86 <memchr+0xa>
 8004a8e:	3001      	adds	r0, #1
 8004a90:	e7f6      	b.n	8004a80 <memchr+0x4>
	...

08004a94 <_free_r>:
 8004a94:	b570      	push	{r4, r5, r6, lr}
 8004a96:	0005      	movs	r5, r0
 8004a98:	2900      	cmp	r1, #0
 8004a9a:	d010      	beq.n	8004abe <_free_r+0x2a>
 8004a9c:	1f0c      	subs	r4, r1, #4
 8004a9e:	6823      	ldr	r3, [r4, #0]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	da00      	bge.n	8004aa6 <_free_r+0x12>
 8004aa4:	18e4      	adds	r4, r4, r3
 8004aa6:	0028      	movs	r0, r5
 8004aa8:	f000 f8d4 	bl	8004c54 <__malloc_lock>
 8004aac:	4a1d      	ldr	r2, [pc, #116]	; (8004b24 <_free_r+0x90>)
 8004aae:	6813      	ldr	r3, [r2, #0]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d105      	bne.n	8004ac0 <_free_r+0x2c>
 8004ab4:	6063      	str	r3, [r4, #4]
 8004ab6:	6014      	str	r4, [r2, #0]
 8004ab8:	0028      	movs	r0, r5
 8004aba:	f000 f8cc 	bl	8004c56 <__malloc_unlock>
 8004abe:	bd70      	pop	{r4, r5, r6, pc}
 8004ac0:	42a3      	cmp	r3, r4
 8004ac2:	d909      	bls.n	8004ad8 <_free_r+0x44>
 8004ac4:	6821      	ldr	r1, [r4, #0]
 8004ac6:	1860      	adds	r0, r4, r1
 8004ac8:	4283      	cmp	r3, r0
 8004aca:	d1f3      	bne.n	8004ab4 <_free_r+0x20>
 8004acc:	6818      	ldr	r0, [r3, #0]
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	1841      	adds	r1, r0, r1
 8004ad2:	6021      	str	r1, [r4, #0]
 8004ad4:	e7ee      	b.n	8004ab4 <_free_r+0x20>
 8004ad6:	0013      	movs	r3, r2
 8004ad8:	685a      	ldr	r2, [r3, #4]
 8004ada:	2a00      	cmp	r2, #0
 8004adc:	d001      	beq.n	8004ae2 <_free_r+0x4e>
 8004ade:	42a2      	cmp	r2, r4
 8004ae0:	d9f9      	bls.n	8004ad6 <_free_r+0x42>
 8004ae2:	6819      	ldr	r1, [r3, #0]
 8004ae4:	1858      	adds	r0, r3, r1
 8004ae6:	42a0      	cmp	r0, r4
 8004ae8:	d10b      	bne.n	8004b02 <_free_r+0x6e>
 8004aea:	6820      	ldr	r0, [r4, #0]
 8004aec:	1809      	adds	r1, r1, r0
 8004aee:	1858      	adds	r0, r3, r1
 8004af0:	6019      	str	r1, [r3, #0]
 8004af2:	4282      	cmp	r2, r0
 8004af4:	d1e0      	bne.n	8004ab8 <_free_r+0x24>
 8004af6:	6810      	ldr	r0, [r2, #0]
 8004af8:	6852      	ldr	r2, [r2, #4]
 8004afa:	1841      	adds	r1, r0, r1
 8004afc:	6019      	str	r1, [r3, #0]
 8004afe:	605a      	str	r2, [r3, #4]
 8004b00:	e7da      	b.n	8004ab8 <_free_r+0x24>
 8004b02:	42a0      	cmp	r0, r4
 8004b04:	d902      	bls.n	8004b0c <_free_r+0x78>
 8004b06:	230c      	movs	r3, #12
 8004b08:	602b      	str	r3, [r5, #0]
 8004b0a:	e7d5      	b.n	8004ab8 <_free_r+0x24>
 8004b0c:	6821      	ldr	r1, [r4, #0]
 8004b0e:	1860      	adds	r0, r4, r1
 8004b10:	4282      	cmp	r2, r0
 8004b12:	d103      	bne.n	8004b1c <_free_r+0x88>
 8004b14:	6810      	ldr	r0, [r2, #0]
 8004b16:	6852      	ldr	r2, [r2, #4]
 8004b18:	1841      	adds	r1, r0, r1
 8004b1a:	6021      	str	r1, [r4, #0]
 8004b1c:	6062      	str	r2, [r4, #4]
 8004b1e:	605c      	str	r4, [r3, #4]
 8004b20:	e7ca      	b.n	8004ab8 <_free_r+0x24>
 8004b22:	46c0      	nop			; (mov r8, r8)
 8004b24:	200004ec 	.word	0x200004ec

08004b28 <_malloc_r>:
 8004b28:	2303      	movs	r3, #3
 8004b2a:	b570      	push	{r4, r5, r6, lr}
 8004b2c:	1ccd      	adds	r5, r1, #3
 8004b2e:	439d      	bics	r5, r3
 8004b30:	3508      	adds	r5, #8
 8004b32:	0006      	movs	r6, r0
 8004b34:	2d0c      	cmp	r5, #12
 8004b36:	d21e      	bcs.n	8004b76 <_malloc_r+0x4e>
 8004b38:	250c      	movs	r5, #12
 8004b3a:	42a9      	cmp	r1, r5
 8004b3c:	d81d      	bhi.n	8004b7a <_malloc_r+0x52>
 8004b3e:	0030      	movs	r0, r6
 8004b40:	f000 f888 	bl	8004c54 <__malloc_lock>
 8004b44:	4a25      	ldr	r2, [pc, #148]	; (8004bdc <_malloc_r+0xb4>)
 8004b46:	6814      	ldr	r4, [r2, #0]
 8004b48:	0021      	movs	r1, r4
 8004b4a:	2900      	cmp	r1, #0
 8004b4c:	d119      	bne.n	8004b82 <_malloc_r+0x5a>
 8004b4e:	4c24      	ldr	r4, [pc, #144]	; (8004be0 <_malloc_r+0xb8>)
 8004b50:	6823      	ldr	r3, [r4, #0]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d103      	bne.n	8004b5e <_malloc_r+0x36>
 8004b56:	0030      	movs	r0, r6
 8004b58:	f000 f86a 	bl	8004c30 <_sbrk_r>
 8004b5c:	6020      	str	r0, [r4, #0]
 8004b5e:	0029      	movs	r1, r5
 8004b60:	0030      	movs	r0, r6
 8004b62:	f000 f865 	bl	8004c30 <_sbrk_r>
 8004b66:	1c43      	adds	r3, r0, #1
 8004b68:	d12b      	bne.n	8004bc2 <_malloc_r+0x9a>
 8004b6a:	230c      	movs	r3, #12
 8004b6c:	0030      	movs	r0, r6
 8004b6e:	6033      	str	r3, [r6, #0]
 8004b70:	f000 f871 	bl	8004c56 <__malloc_unlock>
 8004b74:	e003      	b.n	8004b7e <_malloc_r+0x56>
 8004b76:	2d00      	cmp	r5, #0
 8004b78:	dadf      	bge.n	8004b3a <_malloc_r+0x12>
 8004b7a:	230c      	movs	r3, #12
 8004b7c:	6033      	str	r3, [r6, #0]
 8004b7e:	2000      	movs	r0, #0
 8004b80:	bd70      	pop	{r4, r5, r6, pc}
 8004b82:	680b      	ldr	r3, [r1, #0]
 8004b84:	1b5b      	subs	r3, r3, r5
 8004b86:	d419      	bmi.n	8004bbc <_malloc_r+0x94>
 8004b88:	2b0b      	cmp	r3, #11
 8004b8a:	d903      	bls.n	8004b94 <_malloc_r+0x6c>
 8004b8c:	600b      	str	r3, [r1, #0]
 8004b8e:	18cc      	adds	r4, r1, r3
 8004b90:	6025      	str	r5, [r4, #0]
 8004b92:	e003      	b.n	8004b9c <_malloc_r+0x74>
 8004b94:	684b      	ldr	r3, [r1, #4]
 8004b96:	428c      	cmp	r4, r1
 8004b98:	d10d      	bne.n	8004bb6 <_malloc_r+0x8e>
 8004b9a:	6013      	str	r3, [r2, #0]
 8004b9c:	0030      	movs	r0, r6
 8004b9e:	f000 f85a 	bl	8004c56 <__malloc_unlock>
 8004ba2:	0020      	movs	r0, r4
 8004ba4:	2207      	movs	r2, #7
 8004ba6:	300b      	adds	r0, #11
 8004ba8:	1d23      	adds	r3, r4, #4
 8004baa:	4390      	bics	r0, r2
 8004bac:	1ac3      	subs	r3, r0, r3
 8004bae:	d0e7      	beq.n	8004b80 <_malloc_r+0x58>
 8004bb0:	425a      	negs	r2, r3
 8004bb2:	50e2      	str	r2, [r4, r3]
 8004bb4:	e7e4      	b.n	8004b80 <_malloc_r+0x58>
 8004bb6:	6063      	str	r3, [r4, #4]
 8004bb8:	000c      	movs	r4, r1
 8004bba:	e7ef      	b.n	8004b9c <_malloc_r+0x74>
 8004bbc:	000c      	movs	r4, r1
 8004bbe:	6849      	ldr	r1, [r1, #4]
 8004bc0:	e7c3      	b.n	8004b4a <_malloc_r+0x22>
 8004bc2:	2303      	movs	r3, #3
 8004bc4:	1cc4      	adds	r4, r0, #3
 8004bc6:	439c      	bics	r4, r3
 8004bc8:	42a0      	cmp	r0, r4
 8004bca:	d0e1      	beq.n	8004b90 <_malloc_r+0x68>
 8004bcc:	1a21      	subs	r1, r4, r0
 8004bce:	0030      	movs	r0, r6
 8004bd0:	f000 f82e 	bl	8004c30 <_sbrk_r>
 8004bd4:	1c43      	adds	r3, r0, #1
 8004bd6:	d1db      	bne.n	8004b90 <_malloc_r+0x68>
 8004bd8:	e7c7      	b.n	8004b6a <_malloc_r+0x42>
 8004bda:	46c0      	nop			; (mov r8, r8)
 8004bdc:	200004ec 	.word	0x200004ec
 8004be0:	200004f0 	.word	0x200004f0

08004be4 <_realloc_r>:
 8004be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004be6:	0007      	movs	r7, r0
 8004be8:	000d      	movs	r5, r1
 8004bea:	0016      	movs	r6, r2
 8004bec:	2900      	cmp	r1, #0
 8004bee:	d105      	bne.n	8004bfc <_realloc_r+0x18>
 8004bf0:	0011      	movs	r1, r2
 8004bf2:	f7ff ff99 	bl	8004b28 <_malloc_r>
 8004bf6:	0004      	movs	r4, r0
 8004bf8:	0020      	movs	r0, r4
 8004bfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004bfc:	2a00      	cmp	r2, #0
 8004bfe:	d103      	bne.n	8004c08 <_realloc_r+0x24>
 8004c00:	f7ff ff48 	bl	8004a94 <_free_r>
 8004c04:	0034      	movs	r4, r6
 8004c06:	e7f7      	b.n	8004bf8 <_realloc_r+0x14>
 8004c08:	f000 f826 	bl	8004c58 <_malloc_usable_size_r>
 8004c0c:	002c      	movs	r4, r5
 8004c0e:	42b0      	cmp	r0, r6
 8004c10:	d2f2      	bcs.n	8004bf8 <_realloc_r+0x14>
 8004c12:	0031      	movs	r1, r6
 8004c14:	0038      	movs	r0, r7
 8004c16:	f7ff ff87 	bl	8004b28 <_malloc_r>
 8004c1a:	1e04      	subs	r4, r0, #0
 8004c1c:	d0ec      	beq.n	8004bf8 <_realloc_r+0x14>
 8004c1e:	0029      	movs	r1, r5
 8004c20:	0032      	movs	r2, r6
 8004c22:	f7ff fbff 	bl	8004424 <memcpy>
 8004c26:	0029      	movs	r1, r5
 8004c28:	0038      	movs	r0, r7
 8004c2a:	f7ff ff33 	bl	8004a94 <_free_r>
 8004c2e:	e7e3      	b.n	8004bf8 <_realloc_r+0x14>

08004c30 <_sbrk_r>:
 8004c30:	2300      	movs	r3, #0
 8004c32:	b570      	push	{r4, r5, r6, lr}
 8004c34:	4c06      	ldr	r4, [pc, #24]	; (8004c50 <_sbrk_r+0x20>)
 8004c36:	0005      	movs	r5, r0
 8004c38:	0008      	movs	r0, r1
 8004c3a:	6023      	str	r3, [r4, #0]
 8004c3c:	f7fc f902 	bl	8000e44 <_sbrk>
 8004c40:	1c43      	adds	r3, r0, #1
 8004c42:	d103      	bne.n	8004c4c <_sbrk_r+0x1c>
 8004c44:	6823      	ldr	r3, [r4, #0]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d000      	beq.n	8004c4c <_sbrk_r+0x1c>
 8004c4a:	602b      	str	r3, [r5, #0]
 8004c4c:	bd70      	pop	{r4, r5, r6, pc}
 8004c4e:	46c0      	nop			; (mov r8, r8)
 8004c50:	2000060c 	.word	0x2000060c

08004c54 <__malloc_lock>:
 8004c54:	4770      	bx	lr

08004c56 <__malloc_unlock>:
 8004c56:	4770      	bx	lr

08004c58 <_malloc_usable_size_r>:
 8004c58:	1f0b      	subs	r3, r1, #4
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	1f18      	subs	r0, r3, #4
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	da01      	bge.n	8004c66 <_malloc_usable_size_r+0xe>
 8004c62:	580b      	ldr	r3, [r1, r0]
 8004c64:	18c0      	adds	r0, r0, r3
 8004c66:	4770      	bx	lr

08004c68 <_init>:
 8004c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c6a:	46c0      	nop			; (mov r8, r8)
 8004c6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c6e:	bc08      	pop	{r3}
 8004c70:	469e      	mov	lr, r3
 8004c72:	4770      	bx	lr

08004c74 <_fini>:
 8004c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c76:	46c0      	nop			; (mov r8, r8)
 8004c78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c7a:	bc08      	pop	{r3}
 8004c7c:	469e      	mov	lr, r3
 8004c7e:	4770      	bx	lr
